
Data Engineer с нуля до Junior -
https://stepik.org/course/137235
-
sojm..........
a........St


Курс глубоко рассматривается и прорабатывается весь инструментарий стека (SQL, Scala, Bash, Hadoop, Linux, Python, Pandas, Airflow и GIT)


Что будет знать наш JUNIOR - выпускник :
1. Экосистема Hadoop
2. Clickhouse + PgAdmin
3. Python + Scala
4. Linux, bash, curl
5. Понимание ETL-процессов и понимание разработки под прод.
6. Batch обработка данных на PySpark


*****************************************************

1.1 - 1 -

обучение в IT - это на самом деле тяжело 

автор - умеет хорошо объяснить, так как давно преподает 

потом можно перейти в аналитику или другую профессию
 
в конце - будет сертификат stepik 

+ будут знания и навыки для трудоустройства 

обучение на этом курсе - не сложно, обучались даже дети 

дата инженер - специалист который работает с маленькими и большими данными 

*****************************************************

1.1 - 2 - 

рефакторинг - это исправление ошибок 

замечания + отзывы + предложения - с 15 сентября 2024 уже поправят 

Для возможности задавать вопросы преподавателям, а также состоять в группе единомышленников и одногруппников, можно вступить в чат по ссылке -
https://golnk.ru/w1A3N
По ссылке -
https://t.me/data_stepic 
можно и нужно отслеживать изменения курса

*****************************************************

1.1 - 3 -

помощь с трудоустройством - разбор основных вопросов на собеседованиях 

как правильно составить резюме 

обзор основных вакансий 

*****************************************************

1.2 - 1 -

одиночный выбор - выбрать один из списка 

может быть несколько правильных ответов 

самое приятное в программировании - самостоятельное решение задач 

иногда нужно вводить код в окно 

бывают и задачи со свободным ответом 

набирать баллы за ответы на курсе 

*****************************************************

2.1 - 1 - Что такое информация? Основные виды. Операции над информацией

Информация — это совокупность данных, знаний или сведений, которые передаются, хранятся или обрабатываются, и которые могут быть использованы для понимания, принятия решений, решения задач, управления процессами или коммуникации. В широком смысле, информация — это всё то, что уменьшает неопределённость и увеличивает знание о каком-либо предмете или явлении.

И рядом с информацией где-то рядом мелькают данные, так что же такое данные?

Данные: Это необработанные факты, цифры, символы или значения, которые сами по себе не имеют смысла. Например, числа 100, 20, 5 — это данные.

Информация: Когда данные обрабатываются, интерпретируются или организуются таким образом, что они приобретают смысл и могут быть использованы для принятия решений или выполнения задач, они становятся информацией. Например, "температура 20°C" или "средний рост людей 100 см" — это информация.

Информация, данные, а может быть знания?

Знание: Информация, которая была воспринята, понята и интегрирована в систему представлений, становится знанием. Знание — это информация, которая интерпретирована и может быть использована для принятия решений или решения проблем.
Пример: Информация о том, что "вода кипит при 100°C", становится знанием, когда мы понимаем, что это означает и как это знание можно применить (например, в кулинарии или химии).
Теперь мы знаем, что такое данные, информация и знания. Вопрос - так с чем же мы все таки будем работать на курсе? 

Большинство тем покрывают работу именно с данными. Но, будет также мелькать работа с информацией. Так как дополнительную описательную информацию хранить вовсе не обязательно. А правильной интерпретацией данных на язык бизнеса занимаются аналитики. 

*****************************************************

2.1 - 2 - Что такое информация? Основные виды. Операции над информацией

Поскольку информация - это различные аудио, медиафайлы, документы, таблицы и так далее, то очевидно что у нее есть некоторые виды. Зачем нужны эти виды? Для того, чтобы понять какой инструмент наиболее подходит для хранения и обработки.

Итак, начнем. На самом деле критериев, которые разделяют информацию на виды очень много. Но я приведу здесь только основные.

Информацию принято делить на качественную и количественную.

- Качественная информация: Описательная информация, которая выражается в виде слов, символов, образов (например, описание внешности человека).

- Количественная информация: Числовая информация, которая выражается в виде цифр и может быть измерена (например, температура, длина, вес).

Также могут делить на формальную и неформальную информацию, тактическую и стратегическую.

Также информацию делят на структурированную, полуструктурированную и неструктурированную информацию. Вот это, пожалуй, нас как будущих дата инженеров интересует больше всего.

Структурированная информация — это данные, организованные и упорядоченные в определённой форме, что позволяет легко их хранить, индексировать, искать и анализировать. Такие данные обычно имеют фиксированный формат, с заранее определёнными полями и типами данных. Это различные реляционные таблицы, электронные таблицы, CSV - файлы. 

Пример - 
--
| ID  | Имя     | Фамилия | Возраст |
|-----|---------|---------|---------|
| 1   | Иван    | Иванов  | 30      |
| 2   | Мария   | Петрова | 25      |
| 3   | Алексей | Смирнов | 40      |
----

Полуструктурированная информация — это данные, которые имеют некоторую структуру, но эта структура не является фиксированной или полной. Полуструктурированные данные могут иметь метки, теги или атрибуты, которые обеспечивают определённый уровень организации, но они не всегда упорядочены по строгим правилам, как структурированные данные. Это могут быть форматы XML, JSON, электронные письма (Имеют некоторую структуру (отправитель, получатель, тема, тело письма), но содержание письма может быть неструктурированным.)

Пример -
--
{
  "users": [
    {
      "id": 1,
      "name": "Иван",
      "surname": "Иванов",
      "age": 30,
      "hobbies": ["футбол", "шахматы"]
    },
    {
      "id": 2,
      "name": "Мария",
      "surname": "Петрова",
      "age": 25
    },
    {
      "id": 3,
      "name": "Алексей",
      "surname": "Смирнов",
      "age": 40,
      "email": "alexey@example.com"
    }
  ]
}
----

Неструктурированная информация — это данные, которые не имеют заранее определённой структуры или формы, что затрудняет их автоматическую обработку и анализ. Эти данные не упорядочены по фиксированным правилам, и их интерпретация часто требует использования сложных алгоритмов, таких как анализ текста, компьютерное зрение и машинное обучение. Это различные тексты, статьи, контракты, изображения, аудиофайлы.

Пример -
--
Иван Иванович Иванов родился 10 февраля 1990 года в городе Москва. Он учился в Московском государственном университете, где получил степень бакалавра в области информатики. В свободное время Иван увлекается футболом и шахматами. В настоящее время он работает программистом в компании "ТехноСофт".
----

*****************************************************

2.1 - 3 -

операции над информацией — это процессы, которые позволяют преобразовывать, анализировать, организовывать и использовать информацию для достижения определённых целей. Эти операции могут быть применимы к разным типам информации, включая текстовые данные, числа, изображения, аудио и видео.

Для начала информацию или же данные необходимо где-то собрать. Итак первый этап - сбор информации.

После того, как информация была собрана - ее необходимо где-то хранить. Но, поскольку, мы уже знаем разницу между видами информации, то очевидно, что способы хранения будут также разные. Об этом мы с Вами будем разговаривать на курсе.

Но, что если информацию, которую мы положили нам не нужна, а нужны только данные? Таким образом информацию необходимо обработать. Убрать ненужные значения, описательные элементы, привести все в нижний регистр и так далее. 

Информацию обработали, что дальше? Дальше начинается работа аналитиков - они занимаются изучением и интерпретацией информации для выявления закономерностей, получения инсайтов и принятия решений. Данный этап называется анализом.

После анализа мы также можем визуализировать данные. Например, определить тренды продаж на будущий год, основываясь на данных.

Окей, мы забрали все самое нужное из данных. Что если мы хотим передать информацию третьим лицам (так делать не нужно) или же нашим заказчикам? То есть необходимо сделать еще 2 этапа - 

1) - доставка данных

2) - шифрование - Согласно законам о защите информации в РФ, любую личную информацию необходимо шифровать, таким образом мы не нарушаем закон о передаче информации третьим лицам. И об этом Вы подробно можете прочитать в следующем степе.

Окей, все передали. Информация или же данные (смотря что мы все таки оставили в хранилище), необходимо удалить. Таким образом мы можем удалить информацию, тем самым высвободив место.

Таким образом, это основные этапы, которые могут быть применены к данным. 

*****************************************************

2.1 - 4 -

В данном степе мы рассмотрим основные федеральные законы, которые контролируют работу с информацией. Полезно знать, чтобы случайно что-нибудь не нарушить. Приведем здесь основные, а то мы все-таки не юристы.

Федеральный закон "Об информации, информационных технологиях и о защите информации" (ФЗ №149-ФЗ)
-
Закон регулирует отношения, связанные с информацией, её использованием, информационными технологиями и защитой информации в Российской Федерации.
Определяет основные понятия, связанные с информацией, такие как "информационные ресурсы", "информационные технологии", "доступ к информации", "защита информации".
Устанавливает права и обязанности субъектов в области информации, включая вопросы доступа к информации, ограничения доступа, ответственность за нарушение законодательства об информации.

Федеральный закон "О персональных данных" (ФЗ №152-ФЗ)
-
Закон регулирует отношения, связанные с обработкой персональных данных физических лиц.
Устанавливает требования к сбору, хранению, обработке и защите персональных данных.
Определяет права субъектов персональных данных, включая право на доступ к своим данным, право на исправление, блокирование или уничтожение данных.
Устанавливает обязанности операторов персональных данных (компаний, государственных органов и других организаций), включая обеспечение конфиденциальности, безопасности и правомерности обработки данных.

Федеральный закон "О государственной тайне" (ФЗ №5485-1)
-
Закон регулирует отношения, связанные с защитой сведений, составляющих государственную тайну.
Устанавливает порядок отнесения сведений к государственной тайне, их классификацию, хранение и защиту.
Определяет обязанности государственных органов, организаций и граждан по защите государственной тайны.

Федеральный закон "О коммерческой тайне" (ФЗ №98-ФЗ)
-
Закон регулирует вопросы, связанные с коммерческой тайной, включая её защиту и использование.
Определяет, что такое коммерческая тайна, и устанавливает правила её защиты.
Устанавливает права и обязанности владельцев коммерческой тайны и лиц, получивших доступ к такой информации.

Федеральный закон "О связи" (ФЗ №126-ФЗ)
-
Закон регулирует вопросы, связанные с использованием средств связи, включая вопросы передачи информации.
Устанавливает правила работы операторов связи, включая вопросы обеспечения конфиденциальности передаваемой информации и соблюдения требований законодательства при предоставлении услуг связи.

*****************************************************

2.1 - 5 -

что такое обезличенная информация и кто такие эти третьи лица.

Обезличенная информация — это данные, которые были обработаны таким образом, что они больше не могут быть связаны с конкретным человеком без использования дополнительной информации. Обезличивание предполагает удаление или замаскирование идентифицирующих элементов данных (например, имени, адреса, номера телефона), что делает невозможным идентификацию личности на основе оставшихся данных.

Приведу Вам несколько примеров.

Удаление или замена имени и фамилии на уникальные идентификаторы.
Маскировка или округление дат рождения, чтобы затруднить идентификацию.
Преобразование номера телефона в хеш или иной уникальный идентификатор, который нельзя напрямую связать с исходным номером.
Теперь поймем, кто такие третьи лица. 

Третьи лица — это любые физические или юридические лица, которые не являются непосредственными участниками договора, соглашения или правоотношений, но могут быть вовлечены в процессы обработки информации, предоставления услуг или выполнения иных задач. В контексте обработки данных третьими лицами часто называют компании или организации, которым передаются данные для обработки, анализа или других целей.

Опять же, приведу примеры.

Компании-обработчики данных, которым передаются данные для выполнения определённых услуг (например, маркетинговый анализ).
Провайдеры облачных услуг, которые предоставляют инфраструктуру для хранения и обработки данных.
Консалтинговые компании, которые анализируют данные и предоставляют рекомендации.
Поскольку передача третьим лицам запрещена в РФ. Операторы данных должны уведомлять субъектов данных (граждан) о передаче их данных третьим лицам и получать на это согласие, если это не предусмотрено законом. Ну, я думаю, многие уже догадались, чтобы не нарушать закон информацию просто обезличивают. Таким образом ничего не нарушают, а данные третьим лицам передают.

[ ]

Кто изображен на картинке выше? Артем, Иван, а может быть Федор? На самом деле для компании 1 - это Баданов Артем Андреевич, а для третьей компании - id12345. Такие вот дела.

*****************************************************

2.2 - 1 -

где можно хранить информацию? Простой ответ - везде, где это возможно. И как раз таки первая десятка тем у нас посвящена этому. Но, там мы будем разговаривать именно про инструменты операционной системы, которые основаны на физических носителях. А данный степ мы посвятим архитектурному хранению информации.

Жесткие диски (HDD) и твердотельные накопители (SSD):
- Жесткие диски (HDD): Механические устройства, которые предлагают большой объем хранения по относительно низкой цене. Идеально подходят для долгосрочного хранения больших объемов данных.
- Твердотельные накопители (SSD): Быстрые и надежные устройства без движущихся частей, используются для хранения данных, к которым нужен частый доступ.

Оптические диски (CD, DVD, Blu-ray):
- Используются для хранения данных, которые не требуют частого изменения, например, архивов или медиафайлов. Диски могут долго хранить информацию, но доступ к ним медленнее, чем к жестким дискам или SSD.

Флеш-накопители (USB, SD-карты):
- Компактные устройства для переносного хранения данных. Идеальны для обмена файлами и краткосрочного хранения.

Магнитные ленты:
- Традиционный носитель для долгосрочного архивного хранения. Медленный доступ, но очень большая ёмкость и долговечность хранения данных.

архитектурным проектированием хранилища занимается DevOps (он же сисадмин). 

Но это мы говорили только про локальный компьютер. А что если у нас большая компания?

Локальные серверы:
- Используются для хранения данных в пределах одной организации. Данные хранятся на серверах, доступ к которым осуществляется через локальную сеть (LAN).

Сетевые хранилища (NAS - Network Attached Storage):
- Специализированные устройства для хранения данных, доступные через сеть. Могут использоваться как в домашних условиях, так и в организациях для централизованного хранения и обмена файлами.

SAN (Storage Area Network):
- Сетевые системы хранения данных, которые обеспечивают высокоскоростной доступ к большим объемам данных. Чаще всего используются в крупных организациях для критически важных данных.

И тут вроде разобрались. Но, где это все дело проектировать и размещать? В серверной. А это место, аренда, закупка материалов и так далее. Поэтому все чаще мы начинаем пользоваться облачными хранилищами, такими как ЯДиск, ГуглДиск и так далее. У них тоже есть своя спецификация.

Публичные облака:
- Услуги хранения данных, предоставляемые третьими лицами через интернет. Примеры: Amazon S3, Google Drive, Microsoft OneDrive, Dropbox. Облачные хранилища предлагают гибкость и масштабируемость, обеспечивая доступ к данным из любого места.

Приватные облака:
- Облачные хранилища, развернутые внутри организации, которые предоставляют все преимущества облачных технологий, но с большей степенью контроля и безопасности. Часто используется для хранения конфиденциальных данных.

Гибридные облака:
- Комбинируют возможности публичных и приватных облаков, позволяя хранить данные в нескольких местах с возможностью перемещения их между облаками в зависимости от потребностей.

форматов, которые можно хранить в системах выше - более 20. И это мы еще про Big Data не говорили

*****************************************************

2.2 - 2 -

мы разберемся с тем, в каких форматах может храниться информация и данные. Итак, начнем -

TXT (Plain Text):
- Простой текстовый формат без форматирования, содержащий только текстовые символы.
- Применение: записи, заметки, сценарии.

DOC/DOCX (Microsoft Word):
- Формат файлов Microsoft Word, который поддерживает текст с форматированием, таблицы, изображения и другие элементы.
- Применение: документы, отчеты, письма.

PDF (Portable Document Format):
- Формат для представления документов в независимом от программного обеспечения, оборудования и операционных систем виде.
- Применение: электронные книги, документы для печати и просмотра.

HTML (HyperText Markup Language):
- Язык разметки для создания веб-страниц, поддерживающий гипертекст, изображения и мультимедиа.
- Применение: создание веб-сайтов.

JPEG/JPG (Joint Photographic Experts Group):
- Формат сжатия изображений с потерями, который используется для фотографий и изображений с плавными переходами цвета.
- Применение: фотографии, веб-графика.

PNG (Portable Network Graphics):
- Формат сжатия без потерь, поддерживающий прозрачность и высокий уровень детализации.
- Применение: веб-графика, изображения с текстом и логотипы.

GIF (Graphics Interchange Format):
- Формат для анимации и изображений с ограниченной палитрой цветов, поддерживает сжатие без потерь.
- Применение: анимации, простые веб-изображения.

MP3 (MPEG Audio Layer III):
- Формат сжатия аудиофайлов с потерями, широко используемый для хранения музыки и подкастов.
- Применение: музыка, аудиокниги, подкасты.

MP4 (MPEG-4 Part 14):
- Формат мультимедийных контейнеров, который поддерживает аудио, видео, субтитры и метаданные.
- Применение: потоковое видео, фильмы, видеофайлы.

AVI (Audio Video Interleave):
- Формат контейнера для аудио и видео данных, поддерживающий различные кодеки.
- Применение: хранение видеофайлов, видеоредактирование.

7Z (7-Zip):
- Формат сжатия данных с высоким уровнем сжатия, поддерживающий различные методы сжатия.
- Применение: архивирование, хранение данных.

ZIP:
- Формат сжатия данных, поддерживающий сжатие без потерь и объединение нескольких файлов в один архив.
- Применение: хранение и передача данных, архивирование.

CSV (Comma-Separated Values):
- Текстовый формат для представления табличных данных, где значения разделены запятыми.
- Применение: обмен данными между различными приложениями, импорты и экспорты данных.
очень похож на txt, но есть разделители.

JSON (JavaScript Object Notation):
- Легкий формат обмена данными, основанный на паре "ключ-значение", поддерживает вложенность структур данных.
- Применение: передача данных между сервером и клиентом, API.

XML (eXtensible Markup Language):
- Формат для хранения и передачи данных с использованием тегов, поддерживает сложные структуры данных.
- Применение: веб-сервисы, конфигурационные файлы, обмен данными.

И многие другие. То есть именно информацию можно хранить в очень разных видах.

*****************************************************

2.3 - 1 -

+

*****************************************************

2.4 - 1 -

Большие данные (Big Data) — это термин, используемый для описания огромных объемов данных, которые слишком велики или сложны для обработки традиционными методами обработки данных и аналитики. Эти данные могут поступать из различных источников, быть разнообразными по структуре и формату, а также быстро изменяться. Для работы с большими данными используют специализированные технологии и инструменты, которые позволяют собирать, хранить, обрабатывать и анализировать такие объемы информации.

1 байт = 8 бит 
1 килобайт = 1024 байт 
1 мегабайт = 1024 килобайт 
1 гигабайт = 1024 мегабайт 
1 терабайт = 1024 гигабайт 
- далее - большие данные -
1 петабайт = 1024 терабайт 
1 экзабайт = 1024 петабайт 
1 зеттабайт = 1024 экзабайт 
1 йоттабайт = 1024 зеттабайт 

*****************************************************

2.4 - 2 -

Перейдем к другим свойствам, которые могут сделать данными большими.

Набор признаков VVV (объём, скорость, разнообразие) был первоначально сформулирован Meta Group в 2001 году, ещё до того, как большие данные стали восприниматься как определённая совокупность информационно-технологических методов и инструментов. В этом контексте, с учётом растущей популярности концепции центрального хранилища данных для организаций, подчеркивалась равнозначная важность всех трёх аспектов управления данными.

Распишем подробнее основные V. 

Volume (Объём) - объём данных, с которым приходится работать, является одной из основных характеристик больших данных. Современные технологии позволяют собирать, хранить и обрабатывать терабайты и петабайты данных. Объём данных включает все данные, которые собираются, хранятся и анализируются.

Velocity (Скорость) - скорость, с которой данные создаются, передаются и обрабатываются. Важна возможность обработки данных в реальном времени или близком к реальному времени, особенно в таких приложениях, как мониторинг состояния оборудования или обработка транзакций.

Variety (Разнообразие) - разнообразие данных касается различных типов и форматов данных, с которыми приходится работать.

Ну и собственно есть и другие V, распишем также и их.

Veracity (Достоверность) - достоверность данных, качество и надёжность информации, с которой работают. Данные могут быть шумными, неполными, противоречивыми или ошибочными, что затрудняет их использование для принятия точных решений.

Value (Ценность) - ценность данных для бизнеса или организации. Данные сами по себе не всегда полезны, и ключевым вопросом является извлечение из них ценной информации, которая может быть использована для принятия решений и создания добавленной стоимости.

Variability (Изменчивость) - изменчивость данных касается их непостоянства, неоднородности и изменчивости с течением времени. Это может касаться как изменения форматов данных, так и изменения значений данных, что усложняет их обработку и анализ.

*****************************************************

2.5 - 1 -

Когда мы говорим про разницу между обычными (маленькими) и большими данными, то очевидно, что раз информации больше, она сложнее и нетривиальней, то используются специальные хранилища и инструменты обработки этих данных. Конечно же, об этом мы с Вами будем говорить на курсе, но здесь будет небольшое превью того, какие же все таки инструменты используются. Но, для начала, необходимо понять, почему большие данные нельзя хранить в традиционных хранилищах и почему нельзя обрабатывать стандартными инструментами.

На самом деле можно! Но не нужно :) Потому что хранение будет неоптимизированным, а взятие информации будет занимать очень много времени, что для бизнеса недопустимо. А что если необходимо будет эту информацию обрабатывать? Тогда вообще закачаемся. И вариант увеличить место/оперативную память не подойдет, потому что у всего есть финальный потолок в который мы в конце концов упремся, несмотря на постоянное увеличение.

Именно поэтому начали создавать специальный софт для хранения, обработки, загрузки и выгрузки больших данных. Поверхностно познакомимся с ним. Начнем, пожалуй, с хранения.

Распределенные файловые системы:

- Hadoop Distributed File System (HDFS):
Это распределенная файловая система, которая является основой платформы Hadoop. HDFS позволяет хранить большие объемы данных, распределяя их по кластерам серверов. Данные разбиваются на блоки, которые хранятся на разных узлах кластера, обеспечивая отказоустойчивость и высокую доступность. Об этом у нас есть отдельная глава.

- Amazon S3 (Simple Storage Service):
Облачное хранилище, предоставляемое Amazon, которое широко используется для хранения больших данных. S3 предлагает высокую масштабируемость, надежность и доступность, что делает его популярным выбором для хранения неструктурированных и полуструктурированных данных.

- Google Cloud Storage, Microsoft Azure Blob Storage:
Подобные сервисы облачного хранения от Google и Microsoft предлагают аналогичные возможности для хранения больших объемов данных в облаке с высокой доступностью и безопасностью.
NoSQL базы данных:

- Apache Cassandra:
Распределенная NoSQL база данных, которая позволяет хранить и управлять большими объемами данных на нескольких серверах. Cassandra хорошо подходит для работы с большими данными благодаря своей масштабируемости и высокой доступности.

- MongoDB:
Документно-ориентированная база данных, которая позволяет хранить данные в формате BSON (расширение JSON). MongoDB хорошо справляется с большими объемами данных и обеспечивает гибкость в работе с полуструктурированными и неструктурированными данными.

- HBase:
NoSQL база данных, построенная поверх HDFS, которая обеспечивает быструю запись и чтение данных, что делает её подходящей для работы с большими данными в реальном времени.

И в отдельную группу мы вынесем еще 2 способа хранения данных, поскольку они не раскатываются образом по типу скачал-установил. Их дополнительно нужно настраивать, при чем не быстро.

- Data Lake — это централизованное хранилище, в котором можно хранить структурированные, полуструктурированные и неструктурированные данные в их исходном виде. Data Lake поддерживает хранение данных любого типа и позволяет организациям собирать и обрабатывать данные из множества источников.

- Хранилища данных (Data Warehouses):
Эти хранилища данных позволяют эффективно хранить и обрабатывать структурированные данные, а также выполнять сложные аналитические запросы над большими объемами данных. Про это подробно мы рассказываем в отдельной главе, посвященной DWH.

*****************************************************

2.5 - 2 -

Когда мы говорим, про обработку обычных данных, то все ненароком думают про SQL и Pandas. Про них мы также рассказываем на курсе. Но, что если я Вам скажу, что на обычном "железе" можно обрабатывать и большие данные? Да, это так! Понятно, что не быстро, но можно. То есть я думаю, что Вы догадались, что все дело в архитектуре вычислений. Рассмотрим список инструментов, которым можно обрабатывать большие данные.

1. Распределенные вычисления:

Apache Hadoop:
Платформа для распределенной обработки больших данных, которая включает в себя HDFS и MapReduce. MapReduce позволяет разбивать задачи на небольшие подзадачи, которые выполняются параллельно на разных узлах кластера, а затем собираются в единый результат. На курсе мы знакомимся с MapReduce только в теории, так как технология уже устарела.

Apache Spark:
Мощная платформа для распределенных вычислений, которая обеспечивает более быструю обработку данных по сравнению с Hadoop благодаря использованию in-memory вычислений (и на самом деле не только). Spark поддерживает разнообразные задачи: от обработки потоков данных (Streaming) до машинного обучения (MLlib). Тут стоить добавить, что во-первых мы проходим Spark углубленно, а во-вторых, а что такое Streaming, спросите Вы. Спешу Вас обрадовать, что об этом подготовлен следующий слайд.

2. Потоковая обработка данных:

Apache Kafka:
Платформа для обработки потоков данных в реальном времени, которая позволяет обрабатывать большие объемы данных, поступающих с высокой скоростью. Kafka используется для сбора, хранения и обработки потоков данных, таких как события IoT или логи сервера. Но на самом деле обработку именно самих данных кафка не делает. Она их перенаправляет.

Apache Flink, Apache Storm:
Инструменты для потоковой обработки данных, которые обеспечивают низкую задержку и возможность обработки данных в реальном времени. Flink и Storm используются для задач, требующих мгновенного отклика на поступающие данные. На курсе, к сожалению, данные инструменты не проходятся. Они являются аналогами Kafka.

3. Инструменты для анализа данных:

Hive:
Инструмент, работающий поверх Hadoop, который позволяет выполнять SQL-подобные запросы к данным, хранящимся в HDFS. Hive упрощает анализ больших данных, предоставляя интерфейс, знакомый пользователям SQL. На курсе этому посвящена отдельная глава.

Presto:
Движок для выполнения SQL-запросов по распределённым данным, который обеспечивает высокую производительность и возможность работы с данными, хранящимися в разных системах (HDFS, S3, реляционные базы данных).

4. Облачные платформы для обработки больших данных:

Google Cloud BigQuery:
Инструмент для обработки больших данных, который позволяет выполнять SQL-запросы по большим наборам данных, хранящимся в облаке. BigQuery обеспечивает высокую производительность и масштабируемость, позволяя обрабатывать петабайты данных за считанные секунды.

Amazon EMR (Elastic MapReduce):
Облачная платформа от Amazon для обработки больших данных, основанная на Apache Hadoop и Apache Spark. EMR позволяет быстро разворачивать кластеры и обрабатывать большие объемы данных в облаке.

Microsoft Azure Synapse Analytics:
Облачная аналитическая платформа, которая объединяет хранение данных и их обработку, обеспечивая возможность работы с большими данными с использованием SQL и Spark.

Конечно, большие данные можно обрабатывать Python-ом, пандасом и так далее. Но опять же, сколько времени нам потребуется? А время - это самый главный ресурс!

*****************************************************

2.6 - 1 -
Что такое ETL/ELT процессы? Batch/Streaming обработка данных

Мы с командой прекрасно понимаем, с какими эмоциями Вы пришли на этот степ после огромного списка инструментов. И настало время разобраться с тем, что нам действительно нужно, а что необходимо, но этим можно пренебречь :)

Обобщим, что мы уже знаем.

1 - Мы знаем, что авторы этого курса старались, чтобы Вы все поняли =)

2 - Знаем, что такое данные, большие данные. Понимаем разницу между ними.

3 - Знаем, что большие данные можно хранить, обрабатывать и выгружать. А еще шифровать, анализировать и многое другое.

4 - Знаем, что есть ООООГРОМНЫЙ список инструментов для хранения больших данных, а также их обработки.

И теперь необходимо выделить общие принципы работы с данными. Это ETL и ELT.



ETL — это классический подход к интеграции данных, который используется уже несколько десятилетий. В нем три этапа - 

1 - Extract (Извлечение):
Данные извлекаются из различных источников данных, таких как базы данных, файловые системы, приложения и другие системы.
Источниками могут быть структурированные и полуструктурированные данные, такие как реляционные базы данных, CSV-файлы, XML, JSON и другие.

2 - Transform (Преобразование):
Извлеченные данные преобразуются в соответствии с требованиями целевой системы. Это очистка данных, фильтрация, агрегация, сортировка, объединение и другие операции.
На этом этапе данные могут быть преобразованы в более подходящий формат для анализа и хранения, например, нормализованы, денормализованы, агрегированы и т.д.

3 - Load (Загрузка):
Преобразованные данные загружаются в целевую систему, такую как хранилище данных. После этого данные готовы для использования аналитическими инструментами и бизнес-приложениями.



ELT — это более современный подход, который стал популярным с развитием мощных систем обработки и хранения данных. Он также состоит из трёх этапов, но порядок операций отличается:

1 - Extract (Извлечение):
Как и в ETL, данные извлекаются из различных источников данных.

2 - Load (Загрузка):
Извлеченные данные загружаются в целевую систему, такой как озеро данных или хранилище данных, без предварительного преобразования. Это может быть особенно полезно для хранения больших объемов неструктурированных или полуструктурированных данных.

3 - Transform (Преобразование):
Преобразование данных происходит уже после их загрузки в целевую систему. Эта операция выполняется непосредственно на мощностях хранилища данных или озера данных, используя доступные вычислительные ресурсы.
Данные могут быть трансформированы по мере необходимости, например, при выполнении аналитических запросов или в процессе подготовки отчетов.



И на самом деле у обоих вариантов есть свои плюсы и минусы. Еще раз повторюсь, что оба варианта применяются в целом к данным, не только большим.



Рассмотрим плюсы и минусы ETL

Преимущества ETL:
- Преобразование данных до загрузки позволяет гарантировать, что в хранилище данных попадают только качественные, очищенные и готовые к анализу данные.
- Поскольку данные уже преобразованы до загрузки, они могут быть быстрее обработаны аналитическими запросами.

Недостатки ETL:
- Преобразование данных до их загрузки может потребовать значительных вычислительных ресурсов на промежуточных серверах.
- Весь процесс ETL может занимать значительное время, особенно если объемы данных велики.



Рассмотрим плюсы и минусы ELT.

Преимущества ELT: 
- Подход ELT особенно эффективен для работы с большими объемами данных, так как вычислительные мощности целевых систем могут быть масштабированы в зависимости от потребностей.
- Данные загружаются в "сыром" виде, что позволяет выполнять разные преобразования в зависимости от задачи. Это упрощает добавление новых типов данных и их анализ без необходимости изменения всего процесса загрузки.
- Поскольку данные загружаются без предварительного преобразования, процесс загрузки может быть быстрее, что особенно важно для больших данных.

Недостатки ELT:
- Преобразование данных требует значительных вычислительных ресурсов от хранилища данных, что может увеличивать стоимость и нагрузку на систему.
- Поскольку данные загружаются без предварительного преобразования, существует риск того, что в хранилище данных попадут некачественные или ошибочные данные, что может усложнить последующую работу с ними.


Окей, теперь мы знаем, что есть 2 основных архитектурных взаимодействия с данными. Если Вы ничего не поняли - не переживайте. Мы приведем пример.

ETL - купили сосиску, почистили ее и поставили вариться. Из минусов - очень трудно снять шкурку. Из плюсов - сосиска уже варится.

ELT - купили сосиску, поставили ее вариться, потом почистили ее. Минус - шкурка сосиски воду могла подпортить. Из плюсов - шкурку после варки легко снять.

Теперь думаю стало понятней. То есть оба варианта хороши и на курсе мы будем рассматривать разное взаимодействие инструментов.

ELT плюс в том, что есть сырые данные - а их особенно любят DS. Они не искажены якобы). Но вычислительные можности везде нужны, а в ELT еще и мощности для хранения нужны побольше (из-за сырых)

*****************************************************

2.6 - 2 -
Что такое ETL/ELT процессы? Batch/Streaming обработка данных

Когда мы разобрались с тем, что такое ETL/ELT процессы работы с данными, то самое время поговорить про batch и streaming. Если ETL/ELT это просто приоритетность выполнения операций в инструментах, то batch и streaming диктует, какие инструменты впринципе нужны в этой цепочке.


Batch обработка данных - это метод обработки данных, при котором данные собираются, группируются в пакеты или блоки, а затем обрабатываются в рамках единого процесса. Пакетная обработка выполняется периодически, по расписанию или по мере накопления данных. Этот подход подходит для ситуаций, когда данные не требуют мгновенной обработки и могут быть обработаны с задержкой.


Примеры пакетной обработки:

- Ежедневные отчеты: Обработка данных о продажах за день, которая запускается в конце дня.

- Периодическая загрузка данных: Загрузка и обновление данных в хранилище данных раз в сутки или раз в неделю.

- Анализ логов: Обработка и анализ логов серверов или приложений, которые собираются за определенный период.


Характеристики пакетной обработки:

- Задержка: Данные обрабатываются с определенной задержкой, поскольку обработка начинается только после накопления определенного объема данных.
- Высокая производительность: Пакетная обработка позволяет оптимизировать ресурсы и производительность, поскольку данные обрабатываются большими объемами, а не в реальном времени.
- Масштабируемость: Подходит для обработки больших объемов данных, так как операции могут быть параллелизированы и распределены по кластерам серверов.
- Примеры технологий: Apache Hadoop, Apache Spark (в режиме batch), ETL-процессы.


Streaming обработка данных - это метод обработки данных, при котором данные обрабатываются непрерывно по мере их поступления. В отличие от пакетной обработки, потоковая обработка позволяет обрабатывать данные практически в реальном времени, что особенно важно в случаях, когда нужна быстрая реакция на поступающие данные.


Примеры потоковой обработки:

- Мониторинг финансовых транзакций: Обнаружение мошеннических операций в реальном времени.


Характеристики потоковой обработки:

- Минимальная задержка: Данные обрабатываются с минимальной задержкой после их поступления в систему, что позволяет получать результаты практически в реальном времени.

- Непрерывность: Обработка данных происходит непрерывно, без необходимости накопления данных в пакеты.

- Масштабируемость и адаптивность: Потоковая обработка должна быть способна справляться с переменным объемом данных, поддерживая масштабируемость и адаптивность системы.

- Примеры технологий: Apache Kafka, Apache Flink, Apache Storm, Apache Spark Streaming, Google Cloud Dataflow.


На курсе мы рассматриваем инструменты batch обработки и организуем полный ETL процесс. Но, проходим также и инструменты streaming, но без фанатизма и практического применения. 


Примером потоковой обработки является Rigspace (https://tetra-soft.ru/products) - мониторинг бурения нефтяных и газовых скважин в реальном времени.

*****************************************************

2.7 - 1 -
На кого мы с Вами учимся? Что за Data Engineer такой


Наконец, поймем, почему курс так называется и что это вообще за профессия такая - Data Engineer?

Data Engineer (инженер данных) — это специалист, который занимается проектированием, созданием и поддержкой инфраструктуры и систем для сбора, хранения, обработки и передачи данных. Основная цель Data Engineer'а — обеспечить доступность, качество и целостность данных, которые будут использоваться для анализа, машинного обучения и других задач, связанных с данными. Грубо говоря - человек-оркестр, который должен уметь:

1. Мигрировать данные

2. Обрабатывать данные

3. Генерировать данные

4. Проектировать хранилища

5. Знать и понимать разницу между вариантами обработки данных и хранения данных


И здесь важно сказать, что DE не одно и тоже, что:

1. Разработчик баз данных

2. DWH разработчик

3. Аналитик данных

4. Data Science'ист


Data Engineer не должен заниматься такими вещами, как:

1. Разработка ML

2. Аналитика и бизнес аналитика

3. Администрирование сетей и систем

4. Разработка и создание пользовательских интерфейсов

5. Ручная очистка данных

6. Определение бизнес-требований

 
Вам никто не запрещает этим заниматься, но в рабочую инструкцию DE это никогда не входило!

*****************************************************

2.8 - 1 -
Реальные примеры того, как Big Data используется в жизни


урок - видео 

1 - продуктовая сеть и бонусные карты - избавляются от просрочки 

2 - банки и выдача кредитов 

*****************************************************

3.1 - 1,2,3 -
Введение в базы данных


Понятие «база данных» (database) было введено в 1960-х годах в контексте развития информационных технологий и систем управления данными.

Эдгар Кодд, работавший в IBM, предложил в 1970 году реляционную модель данных, которая стала основой для большинства современных баз данных. Он представил концепцию организации данных в виде таблиц (отношений) и ввел понятие реляционной базы данных. 

База данных (БД) — это организованная совокупность структурированной информации или данных, которая хранится в электронном виде и управляется системой управления базами данных (СУБД). Основное назначение базы данных — эффективное хранение, управление, доступ и обработка больших объемов данных, а также обеспечение целостности и безопасности информации.

В базе данных данные могут быть организованы в виде таблиц (в случае реляционных баз данных), документов, ключ-значение пар, графов и других структур в зависимости от типа используемой СУБД. Базы данных позволяют пользователям добавлять, изменять, удалять и извлекать данные, а также выполнять сложные запросы и анализ.

И тут также стоить расшифровать аббревиатуру "СУБД". 

Система управления базами данных (СУБД) — это программное обеспечение, которое позволяет создавать, управлять и использовать базы данных. СУБД обеспечивает интерфейс между пользователями (или приложениями) и базой данных, предоставляя возможность выполнять различные операции с данными, такие как создание (англ. create), чтение (read), модификация (update) и удаление (delete) данных (операции CRUD).

То есть отдельно с БД поработать наврятли получится, потому что любые запросы всегда пишутся в интерфейсе СУБД. Пробежимся также по тому, настолько ли актуальны базы данных и где они применяются -

- Базы данных позволяют предприятиям отслеживать запасы товаров, управлять поставками и планировать закупки, что помогает оптимизировать цепочку поставок и снизить издержки.

- Базы данных используются для управления счетами, транзакциями, расчета налогов и отчетности.

- Базы данных хранят историю болезней пациентов, результаты анализов, назначения врачей и другую медицинскую информацию.

- Базы данных хранят информацию о товарах, заказах, клиентах и транзакциях, обеспечивая работу интернет-магазинов.

- Социальные платформы используют базы данных для хранения информации о пользователях, их взаимоотношениях, публикациях и взаимодействиях.

- Базы данных управляют счетами клиентов, транзакциями, кредитами и другими финансовыми услугами.

- Базы данных хранят огромные объемы данных, собранных в ходе экспериментов и наблюдений, что позволяет ученым анализировать и делать открытия.

И многое другое...

*****************************************************

3.1 - 4 -
Введение в базы данных


урок - видео 

параметры БД -
- скорость 
- структура 
- популяризация (чтобы пользовались другие люди)

БД могут хранить данные - 
- только в виде таблиц 
- файлы 
- и т.д.

БД могут хранить -
- структурированная информация 
- полуструктурированная информация 
но не существует БД с неструктурированной информацией 

БД - это коллекция, в которой упорядоченно хранятся объекты 

набор из нескольких таблиц - это БД 

СУБД - система управления базами данных (PostgreSQL, MySQL и т.п.)

таблица - это столбцы и строки 

столбец id - делает каждую строку уникальной 

БД виды - 
- реляционные (РСУБД) - информация в виде таблиц, сейчас они лидируют по колличеству
- нереляционные (информация хранится в виде документов, графов, словарей и т.п.)

*****************************************************

3.2 - 1 -
Виды баз данных


Существует огромное количество разновидностей современных баз данных. Каждая из разновидностей по своему хороша, плоха и подходит под определенный список задач. Видов более 10, поэтому приведем здесь описание только основных БД -
1 - Иерархические
2 - Реляционные
3 - Нереляционные 
4 - Документоориентированные
5 - Колоночные
6 - Графовые
7 - Объектно-ориентированные


1. Иерархические базы данных организованы в виде древовидной структуры, где одна основная ветвь разветвляется на множество подчиненных. В этой структуре данные упорядочиваются на основе отношений типа "родитель-потомок". Визуально это напоминает структуру папок на компьютере — каждая запись имеет связь только с одной вышестоящей записью, и отношения типа "многие ко многим" в такой системе невозможны.
Поскольку структура базы данных иерархическая, каждая запись в дереве данных должна иметь как минимум одного родителя. Доступ к данным осуществляется пользователем, проходя по структуре, которая всегда начинается с корневого узла или первичного родителя.


2. Реляционные базы данных организуют данные в виде таблиц, где каждая таблица состоит из строк (записей) и столбцов (полей). Таблицы могут быть связаны между собой через ключи. Про них мы будем говорить постоянно :). Сейчас нам необходимо лишь запомнить, что реляционные базы данных самые популярные.


3. NoSQL(NotOnlySQL) базы данных предназначены для работы с данными, которые не вписываются в традиционные реляционные модели. Они могут хранить данные в виде документов, пар ключ-значение, графов или столбцов. NoSQL базы данных часто используются для работы с большими объемами данных и в высоконагруженных системах.


4.  Документоориентированные базы данных  управляют так называемыми документами, представляющими собой набор значений и данных объекта. Важно отметить, что один документ может содержать информацию, которая в реляционной СУБД обычно распределена по нескольким таблицам. Кроме того, документоориентированные базы данных не требуют, чтобы все документы имели одинаковую структуру. Доступ к каждому документу осуществляется через ключ, который является уникальным идентификатором данного документа.
Как раз таки по ключу, он же хеш-код и происходит взятие информации.


5. Колоночные базы данных — это базы данных, в которых данные организуются и хранятся по столбцам, а не по строкам, как в традиционных реляционных базах данных. Этот подход обеспечивает высокую эффективность при выполнении аналитических запросов, особенно на больших объемах данных.


6. Графовые базы данных — базы данных, которые хранят данные в виде графов. Графы состоят из узлов (вершин) и рёбер (связей), что позволяет эффективно моделировать и управлять сложными взаимосвязями между данными. В отличие от реляционных баз данных, которые организуют данные в таблицы, графовые базы данных ориентированы на хранение данных о связях между объектами и быстрое выполнение запросов, связанных с этими связями.


7. Объектно-ориентированные базы данных (OODBMS) — это тип систем управления базами данных, которые интегрируют принципы объектно-ориентированного программирования (ООП) с управлением базами данных. В таких системах данные хранятся в виде объектов, аналогично тому, как они представлены в объектно-ориентированных языках программирования.


Понятно, что многим из Вас хотелось бы знать о преимуществах и недостатках каждой из этих баз данных. Но на текущем этапе в этом нет острой необходимости. На курсе мы пройдем следующие виды баз данных максимально подробно, и Вы сами сможете выделить плюсы и минусы от их использования - 
- PostgreSQL (реляционная база данных)
- ClickHouse (колоночная база данных)
- NoSQL база данных

Остальные виды баз данных не рассматриваются из-за непопулярности в мире Data Engineering.

И это только традиционные модели хранения, а есть еще и распределенные!

*****************************************************

3.3 - 1 -
Что такое OLAP и OLTP?


тут в абривиатуре OLAP и OLTP - 
- A - аналитика - для быстрого сложного анализа данных 
- T - транзакции - для быстрой обработки транзакций и надежности 


Итак, давайте поймем, что внутриуровнево базы данных делятся на виды, но верхнеуровнево базы данных делятся на OLTP и OLAP. Что же это такое? Обратите внимание, что данные понятия применимы не только к базам данным.

OLTP (Online Transaction Processing) — это тип системы обработки данных, предназначенный для управления транзакциями в режиме реального времени. Эти системы обрабатывают большое количество коротких онлайн-транзакций (например, покупка товаров, внесение платежей, обновление записей и т.д.). OLTP-системы оптимизированы для быстрого выполнения большого количества запросов, таких как вставка, обновление и удаление данных.

Основные характеристики OLTP:
- OLTP-системы поддерживают большое количество одновременных пользователей и операций.
- Данные часто структурированы и нормализованы для уменьшения избыточности и обеспечения целостности данных.
- OLTP-системы обеспечивают ACID-свойства (атомарность, согласованность, изолированность, долговечность), что важно для обеспечения точности и надежности транзакций.
- Банковские системы, системы управления заказами, системы бронирования билетов, системы управления складом.

Термины ACID, нормализация, избыточность будут разобраны позднее.

Пример: Интернет-магазин, который обрабатывает заказы клиентов в реальном времени, добавляет записи о заказах, обновляет информацию о запасах и обрабатывает платежи.


OLAP (Online Analytical Processing) — это тип системы обработки данных, предназначенный для анализа больших объемов данных. OLAP-системы используются для поддержки сложных аналитических запросов, таких как анализ трендов, многомерный анализ данных, генерация отчетов и бизнес-аналитика. В отличие от OLTP, OLAP-системы оптимизированы для чтения данных и выполнения сложных запросов.

Основные характеристики OLAP:
- OLAP-системы позволяют пользователям анализировать данные по различным измерениям (например, по времени, географии, продукту и т.д.).
- Данные часто хранятся в денормализованном виде для ускорения выполнения сложных запросов.
- OLAP-системы предназначены для выполнения сложных аналитических операций.

Пример: Руководитель компании использует OLAP-систему для анализа продаж по регионам за последние пять лет, чтобы выявить тенденции и принять стратегические решения.

Подводя итоги, можно сказать, что OLTP подходит для постоянной вставки данных, но на выборку будет работать долго. OLAP, наоборот, вставляет данные медленно, а считывает их моментально. Далее по курсу мы рассматриваем разные хранилища данных и Ваша задача понять к какому классу относится каждое из них.

*****************************************************

3.4 - 1 -
Что такое таблица и из каких элементов она состоит?


С базами данных разобрались. Но что если я скажу Вам, что основная единица данных в базах данных - это таблица. И все запросы пишутся чаще всего к таблицам, а не к базам данных :)

Таблица в контексте баз данных — это основная структура, используемая для хранения данных. Таблица организована в виде строк и столбцов, где каждая строка представляет собой запись (или экземпляр данных), а каждый столбец представляет собой поле (или атрибут) с определенным типом данных.

Для начала начнем с визуализации таблицы и далее пройдем по основным ее элементам и разберем их более детально.

Столбцы (Колонки):
- Столбцы (или колонки) определяют структуру таблицы и представляют собой отдельные атрибуты данных. Каждый столбец имеет уникальное имя и тип данных, который определяет, какой тип данных может быть сохранен в этом столбце (например, целые числа, строки, даты и т.д.).
- В случае с нашим примером, колонок у нас 5, все типы данных одинаковы в рамках одного столбца.

И, далеко не уходя от темы, стоит сказать, что ни таблицы, ни столбцы(атрибуты), ни базы данных никогда не называют на русском языке.

Колонки должны называться так, за что они отвечают.

Не советую называть столбцы более чем 3 словами. Обратите внимание, что разделение делается благодаря знаку _(нижнее подчеркивание). И, пожалуйста, никакого капслока :) А мы двигаемся дальше, теперь зная, что такое столбцы (колонки).

Капсом пишут конструкции SQL, чтобы выделить их. А так если и поля капсом будут и SQL, то запросы читать будет очень тяжело.


Строки (кортежи):
- Строки представляют собой записи в таблице, каждая из которых содержит значения для всех столбцов. В каждой строке хранится информация о конкретном объекте или событии.
- В таблице "Сотрудники" каждая строка может представлять отдельного сотрудника, с его уникальным ID, именем, фамилией и должностью.
- Строк в нашей таблице 3. В данном случае они все уникальны. Вообще в любой базе данных все строки уникальны, если есть уникальный ID, который явно отличает одну строку от другой.

Ячейки:
- Ячейки — это пересечения строк и столбцов, которые содержат отдельные значения данных. Каждая ячейка хранит одно значение данных для соответствующего атрибута и записи.
- В таблице "Сотрудники" ячейка, расположенная на пересечении строки с именем "Иван" и столбца "Должность", может содержать значение "Менеджер".
- Как Вы думаете сколько у нас здесь ячеек? Количество полей в строке * кол-во строк = кол-во ячеек.

Типы данных:
- Тип данных определяет, какой тип информации может храниться в столбце. Примеры типов данных могут включать INT (целые числа), VARCHAR (строки), DATE (даты) и BOOLEAN (логические значения) и так далее. Все зависит от образа конкретной БД.
- В столбце "Date_of_birth" тип данных может быть DATE, чтобы хранить даты рождения сотрудников. Подробно типы данных мы пройдем далее по курсу.
- Но что если поставить VARCHAR и записать дату как строку, спросите Вы. Вы потеряете возможность применять функции, которые применимы только к типу данных DATE. Например, из одной даты вычесть другую дату. В случае строки получится непонятно что, в случае целочисленного значения получится неправильное значение. Пример: 2024-03-01 - 2024-02-01 = 100 (в случае int). Но ведь в феврале всегда разное количество дней. Вот поэтому и нужно применять всегда правильный тип данных.

Домен в контексте таблиц базы данных — это множество допустимых значений, которые могут быть присвоены определенному столбцу (полю) таблицы. Домен определяет тип данных и возможные ограничения для значений в этом столбце.

Основные аспекты домена:
- Тип данных.
- Ограничения — это дополнительные правила, которые могут быть наложены на домен, чтобы сузить допустимые значения. Например, можно установить, что значение должно быть положительным (CHECK (value > 0)), уникальным или не может быть пустым (NOT NULL). Для столбца "ДатаРождения" можно установить ограничение, что дата должна быть "меньше" текущей даты.
- Домен также отвечает за проверку соответствия вводимых данных типу и ограничениям столбца. Если данные не соответствуют домену, они не будут приняты в базу данных. Если в столбец "Возраст" попытаться записать строковое значение, то система управления базами данных (СУБД) отклонит эту операцию, так как значение не соответствует типу данных домена.

Рассмотрим таблицу "Сотрудники", где для каждого столбца определены свои домены - 
--
1   Столбец        Тип данных   Пример домена 

2   ID             INT          Любое целое число, положительное, уникальное, NOT NULL 

3   Имя            VARCHAR      Строка длинной до 50 символов, NOT NULL

4   ДатаРождения   DATE         Любая дата, не позже текущей даты, NOT NULL

5   Должность      VARCHAR      Строка длинной до 100 символов, NOT NULL

6   Зарплата       DECIMAL      Число с двумя знаками после запятой, больше нуля 
----

Обратите внимание на то, что домен не описывается так, как это показано выше. Для этого используются средства СУБД. Картинка отражает смысл домена, а не его создание.

Мы не рассматривали здесь индексы, так как речь о них пойдет в разделе с ключами.

*****************************************************

3.5 - 1 -
Свойства ACID и транзакции


Пройдя главу, в которой мы активно обсуждали, что такое OLTP, Вы, вероятно, задались вопросом - а что же такое транзакции? Какой у них смысл? Скорее всего Вы не задумались над тем, а любая ли база данных их поддерживает? Давайте разберемся в этом вопросе.

Транзакции в контексте баз данных — это набор операций, выполняемых как единое целое. Транзакция гарантирует, что все операции в её составе будут выполнены полностью и корректно или не будут выполнены вовсе. Транзакции обеспечивают целостность данных и помогают избежать ситуаций, когда данные остаются в непоследовательном состоянии из-за сбоев или ошибок.

Представим себе ситуацию, когда Вы переводите деньги с одного банковского счета на другой. Эта операция может быть представлена как транзакция, состоящая из следующих шагов:
- Уменьшение суммы на одном счете.
- Увеличение суммы на другом счете.

Если один из этих шагов не удастся (например, из-за технической ошибки), вся транзакция должна быть отменена, чтобы не произошло некорректное изменение баланса на счетах. 

Если транзакция по какой-то причине не завершилась успешно, то все изменения, сделанные в ходе этой транзакции, должны быть отменены, и база данных должна вернуться в состояние, в котором она была до начала этой транзакции. Это свойство атомарности. Если транзакция завершается успешно, то все изменения, сделанные в рамках этой транзакции, фиксируются в базе данных.

Про то, как управлять, создавать транзакции мы поговорим подробнее при изучении языка запросов SQL.

Что делать, если база данных не поддерживает транзакции?

Многие из Вас скорее всего подумают, что если у БД нет транзакций, то мы ее и выбирать не будем, но это не так. Транзакции не являются чем-то важным и супер необходимым. Если транзакции "из коробки" не доступны, можно либо -
- отслеживать состояние базы данных вручную
- использовать сторонние инструменты для управления транзакциями (например Kafka, которую мы также проходим на курсе)

Какие БД поддерживают транзакции? (На момент написания статьи) -
- MySQL: Поддержка транзакций доступна в таблицах, использующих механизм хранения InnoDB.
- PostgreSQL: Полная поддержка транзакций, включая сложные транзакции и вложенные транзакции.
- MongoDB: Поддержка транзакций на уровне нескольких документов начиная с версии 4.0. 

И многие другие. Просто в курсе мы их либо не рассматриваем, либо даже не упоминаем о них.

Теперь мы знаем, что транзакция - это вставка данных в таблицу, которая всегда должна закончиться либо успехом, либо неудачей, но без изменения данных в БД.

https://ru.hyper.host/blog/convert-myisam-to-innodb-mysql-storage-engine/ 
– про InnoDB и другие механизмы.

*****************************************************

3.5 - 2 -
Свойства ACID и транзакции


Понятие ACID (Atomicity, Consistency, Isolation, Durability) было введено в 1983 году Джимом Греем (Jim Gray), американским учёным и одним из пионеров в области баз данных. 

ACID — это акроним, описывающий четыре ключевых свойства транзакций в системах управления базами данных (СУБД). Эти свойства обеспечивают надёжность транзакций и целостность данных в базе данных, даже в случае сбоев, ошибок или других непредвиденных ситуаций. Вот они - 
- Атомарность (Atomicity), 
- Согласованность (Consistency), 
- Изолированность (Isolation), 
- Долговечность (Durability). 

А теперь подробнее про каждый.


1. Атомарность (Atomicity)
Атомарность гарантирует, что все операции в транзакции будут выполнены полностью или не будут выполнены вовсе. Если какая-либо часть транзакции не удается, все изменения отменяются, и база данных возвращается в исходное состояние.

Представьте, что Вы отправляете деньги с одного банковского счёта на другой. Транзакция включает два шага:
- Списать деньги с одного счёта.
- Зачислить деньги на другой счёт.

Если первый шаг выполнен успешно, но второй шаг не удался из-за сбоя, деньги не должны исчезнуть. Атомарность гарантирует, что либо оба шага будут выполнены (деньги будут переведены), либо ни один из них (деньги останутся на исходном счёте).

Зачем это нужно? Атомарность защищает от частично выполненных транзакций, которые могут привести к некорректному состоянию данных.


2. Согласованность (Consistency)
Согласованность гарантирует, что после завершения транзакции база данных остаётся в согласованном состоянии. Это значит, что все правила, ограничения и целостность данных будут соблюдены.

Допустим, у Вас есть правило в базе данных, что сумма всех денег на счетах не может изменяться. Если вы переводите деньги с одного счёта на другой, общая сумма должна остаться неизменной.

Согласованность гарантирует, что транзакция не нарушит это правило: сумма на одном счёте уменьшится, а на другом увеличится ровно на ту же сумму.

Зачем это нужно? Согласованность обеспечивает, что транзакции не приведут к нарушению целостности и правил базы данных, что важно для корректного функционирования системы.


3. Изолированность (Isolation)
Изолированность гарантирует, что параллельно выполняемые транзакции не будут влиять друг на друга. Каждая транзакция выполняется так, как будто она единственная в системе.

Представьте, что два человека одновременно пытаются купить последний билет на концерт. Без изолированности могло бы произойти, что оба видят доступный билет, оба пытаются его купить, и система продаст один билет дважды.

Изолированность гарантирует, что одна из транзакций будет завершена первой (человек успешно купит билет), а вторая транзакция либо увидит, что билетов больше нет, либо будет обработана позже.

Зачем это нужно? Изолированность предотвращает конфликты и ошибки, которые могут возникнуть при параллельной работе с одними и теми же данными.


4. Долговечность (Durability)
Долговечность гарантирует, что после успешного завершения транзакции её результаты сохранятся в базе данных и не будут потеряны, даже в случае сбоя системы.

После успешной оплаты (транзакция завершена) ваша покупка зафиксирована, и подтверждение получено.

То есть, после завершения оплаты, система зафиксирует вашу покупку, и вы получите подтверждение об успешной транзакции.

Зачем это нужно? Долговечность обеспечивает сохранение результатов транзакции, что особенно важно для критически важных операций, таких как банковские переводы или покупки.


А теперь, подводя итоги, задайте себе вопрос - а так ли важны эти свойства для транзакций? Неужели никаким из них нельзя пренебречь? Ответ будет очень простой - представьте себя покупателем. И тут куча ситуаций, которые могут возникнуть, а самое главное, что у каждой из этих случаев будут последствия.

- Вы видите, что ноутбук есть в наличии, и решаете его купить. Однако, поскольку не используется транзакция, другая покупка может одновременно снизить запасы на складе до нуля.

- Деньги с вашего счёта успешно списываются, но между этим и обновлением запасов на складе происходит сбой.

- Произошел сбой на сервере, и информация о том, что ноутбук был продан, не была обновлена на складе. В результате запас ноутбуков на складе остаётся прежним, хотя фактически ноутбук уже не доступен.

Последствия -  

- Вы потеряли деньги, но заказ не был оформлен. В системе нет следов вашей покупки, и вы не получите ноутбук, хотя заплатили за него.

- На сайте может отображаться, что ноутбук всё ещё доступен для покупки, хотя его уже нет на складе. Это может привести к множеству разочарованных клиентов, которые будут пытаться купить недоступный товар.

- Без следов транзакции в системе может быть сложно доказать, что вы совершили покупку, и вернуть свои деньги.

*****************************************************

3.6 - 1 -
Реляционная алгебра, круги Эйлера, диаграммы Венна


алгебра — это раздел математики, который занимается изучением структур, отношений и количеств. Она включает в себя операции над числами, переменными и математическими объектами и изучает правила, по которым эти операции выполняются. 

Реляционная алгебра — это формальный математический язык для работы с реляционными базами данных. Она состоит из набора операций, которые принимают одну или несколько таблиц (отношений) в качестве входных данных и создают новую таблицу в качестве результата. Реляционная алгебра является теоретической основой для работы с реляционными данными и служит фундаментом для языка SQL.



Пример 1: Выбор (Selection, σ)
Задача: Найти всех сотрудников старше 30 лет.
Реляционная алгебра: σ_{Age > 30}(Employees). Операция выборки строк из таблицы, которые удовлетворяют определённому условию.



Пример 2: Проекция (Projection, π)
Задача: Получить список имён сотрудников и их возрастов.
Реляционная алгебра: π_{Name, Age}(Employees)Операция выбора определённых столбцов из таблицы, создает новую таблицу только с этими столбцами.



Пример 3: Объединение (Union, ∪)
Задача: Получить список всех департаментов, включая тех сотрудников, которые временно работают в отделах (например, стажёры), но не записаны в таблице Departments.

Допустим, у нас есть вторая таблица TempDepartments:
DeptID	DeptName
4	    Temporary Work

Реляционная алгебра: Departments ∪ TempDepartmentsОперация объединения всех строк из двух таблиц, исключая дубликаты.



Пример 4: Пересечение (Intersection, ∩)
Задача: Найти департаменты, в которых работали как штатные, так и временные сотрудники.

Предположим, что у нас есть две таблицы: Employees и TempEmployees (Временные Сотрудники), и нам нужно найти департаменты, которые присутствуют в обеих таблицах.

Реляционная алгебра: π_{DeptID}(Employees) ∩ π_{DeptID}(TempEmployees)Операция пересечения двух таблиц, возвращающая строки, которые присутствуют в обеих таблицах.

Результат: (Зависит от содержимого таблицы TempEmployees, давайте предположим, что совпадения по DepID 2)

DeptID
2



Пример 5: Разность (Difference, −)
Задача: Найти департаменты, в которых работают только штатные сотрудники, но нет временных.
Реляционная алгебра: π_{DeptID}(Employees) − π_{DeptID}(TempEmployees)
Результат:
DeptID
1
3



Пример 6: Декартово произведение (Cartesian Product, ×)
Задача: Создать все возможные комбинации сотрудников и департаментов.
Реляционная алгебра: Employees × DepartmentsОперация, создающая все возможные комбинации строк из двух таблиц.
Результат: (частичный, для примера)



Пример 7: Соединение (Join, ⨝)
Задача: Получить список сотрудников вместе с их департаментами.
Реляционная алгебра: Employees ⨝_{Employees.DeptID = Departments.DeptID} DepartmentsОперация, объединяющая строки из двух таблиц на основе определённого условия.



И в целом все. Вы наверняка спросите - а нужно ли это знать? Для общего развития - очень даже. Потому что именно реляционная алгебра заложила основы языка запросов SQL. Сейчас важно лишь понять отношения, которые могут быть между таблицами. А вот отношения внутри таблиц мы рассмотрим далее. 



*****************************************************

3.6 - 2 -
Реляционная алгебра, круги Эйлера, диаграммы Венна


Множество — это фундаментальное понятие в математике, которое обозначает коллекцию или совокупность объектов, называемых элементами этого множества. Эти объекты могут быть абсолютно любыми: числами, буквами, людьми, животными, другими множествами и так далее. Основное свойство множества заключается в том, что любой элемент либо принадлежит множеству, либо не принадлежит.

Подмножество. Подмножество — это множество, все элементы которого также являются элементами другого множества. Другими словами, если у вас есть два множества A и B, и каждый элемент множества A также принадлежит множеству B, то A называется подмножеством B. 

Ну да ладно, мы здесь не будем глубоко уходить в теорию множеств (к вопросу, а нужна ли математика программисту), а перейдем к описанию того, что может являться множеством.

Вообще речь про множества я завел не случайно. Потому что если таблица это какой-то объект, то данные внутри - как раз таки часть одного или нескольких множеств, с точки зрения типов. А если рассматривать таблицу, как отдельное множество - то становится интересно. 

И у каждого множества есть определенные отношения с другим множеством. Как раз таки реляционная алгебра из прошлого слайда их расширила, но базисно в математике существуют всего 4 вида операций (хотя в некоторых задачах выделяют и больше).

Объединение множеств:
Объединение множеств A и B (обозначается A∪B) включает все элементы, которые принадлежат хотя бы одному из множеств A или B.
Пример: Если A={1,2,3} и B={3,4,5}, то A∪B={1, 2, 3, 4, 5}.

Пересечение множеств:
Пересечение множеств A и B (обозначается A∩B) включает только те элементы, которые принадлежат одновременно обоим множествам A и B.
Пример: Если A={1,2,3} и B={3,4,5}, то A∩B={3}.

Разность множеств:
Разность множеств A и B (обозначается A−B или A∖B) включает элементы, которые принадлежат множеству A, но не принадлежат множеству B.
Пример: Если A={1,2,3} и B={3,4,5}, то A−B={1,2}.

Дополнение множества:
Дополнение множества A (обозначается AcA) включает все элементы, которые не принадлежат множеству A, но принадлежат универсальному множеству (множеству всех возможных элементов в данной задаче).
Пример: Если универсальное множество U={1,2,3,4,5}, а A={1,2}, то Ac={3,4,5}.



*****************************************************

3.6 - 3 -
Реляционная алгебра, круги Эйлера, диаграммы Венна


///









***


194.87.248.6
root 
8oWzMgwJSn
