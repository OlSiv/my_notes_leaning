
в телеграм -
- избранное - 29.07.2025
- my_coding - 29.07.2025



******************************************


автоформатирование кода PEP8 - 
CTRL + ALT + L 


запуск кодла в файле main.py через терминал -
--
python main.py 
----


--
print(2 + 3)
----


в python всё является объектами 


атрибуты объекта - это свойства (переменные)
методы объекта - это действия (функции)


int 
float
str
bool
list 
dict 
tuple
set 


--
a = 25
print(type(a))
----
<class 'int'>
------


+
-
*
/
**
//
%


приоритет операций - 
()
**
*, /, //, % 
+, -


возвратить абсолютное значение числа (если -, то без минуса) - 
--
abs()
----

округление - 
--
round(234.56)
round(234.56789, 2)
----


если указать отрицательное значение, вернет так -
--
round(2222.333333, -2)
round(2222.333333, -3)
----
2200.0
2000.0
------


--
int(23.456)

float('123.456')

max(1, 2, 3)

min(1, 2, 3)

sum([1, 2, 3, 4, 5])

# возведение числа в степень - 
pow(10, 2)
----


функции можно помещать в тело других функций - 
--
max(1, 2, 4, 7, abs(-88))
----


модуль math 


# пример однострочного комментария 


'''
пример 
многострочного 
комментария
'''


ЗАДАНИЯ - 
--
print(abs(-5.27))

print(round(3.14159, 2))

print(int("684"))

print(max(3, 7, 2, 9, 5))
print(min(3, 7, 2, 9, 5))

print(sum([5, 4, 32, 18, 841]))

print(pow(2, 5))
print(2 ** 5)
----


переменные - 
--
name = "Alex"
age = 30 
price = 9.99 
----


Список ключевых слов: 
True, 
False, 
None, 
and, 
as, 
assert, 
break, 
class, 
continue, 
def, 
del, 
if, 
elif, 
else, 
except, 
finally, 
for, 
while, 
from, 
global, 
in, 
import, 
is, 
lambda, 
nonlocal, 
not, 
оr, 
pass, 
raise, 
rеturn, 
trу, 
with, 
yield


x, y, z = 5, "Alex", True 


ЗАДАНИЯ - 
--
name = "Alex"

a = 5
b = 10
c = 100 
print(sum(a, b, c))
print(max(a + b + c))
print(min(a + b + c))

a = b
b = 5 
print(a)
print(b)
----


ввод данных (функция input()) -
--
name = input("Enter your name:   ")
print("Hello, " + name + "!")
----
Hello, Alex!
------
- принимает данные в str, если нужно ввести число, нужно конвертировать (int, float) -
--
age = int(input("Enter your age:   "))
print(type(age))
----


функция print() -
--
print(2, 5, 7, sep=', ')
----

sep=','
end = '///'


--
day = 1
date = 2
month = 3

print("Сегодня %s %s %s" %(day, date, month))

print(f"Сегодня {day} - {date} - {month}")

print("Сегодня {} - {} - {}".format(day, date, month))
----
Сегодня 1 2 3
Сегодня 1 - 2 - 3
Сегодня 1 - 2 - 3
------


ЗАДАНИЯ - 
1
--
name = input("Enter your name:   ")
age = int(input("Enter your age:   "))
city = input("Enter your city:   ")

print(f"Hello {name} {age} from {city}")
----
2
--
vis = int(input("Enter visota:   "))
shir = int(input("Enter shirina:   "))
print((vis + shir) * 2)
----
3
--
count_apple = int(input("Enter count apples: "))
count_box = int(input("Enter count box: "))
res_in_box = count_apple // count_box
ost = count_apple % count_box
print(res_in_box)
print(ost)
----
4
--
zn = int(input("Enter numbers:   "))
print(zn % 10)
----
5
--
zn = int(input("Enter numbers:   "))
a = zn // 10
b = a % 10
print(b)
----
6 
--
zn = int(input("Enter numbers:   "))
a = zn // 100
b = (zn // 10) % 10
c = zn % 10
print(a + b + c)
----


полный импорт, когда нужно использовать несколько функций из модуля -
--
import math

result = math.sqrt(16)
print(result)
----


частичный импорт, в коде указываем только название модуля - 
--
from math import sqrt, pi

result = sqrt(16)
radius = 5
area = pi * radius**2
print(area)
----


ещё функции модуля math. - 


math.ceil(number) - округляет число вверх до ближайшего целого числа 


math.floor(number) - округляет число вниз до ближайшего целого числа 


round(number) - округляет число до ближайшего целого числа по математическим правилам кругления - 0...4 и 5...9


math.exp(number) - вычисляет экспоненту числа, то есть возводит число Эйлера (e ~ 2.71828) в заданную степень. Часто используется для моделирования процессов, которые характеризуются экпотенциальным ростом или убыванием, например роста популяции или радиактивного распада 


math.log(number) - вычисляет натуральный логарифм (логарифм по основанию e) числа, другими словами, отвечает на вопрос - в какую степень нужно возвести число Эйлера, чтобы получилось заданное число, эта функция применяется для решения уравнений, содержащих логарифмы 


тригонометрические функции -


math.sin(zn) - вычисляет синус угла, но угол должен быть задан в радианах, а не в градусах


math.cos(zn) - вычисляет косинус угла, но угол должен быть задан в радианах, а не в градусах


math.tan(zn) - вычисляет тангенс угла, но угол должен быть задан в радианах, а не в градусах, используется при расчете наклона прямых, вычислении высот и расстояний


math.asin(zn) - вычисляет арксинус (обратный синус) числа, используется при решении задач, связанными с гармоническими колебаниями в физике 


math.acos(zn) - вычисляет арккосинус (обратный косинус) числа


math.atan(zn) - вычисляет арктангенс (обратный тангенс) числа


math.radians(zn) - преобразует в радианы значение угла в градусах 


преобразование радианов в градусы - 
--
res = radians * 180 / math.pi 
----


math.factorial(zn) - принимает на вход целое неотрицательное число и возвращает его факториал, факториалы используют в комбинаторике для вычисления числа перестановок, сочетаний и размещений, а также в формулах для вычисления вероятности различных событий 


ЗАДАНИЯ - 
1
--
import math

count = int(input("Enter zn:  "))
print(math.ceil(count / 5))
----
2 -
--
import math

count = int(input("Enter zn:  "))
print(math.ceil(count / 5))
----
3 -
--
import math

mag1 = int(input("Enter zn mag1:  "))
mag2 = int(input("Enter zn mag2:  "))
mag3 = int(input("Enter zn mag3:  "))

print(f"Mag 1 {math.ceil(mag1 / 5)}")
print(f"Mag 2 {math.ceil(mag2 / 5)}")
print(f"Mag 3 {math.ceil(mag3 / 5)}")
----


тип bool (boolean) - True или False 


>
<
>=
<=
==
!=


and
or
not


приоритет выполнения - 
not
and
or


преобразование значений в логические значения - 
--
print(bool([]))
print(bool(""))
print(bool({}))

print(bool([1, 2, 3]))
print(bool("hello"))
print(bool(" "))

print(bool(0))
print(bool(42))

print(bool(None))
----
False
False
False
True
True
True
False
True
False
------


определение кратности - 
--
print(x % 2 == 0)
----


ЗАДАНИЯ - 
1
--
num = int(input("Enter number:   "))

if num % 5 == 0:
    print("Кратно 5")
else:
    print("Не кратно 5")
----
2 
--
num = int(input("Enter number:   "))

num1 = str(num)

if num1[0] == "-":
    num1 = num1[1:]


if len(str(num1)) > 1:
    print("Двузначное")
else:
    print("Не двузначное")
----


страница 85 - как настроить отступы в PyCharm


if - elif - elif - ... - else 


вложенные условия - это конструкция, когда внутри одного условного оператора находится другой условный оператор, это позволяет создавать более сложные логические выражения и принимать решение на основании нескольких условий 


тернарный оператор - это компактный способ записи условного выражения в одну строку -
--
zn = True
vl = "Yes" if zn else "No"
print(vl)
----


ЗАДАНИЯ - 
1
--
counter = 1

while counter:
    zn = int(input("Skolko jivotnih tianulo repku?:   "))
    ans = 7

    if zn == ans:
        print("Pravilno")
        counter = 0
    else:
        print("Nepravilno, poprobuy echo raz")
----
2
--
zn = int(input("Enter number:   "))
res = "Chet" if zn%2==0 else "Nechet"
print(res)
----
3
--
zn = int(input("Enter number:   "))

if zn > 91:
    print("otsenka - 5")
elif zn > 80:
    print("otsenka - 4")
elif zn > 70:
    print("otsenka - 3")
elif zn > 60:
    print("otsenka - 2")
else:
    print("otsenka - 1")
----
4 
--
log = "abc"
passv = 123

log1 = input("Enter login: ")

if log1 != log:
    print("Error!")
else: 
    pass1 = int(input("Enter pass: "))

    if pass1 == passv:
        print("Welkom")
    else:
        print("Error")
----


строка - str -
--
s = "Alex"
print(type(s))
----
<class 'str'>
------


--
name = "Alex"
print(len(name))
----
4
------


in -
--
name = "Alex"
print("A" in name)
----
True
------


эскейп-последовательности (экранированные последовательности) - экранирование символов с помощью обратного слеша - \ -
--
print("Alex name \"Alex Green\" is work")
----
Alex name "Alex Green" is work
------


\t - горизонтальная табуляция, обычно это 4 пробела 


\\ - выведет \


если \ вынести за ковычки, он будет символом продолжения строки - 
--
text_2 = "Hello " \
         "world"

print(text_2)
----
Hello world
------


\r - возврат каретки, перемещает курсор в начало текущей строки, не переходя на следующую -
--
import time 

for i in range(101):
    print(f"\rПрогресс: [{'=' * i}{' ' * (100-i)}] {i}%", end='')
    time.sleep(0.3)
----
Прогресс: [====================================================================================================] 100%
------

\b - бэкспейс 
--
import time 

text = "Загрузка..."
for i in range(len(text)):
    print(text[:i+1], end='', flush=True)
    time.sleep(0.2)
    print("\b" * (i+1), end='', flush=True)
----


\f - "формальная подача" (form feed), используется для перехода на новую страницу в текстовых документах 


иногда нужно, чтобы все символы в строке воспринимались буквально, для этого перед строкой ставится r - 
--
path = r"C:\Users\Username\Documents"
----


ЗАДАНИЯ - 
1
--
text = input("Enter text:   ")
print(f"Количество символов в данном тексте - {len(text)}")
----
2
--
text = input("Enter 3 =< text <= 10:   ")

if len(text) >= 3 and len(text) <= 10:
    print("Ok")
else:
    print("Error") 
----


индекс - порядковый номер элемента в упорядоченной коллекции данных (список, строка, кортеж) 

отсчет индекса начинается с нуля, а не с единицы 

--
text = "abcde"

print(text[0])
print(text[2])
print(text[-1])
print(text[-2])
----
a
c
e
d
------


срезы - первый символ всегда входит, последний символ - не входит в срез -
--
text = "abcdefghijklmnopqrstuvwxyz"

print(text[4:12])
print(text[:12])
print(text[4:])
print(text[:])  # создаст копию 
print(text[::2])  # шаг 2
----
efghijkl
abcdefghijkl
efghijklmnopqrstuvwxyz
abcdefghijklmnopqrstuvwxyz
acegikmoqsuwy
------


методы строк - 

метод - это функция, связанная с определенным типом объекта, они являются специфичными для каждого отдельного типа 

далее здесь будут примеры методов строк - 

--
text = "hello world"

print(text.upper())
----
HELLO WORLD
------


--
text = "ABCD"

print(text.lower())
----
abcd
------


--
text = "hello world"

print(text.title())
----
Hello World
------


--
text = "hello world"

print(text.capitalize())
----
Hello world
------


x.find('h')  # ищет и возвращает индекс первого найденного в строке элемента, если элемента нет, вернет -1 


x.rfind('h')  # ищет справа налево 


x.index('a')  # то же что и x.find(), но если элемента нет, будет ошибка 


x.isalpha()  # проверяет, состоит ли строка только из букв 


x.isdigit()  # проверяет, состоит ли строка только из цифр 

 
x.isalnum()  # проверяет, состоит ли строка только из букв и цифр 


116



























