
курс, код, домашние задания также доступны на сайте - 
https://itproger.com/course/cybersecurity

https://www.youtube.com/playlist?list=PLDyJYA6aTY1nKLos0NNYPrJX-YldQy_Eo
- плейлист Кибербезопасность с нуля



************************************

1 - http://youtu.be/UAjYxp6Kxu8
Введение в CyberSecurity для начинающих



⏰  Тайм коды: 
00:00 - Начало
00:28 - Актуальность сферы в современном мире
01:17 - Типичные ошибки программистов
02:06 - OWASP Top 10 — популярные уязвимости
03:38 - Этический хакинг
04:15 - Роли: хакер, пентестер, Bug Bounty-хантер
04:54 - Этапы атаки
05:31 - Legal: как тестировать без нарушения закона
05:59 - План курса
06:10 - Заключительная часть



разработчики чаще всего ошибаются не от лени, а от непонимания угроз, например при создании формы регистрации многие напрямую вставляют данные в базу (может быть атака SQL-иньекцией), отсутствие валидации и фильтрации пользовательского ввода (программист предполагает что пользователь введет имя, а пользователь вводит код JavaScript - это XSS-атака)

часто разработчики забывают про ограничение прав доступа, хранят пароли в открытом виде прямо в коде, не обновляют библиотеки и фреймворки, уязвимости в которых уже известны 

на простых ошибках строится 90% успешных атак 



OWASP Top 10 - обновляемый список с 10-ю самыми популярными уязвимостями, обновляется раз в несколько лет, в него входит -

1 - Broken Access Control - это когда пользователь может делать то, что ему не разрешено, например просматривать чужие аккаунты

2 - Cryptographic Failures - неправильное либо отсутствующее шифрование данных, особенно при передаче по сети 

3 - Injection - иньекции, внедрение чужого кода в БД, команды терминала или интерпретатора

4 - Insecure Design - архитектуры без заложенных механизмов защиты 

5 - Security Misconfiguration - неправильно настроенные серверы, заголовки безопасности, доступы 

6 - Outdated Components - устаревшие библиотеки, в которых давно известны уязвимости 

7 - Identification Failures - проблемы с логином, сессиями, токеном и обход авторизации 

8 - Software Integrity Failures - возможность подмены файлов или зависимостей при обновлении системы 

9 - Security Logging - отсутствие логирования и обнаружения атак, из-за чего взломы не замечают неделями 

10 - SSRF (Server-Side Request Forgery) - когда сервер сам отправляет запросы от своего имени на внутренние сервисы, которые должны быть недоступны извне 



Этический хакинг - программист, когда пишет код, думает о том, как он должен работать, хакер же думает о том, как это можно обойти, обмануть или взломать, и это мышление называется attacker mindset, и именно его нужно развивать, чтобы писать защищенные системы 

этичный хакер - это специалист, который использует те же методы, что и обычный злоумышленник, но работает с разрешения владельца системы (внутри компании или через публичную программу поиска уязвимостей)



роли в кибербезопасности (все эти роли используют схожие подходы, инструменты и методики, разница только в целях и юридических рамках) - 

- хакер - это общий термин, может быть белым (этичным), серым (на грани) или черным 

- пентестер - специалист по тестированию на проникновение, легально имитируют атаку на систему и ищут слабые места 

- Bug Bounty-хантер - ищет уязвимости в чужих сервисах по программе наград 



Классическая модель атаки (этапы атаки) -

1 - разведка - идет сбор информации

2 - сканирование - идет анализ уязвимостей, открытых портов, конфигураций и попытки найти дыры

3 - эксплуатация - использование найденных уязвимостей, запуск вредоносного кода и получение доступа 

4 - доступ - переход к другим уровням прав, перемещение по сети и т.п. 

хороший специалист по безопасности умеет как атаковать, так и защищать на каждом из этих этапов 



любые действия по взлому без разрешения - нелегальны 

для легального обучения использовать - 

- локальные стенды - Juice Shop 

- онлайн-симуляторы - TryHackMe 

- программы Bug Bounty с официальным разрешением на тестирование 



План курса - 

- основные типы уязвимостей 

- защита системы (на примерах с кодом и пояснением)



************************************

2 - https://youtu.be/zjPAazlvWPI
Что такое SQL Injection и как их находить?

SQL Injection — одна из самых опасных уязвимостей, позволяющая злоумышленникам получать доступ к базе данных, красть, изменять или удалять данные. В уроке мы узнаем, как она работает и как защититься.

⏰  Тайм коды: 
00:00 - Начало
00:18 - Что такое SQL Injection?
01:06 - Реальный пример
02:15 - Чем опасны SQLi?
02:50 - Пишем небезопасный код
03:34 - Добавление безопасности
04:21 - Как найти SQLi через sqlmap?
04:56 - ORM – дополнительное решение
05:29 - Заключительная часть



хакер вставляет в поле сайта не просто имя или логин, а SQL-запрос -
--
main.py 
----
login = input("Enter your name: ")
query = f"SELECT * FROM users WHERE username = '{login}'"
coursor.execute(query)
----

представим что хакер ввел - 
' OR 1=1 --
- это будет означать, что нужно выбрать всех пользователей, так как 1=1 всегда истинно, а -- в конце - это коментарий, который отключает остаток запроса, таким образом можно получить всю таблицу пользователей 

если стоит условие, что если пользователь найден, то пускаем в аккаунт, то в таком случае хакер попадает внутрь 

SQL-инъекции в некоторых случаях позволяли обойти авторизацию и попасть в админ-панель 

SQL-инъекциями в некоторых случаях можно удалить всю БД или вызвать команды операционной системы 

пример уязвимого кода - Python + SQLite - 
--
import sqlite3

conn = sqlite3.connect('users.db')
cursor = conn.cursor()

login = input("Enter your name: ")

query = f"SELECT * FROM users WHERE username = '{login}'"

coursor.execute(query)

result = cursor.fetchone()
if result:
    print("Success")
else:
    print("Not found")
----

в зависимости от языка программирования исправление идет разными способами 

03-30

























 








