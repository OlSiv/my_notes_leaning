ЭТИ КУРСЫ ТУТ - 

python - 
https://stepik.org/course/209150/promo

parsing - 
https://stepik.org/course/209546/promo

взял 07.12.2024 - 450 руб. + 285 руб. 

это Баданов - у него ранее покупал курс по DE



************************************
************************************
************************************

КУРС - Python Engineer с нуля до junior

************************************
************************************
************************************

Для возможности задавать вопросы преподавателям, а также состоять в группе единомышленников и одногруппников, можно вступить в чат по ссылке -
https://t.me/+lIvySxhZXGZhM2My

По ссылке можно и нужно отслеживать изменения курса -
https://t.me/stepik_hello_py

************************************

2.1 - Что такое программирование?

нужно только желаниие обучаться 

чат-боты, ИИ - изучение python не углубленно, а широко, и потом выбрать ту область которую захочешь 

нужен только один монитор 

в программировании сложно, но не очень - 
python + библиотеки к нему 

************************************

2.2 - Актуальность Python

+

************************************

2.3 - Что можно сделать на Python

+

************************************

2.4 - Что такое PEP 8 и почему это важно

PEP 8 (Python Enhancement Proposal 8) — это официальный стиль кодирования для языка программирования Python. Этот документ был предложен Гвидо ван Россумом, создателем Python, и Тимом Петерсом, одним из ключевых разработчиков языка, и описывает правила форматирования кода, которые помогают сделать код Python более читаемым и единообразным.

Основные положения PEP 8:

- Отступы: Использование четырёх пробелов для отступов. Это помогает поддерживать единообразие кода и делает его легко читаемым. Важно избегать смешивания пробелов и табуляций.

- Максимальная длина строки: Рекомендуется, чтобы строки кода не превышали 79 символов. Это облегчает чтение кода на экранах с небольшой шириной и помогает в многооконной работе.

- Пробелы в выражениях и операторах: PEP 8 описывает, где следует и не следует использовать пробелы в коде. Например, пробелы не используются внутри скобок, но должны быть вокруг операндов в выражениях.

- Именование переменных и функций: PEP 8 рекомендует использовать нижний регистр с подчеркиваниями (snake_case) для переменных и функций, а для классов — стиль CamelCase.

- Импорт модулей: Все импорты должны быть в начале файла, отдельно от остального кода. Импорты должны быть структурированы в определённом порядке: стандартные библиотеки, сторонние библиотеки, и затем модули самого проекта.

- Документирование: PEP 8 рекомендует использовать строки документации (docstrings) для описания назначения функций, классов и методов.



Почему PEP 8 важен:

1. Читаемость кода: Одной из главных целей PEP 8 является улучшение читаемости кода. Когда код написан в соответствии с единым стилем, его легче читать и понимать. Это особенно важно в командной разработке, где код пишет и поддерживает множество людей.

2. Поддержка и сопровождение кода: Когда код следует единым правилам форматирования, его проще поддерживать. Новым разработчикам легче подключиться к проекту и начать работу с существующим кодом, если он структурирован по понятным и общепринятым правилам.

3. Снижение ошибок: Следование PEP 8 может помочь снизить вероятность появления ошибок. Например, использование четырёх пробелов для отступов вместо табуляций помогает избежать проблем, связанных с различной интерпретацией отступов в разных текстовых редакторах.

4. Инструменты автоматической проверки: Существуют инструменты, такие как flake8, pylint и black, которые автоматически проверяют и форматируют код в соответствии с PEP 8. Использование этих инструментов помогает поддерживать качество кода на высоком уровне и следить за его соответствием общепринятым стандартам.

5. Профессионализм: Код, написанный в соответствии с PEP 8, демонстрирует профессиональный подход к программированию. Это показывает, что разработчик заботится о качестве своего кода и уважает работу других, следуя общим стандартам.


В Pycharm есть удобное сочетание клавиш Ctrl + alt + L для быстрого исправления

************************************

2.5 - Установка всего необходимого

Для начала перейдем по ссылке - https://www.jetbrains.com/pycharm/download/?section=mac
Далее на странице найдем версию Community Edition, она бесплатна.

У Вас проектов может не быть, если Вы раньше не работали с этой программой. Поэтому нажимаем на кнопку "New Project".

Далее конфигурируем проект. Введем название, выберем путь, где его сохранить. В Python Version можно указать любую версию Python и она скачается. Скачивайте больше 3.10.

Все, что слева находится  является корнем проекта. Папки внутри директории .venv и External Libraries являются служебными. Создадим первый скрипт, чтобы проверить, что все установилось корректно.

Для этого нажмем на название проекта, щелкнем правой кнопкой мыши, New, Python File.

Введем название нашего скрипта. У меня это будет main. Обязательно на английском.

Preferences - это настройки. 

************************************

3.1 - Переменные

все файлы python называются скриптами 

переменная - это определенная область памяти, на которую мы можем сослаться 

--
main.py 
--
print("Hello, world!")

count_apple = 5 
# область в памяти на которую ссылается переменная - count_apple 

number = 42
# переменные называть по смыслу 

res = (count_apple + number)
print(res)

# слишком длинные переменные создавать не нужно 
----
Hello, world!
47
------

переменная - это именованная область памяти, которая может хранить некоторое значение

--
name = "Alice"  # Переменная 'name' хранит текст "Alice"
age = 25        # Переменная 'age' хранит число 25
----

определим некоторый список правил, как необходимо переменные именовать.

1. Именуйте переменные так, за что они отвечают. Если это имя, то название переменной будет name, а не n, anton и т.д. -
--
name = "Ivan"
----

2. Не используйте какие-то цифры, специальные символы и так далее, особенно в начале переменной

Если у Вас длинное название переменной, используйте 2 стиля на выбор, а именно - 

- snake_case — слова разделяются нижними подчеркиваниями, каждое слово пишется с маленькой буквы. Часто используется в Python: user_name, total_price 

- camelCase — первое слово пишется с маленькой буквы, а каждое последующее слово начинается с заглавной. Например, userName, totalPrice

Также не используйте в качестве названия переменных ключевые слова, они же служебные. Мы с ними далее познакомимся, но это слова по типу - class, if, for, return

По длине у названия переменных ограничений нет, но лучше использовать не длинные конструкции

Константа — это фиксированное значение, которое не изменяется в течение выполнения программы. В отличие от переменных, значение константы задается один раз и остается неизменным на протяжении всей работы программы.
Но их в Python нет - Поэтому используем следующую конструкцию.
Константы принято называть заглавными буквами, используя символ подчеркивания для разделения слов.
--
PI = 3.14159
MAX_USERS = 100
URL = "https://example.com"
----

Python не запрещает изменение значений констант, это просто конвенция. Вы можете изменить значение константы, но делать это не рекомендуется, так как это нарушает логику использования констант

************************************

3.2 - Типы данных и комментарии

...



















