
https://stepik.org/course/212545/promo

09.07.2025 - 5180 р.

+ backend - 
https://github.com/bzick/oh-my-backend

Требования: 
- базовые знания bash, 
- базовые знания структур данных (массивы, циклы, деревья) 
- базовые знания основ Computer Science
+
Для 100%-ого прохождения курса, ожидается что студент знает/готов изучить:
-  Пользоваться консолью и базовыми командами bash
-  Знаете основы алгоритмов и структур данных — что такое циклы, массивы, деревья
-  Базовые принципы Computer Science — переменные, функции, условия
-  SQL
-  Docker
-  Знает что такое HTTP и как работает WEB:
https://habr.com/ru/companies/gnivc/articles/861432/ https://habr.com/ru/companies/karuna/articles/568702/

= Этого достаточно)



************************************

1.1 Приветствие 

средняя зарплата мидла Go в России - 250 000 р. 
(сейчас курс - $1 = 80-100 р.)

время освоения курса - 21-45 дней (закладывай 2 месяца)



************************************

1.2 Правила курса

В некоторых модулях есть автотесты — вы отправляете решение и сразу видите результат. В более сложных темах вам придётся проверять решение самостоятельно, возможно, через go test или с помощью моков. Это нормальная практика продакшен-кода.

В курсе есть закрытый чат поддержки. Это рабочее пространство, не болталка. Там можно задать вопрос, получить помощь, уточнить непонятное. Но для этого нужно соблюдать правила — они отдельно описаны в документе «Правила чата».



************************************

1.3 Общий чат курса

Этот чат — рабочее пространство курса -
https://t.me/+s4CNkq3lT19mMzVi

закрытое профессиональное пространство, где мы:
- задаём конкретные вопросы;
- даём конкретные ответы;
- не отвлекаем других участников.

Общие правила поведения -
1 - Никакого лишнего оффтопа
2 - Чат — не гугл.
- Перед тем как задать очевидный вопрос (например, «что такое slice?»), попробуйте поискать сами. Это тоже навык.
3 - Только конструктив.
- Если вам нечего сказать по существу — лучше промолчите.
- Любое сообщение должно нести смысл и пользу.
4 - Запрещены прямые или косвенные оскорбления, троллинг, токсичность, споры ради споров, пассивная агрессия.
- За это вылет без предупреждения.
5 - Уважайте время других участников канала. Не стоит писать глубокой ночью

По работе с кодом -
1 - Код — не картинка.
- Никогда не кидайте код скриншотом. Никогда. Это дурной тон)
2 - Форматируйте код при отправке.
- Оборачивайте его в тройные кавычки go ...
3 - Много кода — отправляйте ссылкой.
- Лучше всего: https://go.dev/play/
- Альтернатива: gist.github.com
4 - Задавая вопрос — давайте контекст:
- Что именно вы делаете?
- Какой результат ожидаете?
- Что получается на выходе?
- Какая ошибка? Какой стек?

По домашкам -
1 - Решения домашек не выкладываются.
- Ни свои, ни чужие. Даже частично.
2 - Обсуждать домашки — можно.
- Спрашивайте, если застряли. Объясняйте, если понимаете. Но не кидайте готовое.

По рекламе и вакансиям -
1 - Реклама запрещена полностью.
2 - Вакансии — только с одобрения автора курса.
- Если хотите поделиться вакансией — сначала спросите.



************************************

2.1 Осознанное знакомство с Go

Программы на Go компилируются в один статический бинарный файл, который не требует дополнительных зависимостей для выполнения. Это упрощает развертывание и распространение приложений.

В крупных компаниях, таких как Google, поддержка и развитие больших кодовых баз может быть сложной задачей. Go предоставляет инструменты и подходы, такие как go build, go test, go fmt, go vet, которые помогают разработчикам эффективно управлять проектами, проводить тестирование, форматировать код и проверять его на наличие ошибок.

Если сформулировать кратко, то основные принципы Go: простота, производительность, параллелизм.

Релизный цикл Go характеризуется регулярными выпусками новых версий каждые шесть месяцев (в феврале и августе), с поддержкой каждой версии в течение 18 месяцев. Основные принципы включают строгую обратную совместимость, "Гарантия совместимости Go 1" для стабильности API, и активное обсуждение изменений в сообществе. Перед официальным релизом выпускаются релиз-кандидаты для тестирования. Этот цикл обеспечивает предсказуемость и стабильность, что делает Go надежным выбором для долгосрочных проектов.

Области использования Go -
Go активно используется в разработке веб-серверов, микросервисов, облачных приложений и CLI утилит. Несмотря на свои многочисленные достоинства, Go имеет некоторые ограничения и области, где его использование может быть нецелесообразным: высокоуровневые GUI-приложения, сложные математические вычисления (Machine Learning), системы с жесткими ограничениями по памяти (IoT) или малым времени отклика (системы реального времени).

Примеры известных программ и инструментов, написанных на Go: Docker, Kubernetes, Terraform, Prometheus.



Установка и настройка окружения

1 - Установка Go - Windows -

Go поддерживает Windows 7 и более новые версии. Убедитесь, что у вас установлена поддерживаемая версия ОС. 

Чтобы установить Golang на Windows, пользователю необходимо скачать установочный файл последней версии для Microsoft Windows с официального сайта Go -
https://go.dev/dl/

При необходимости, вы можете выбрать вместо последней любую другую доступную версию языка.

После окончания загрузки файла запускаем его и следуем рекомендациям мастера установки. По умолчанию Golang будет устанавливаться в директорию C:\Go. Можно изменить директорию установки по желанию.

По завершению установки, проверим, что Golang успешно встал в систему. Для этого откроем терминал (Win + R → cmd) и выполним следующую команду - 
go version

Настройка переменных среды -
Настройка переменных среды — важный этап установки Go на Windows, который позволяет операционной системе определить, где находятся необходимые для работы Go файлы и каталоги.

Для корректной работы Golang потребуется две переменные среды:
- GOPATH – это переменная среды, указывающая на место, где Go хранит загруженные и скомпилированные пакеты;
- PATH – это переменная среды, позволяющая системе находить исполняемые файлы Go без указания полного пути к ним. Значение переменной PATH должно добавиться автоматически после установки Go в систему. 

Настроим переменную среды GOPATH. Для этого необходимо организовать рабочее пространство, в котором будут храниться файлы и проекты на Go, например: C:\GoProject. Также добавим в данный каталог 2 папки:
- bin – для хранения исполняемых файлов (бинарных файлов). Когда вы компилируете свой проект, Go создает исполняемый файл и размещает его в этом каталоге.;
- src – для хранения исходных файлов Go. Все проекты на Go размещаются именно здесь.

После создания рабочего пространства настроим переменную GOPATH. Для этого перейдем в «Панель управления» → «Система и безопасность» → «Система» → «Дополнительные параметры системы» (простой способ доступа к свойствам системы: открыть окно «Выполнить» (Win + R) и ввести: sysdm.cpl). На вкладке «Дополнительно» кликаем по кнопке Переменные системы

Создайте новую переменную среды с именем GOPATH и укажите в ней путь к каталогу, где вы будете хранить свой код Go. Например, C:\GoProject



2 - Установка Go - Linux -

- Cкачайте архив с последней версией Go с официального сайта -
https://golang.org/dl/

- Разархивируйте файл в /usr/local  –  
sudo tar -C /usr/local -xzf go1.23.1.linux-amd64.tar.gz

- Добавьте путь к Go в переменную окружения - 
sudo export PATH=$PATH:/usr/local/go/bin && source $HOME/.profile

- Проверьте установку командой -
go version


Настройка переменных среды -
$GOPATH - это особенная переменная окружения, которая указывает на то, где Go будет хранить пакеты установленные глобально. По умолчанию они хранятся в директории ~/go. Исходный код этих программ будет храниться в каталоге ~/go/src, а скомпилированные программы в ~/go/bin
--
mkdir -p $HOME/go/{bin,src}
----

Если Вы используете Linux, WSL или MacOS, то добавьте следующие строчки в файл ~/.bashrc (или в ~/.zshrc, если используете Zsh)
--
export GOPATH=$HOME/go

export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin
----

Вне зависимости от вашей операционной системы перезапустите терминал.

+ также процесс установки на WSL описан тут - 
https://habr.com/ru/articles/572212/



3 - Установка Go - MacOS -

Установка с помощью мастера установки -
- Скачиваем мастер установки с официального сайта -
https://go.dev/dl/
- Запускаем скачанный файл и следуем инструкциям мастера установки.



Установка с помощью Homebrew -
--
brew install go
----
Проверьте установку командой - 
--
go version
----

Настройка переменных среды аналогична той, которая была описана выше для Linux



Редакторы кода и IDE -

1 - Значительная часть программистов выбирает Visual Studio Code (VS Code - https://code.visualstudio.com/) из-за легковесности, доступности и возможностей индивидуальной настройки. Советую начать именно с этого редактора, так как он отлично подходит для новичков за счет своей простоты и гибкости. Установите обязательно расширение VS Code Go (https://marketplace.visualstudio.com/items?itemName=golang.go), которое обеспечивает языковую поддержку Go.

2 - Другой популярный вариант для Go разработчиков – проприетарная IDE Goland от JetBrains (https://www.jetbrains.com/ru-ru/go/) Она заточена под язык и поэтому обладает более обширным функционалом, в отличие от Visual Studio Code.

3 - Также существует множество онлайн-редакторов для написания кода на Go. Самый популярный из них – Go Playground (https://go.dev/play/), официальный онлайн редактор от команды Go. Go Playground поддерживает последние версии языка, позволяет форматировать код и делиться им с другими (подходит больше для тестовых программ).



Первая программа на Go

Создадим в $GOPATH/src директорию с нашим проектом hello/ и разместим там файл main.go , который будет содержать следующий код:
--
package main // определили пакет main (подробнее о пакетах будет позже)

import "fmt" // импортировали пакет fmt из стандартной библиотеки Go

// main - функция для входа в программу (также как и в C/C++)
func main() {
	var name string 
	// объявили переменную name типа string

	// функция Scan() считывает данные из потока ввода (STDIN) в переменную name
	fmt.Scan(&name) 
	// подробнее о волшебном символен & будет рассказано позже

	// функция Printf() печатает сообщение в консоль (STDOUT)
	fmt.Printf("Hello, %s!\n", name) 
	// Printf - форматный вывод строки
}
----

язык Go является компилируемым, то есть написанный на нём исходный код преобразуется в машинный и затем записывается в файл, исполняемый компьютером. Компиляция позволяет предупредить возможные ошибки и оптимизирует исходный код, что хорошо сказывается на производительности программы.

В Go есть два способа запуска программ:

- С помощью команды go run <packages> . Она автоматически компилирует исполняемый файл, запускает его и сразу же удаляет. Этот способ используется в тех случаях, когда нужно разово запустить небольшой кусок кода и быстро получить результат.

- С помощью команды go build <packages> . Она также занимается компиляцией и создает в директории исполняемый файл. Особенностью этой команды является то, что она обеспечивает кроссплатформенность, так как позволяет контролировать, для какой ОС (c помощью переменной $GOOS) и архитектуры (c помощью переменной $GOARCH) создается бинарный файл. По умолчанию используется ОС и архитектура локальной машины.

Забегая немного вперед: для сборки приложения нам потребуется инициализировать сначала модуль (о модулях и пакетах подробно будет рассказано позже), предварительно перейдя в ранее созданную директорию $GOPATH/src/hello:
--
go mod init hello
----

Скомпилируем нашу первую программу и посмотрим на полученный вывод. Для этого в консоли введем команду -
--
go build .
----

В результате в папке /hello должен появиться исполняемый файл hello (Linux / MacOS) или hello.exe (Windows). Чтобы его запустить, напишем в консоли -
--
./hello
----

В появившееся поле введем любую строку, пусть это будет Alex, после чего получим сообщение - "Hello, Alex"

Более быстрый вариант локально запустить программу без сборки -
--
go run .
----
- Результат будет тот-же, но у нас не останется бинарника (собранной программы)



Дополнительные материалы и ресурсы:

Книги:
- "The Go Programming Language" — Alan A. A. Donovan, Brian W. Kernighan
- "Go in Action" — William Kennedy, Brian Ketelsen, Erik St. Martin
- "Head First Go" — Jay McGavren
- "Introducing Go: Build Reliable, Scalable Programs" — Caleb Doxsey


Онлайн-ресурсы:
- Официальный тур по Go
https://tour.golang.org/

- Документация Go
https://golang.org/doc/

- Спецификация языка Go
https://go.dev/ref/spec


Сообщества:
- Reddit r/golang
https://www.reddit.com/r/golang/

- Stack Overflow: Go
https://stackoverflow.com/questions/tagged/go



************************************

2.2 Основы синтаксиса

Рассмотрим уже знакомую нам программу hello world -
--
package main // Пакет программы
import "fmt" // Импорт библиотеки для работы с выводом текста

func main() { // Основная функция программы
	fmt.Println("Hello, World!")
}
----

Любая программа на Go состоит из:
- Пакетов (организация кода)
- Импорта библиотек (повторное использование готовых функций)
- Функций (инструкции для выполнения задач)



Что такое пакет?
Пакеты — это способ организации кода в Go. Каждый файл в Go начинается с объявления пакета.
Пакет main используется для программ, которые запускаются напрямую (в отличие от библиотек).



Что такое библиотека?
Библиотека — это набор готовых функций, которые можно использовать в программе.
Импортируется с помощью ключевого слова import.

Пример:
--
import "fmt"
----
- fmt — стандартная библиотека для работы с текстом: вывода и ввода.

Что такое функция?
Функция — это набор инструкций, который выполняет одну задачу.
Основная функция программы — main(). Она является точкой входа для выполнения кода.

Структура функции:
- Ключевое слово func — определяет функцию.
- Имя функции — уникальное название в рамках пакета, например, main.
- Круглые скобки () — место для передачи данных (аргументов).
- Фигурные скобки {} — содержат инструкции (наш код), которые выполняет функция.

Пример -
--
package main       // Пакет

import "fmt"       // Импорт библиотеки

// Функция, которая выводит приветствие
func greet(name string) {
    fmt.Println("Привет,", name)
}

func main() {      // Основная функция
    greet("Анна")  // Вызов функции greet
}
----

Работать с функциями удобно, но часто нам требуется переиспользовать их в коде. В таком случае нам обычно нужно, чтобы функция возвращала результат своего выполнения. Функция, которая возвращает одно или несколько значений, называется функцией с возвращаемыми значениями.

Общий вид функции с возвращаемыми значениями -
--
func functionName(parameters) returnType {
    // Логика функции
    return value
}
----
- где -
- functionName — имя функции.
- parameters — входные параметры функции (если есть).
- returnType — тип данных возвращаемого значения.
- return — ключевое слово, которое возвращает значение из функции.
- value — значение, которое возвращается.

Пример функции, возвращающей значение, которая принимает два числа и возвращает их сумму:
--
func add(a int, b int) int {
    result := a + b
    return result
}

func main() {
    sum := add(3, 5)
    fmt.Println("Сумма:", sum)
}
----
- тут -
- Входные параметры: a и b — целые числа (int)
- Возвращаемый тип: int — результат сложения двух чисел
- Ключевое слово return: возвращает переменную result

Go поддерживает именованные возвращаемые значения, которые позволяют заранее объявить переменные для возвращаемых данных -
--
func multiply(a int, b int) (result int) {
    result = a * b
    return 
	// Можно просто `return`, так как `result` уже объявлен
}

func main() {
    fmt.Println("Произведение:", multiply(4, 5))
}
----
- result — именованная переменная, которая автоматически возвращается. Упрощает код, но может снизить читаемость в сложных функциях, поэтому именованные возвращаемые значения используется редко и в особых случаях.

Go, в отличие например от языка С/С++, функция может возвращать несколько значений (неограниченное число). Вот пример функции на Go, которая возвращает несколько значений - результат целочисленного деления и остаток от деления (операция mod) -
--
package main

import "fmt"

// Функция divideAndMod возвращает результат целочисленного деления и остаток
func divideAndMod(a int, b int) (int, int) {
    q := a / b // Результат целочисленного деления
    r := a % b // Остаток от деления
    return q, r
}

func main() {
    a, b := 17, 5
    
    // Вызов функции
    quotient, remainder := divideAndMod(a, b)
    
    // Вывод результатов
    fmt.Println("Число:", a, "Делитель:", b)
    fmt.Println("Частное:", quotient)
    fmt.Println("Остаток:", remainder)
}
----

Хорошим тоном в Go считается возврат 1-2 значений из функций, в редком случае 3-х. Если нужно вернуть более 3-х значений из функции, то стоит возвращать более комплексный тип (структуру) для хорошей читабельности кода.



Замыкания в Go -
Замыкание — это функция, которая захватывает переменные из своей области видимости. Такие функции "замыкают" внешние переменные, сохраняя к ним доступ даже после выхода из области видимости, в которой они были созданы.

Замыкание позволяет:
- Создавать функции, которые "помнят" контекст, в котором они были определены.
- Захватывать и изменять внешние переменные из тела функции.

Замыкание создаётся в момент, когда функция определена внутри другой функции и использует переменные из внешней области видимости -
--
package main

import "fmt"

func counter() func() int {
    count := 0                 
	// Локальная переменная, которая будет захвачена замыканием
	
    return func() int {        
	// Анонимная функция "замыкает" переменную count
	
        count++                // Увеличивает значение count
        return count
    }
}

func main() {
    increment := counter()    // Создаём замыкание
    fmt.Println(increment())  // 1
    fmt.Println(increment())  // 2
    fmt.Println(increment())  // 3

    anotherIncrement := counter() // Новое замыкание с новым count
    fmt.Println(anotherIncrement()) // 1
}
----
Объяснение:
- Функция counter возвращает анонимную функцию, которая увеличивает переменную count и возвращает её значение.
- Переменная count "замкнута" в функции increment.
- Даже после завершения функции counter, переменная count остаётся доступной в теле возвращаемой функции.

Замыкания полезны для создания функций с сохранением состояния. Это особенно удобно для счётчиков, фильтров и других функций с накоплением данных.

Пример: генератор чисел -
--
package main

import "fmt"

func generator(start int) func() int {
    return func() int {
        start++
        return start
    }
}

func main() {
    next := generator(10)  // Начальное значение 10
    fmt.Println(next())    // 11
    fmt.Println(next())    // 12
    fmt.Println(next())    // 13
}
----

Замыкания позволяют сохранять состояние между вызовами функции. Правильное использование замыканий упрощает код, но требует внимательности при захвате переменных в многопоточной среде.

Подведение итогов -

Любая программа на Go имеет:
- Пакет.
- Импорт, если используются внешние библиотеки.
- Функции, которые выполняют задачи.
- Основную функцию main(), с которой начинается выполнение.

Ключевые моменты:
- Структура программы всегда должна быть логичной и понятной.
- Функции позволяют разбивать код на части, что делает его более читаемым.

:= — это короткое объявление переменной. Оно одновременно создаёт переменную и присваивает ей значение



Переменные

Переменные — это именованные области памяти, которые используются для хранения данных и обращений к ним.














