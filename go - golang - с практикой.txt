
https://stepik.org/course/212545/promo

09.07.2025 - 5_180 

+ backend - 
https://github.com/bzick/oh-my-backend

Требования: 
- базовые знания bash, 
- базовые знания структур данных (массивы, циклы, деревья) 
- базовые знания основ Computer Science

Для 100%-ого прохождения курса, ожидается что студент знает/готов изучить:
-  Пользоваться консолью и базовыми командами bash
-  Знаете основы алгоритмов и структур данных — что такое циклы, массивы, деревья
-  Базовые принципы Computer Science — переменные, функции, условия
-  SQL
-  Docker
-  Знает что такое HTTP и как работает WEB:
https://habr.com/ru/companies/gnivc/articles/861432/ https://habr.com/ru/companies/karuna/articles/568702/
= Этого достаточно)



************************************

1.1 Приветствие 

средняя зарплата мидла Go в России - 250 000 р. (при курсе $1 = 80 р.)

время освоения курса - 21-45 дней 



************************************

1.2 Правила курса

В некоторых модулях есть автотесты — вы отправляете решение и сразу видите результат. В более сложных темах вам придётся проверять решение самостоятельно, возможно, через go test или с помощью моков. Это нормальная практика продакшен-кода.

В курсе есть закрытый чат поддержки. Это рабочее пространство, не болталка. Там можно задать вопрос, получить помощь, уточнить непонятное. Но для этого нужно соблюдать правила — они отдельно описаны в документе «Правила чата».



************************************

1.3 Общий чат курса

Этот чат — рабочее пространство курса -
https://t.me/+s4CNkq3lT19mMzVi

закрытое профессиональное пространство, где мы:
- задаём конкретные вопросы;
- даём конкретные ответы;
- не отвлекаем других участников.

Общие правила поведения -
1 - Никакого лишнего оффтопа
2 - Чат — не гугл.
- Перед тем как задать очевидный вопрос (например, «что такое slice?»), попробуйте поискать сами. Это тоже навык.
3 - Только конструктив.
- Если вам нечего сказать по существу — лучше промолчите.
- Любое сообщение должно нести смысл и пользу.
4 - Запрещены прямые или косвенные оскорбления, троллинг, токсичность, споры ради споров, пассивная агрессия.
- За это вылет без предупреждения.
5 - Уважайте время других участников канала. Не стоит писать глубокой ночью

По работе с кодом -
1 - Код — не картинка.
- Никогда не кидайте код скриншотом. Никогда. Это дурной тон)
2 - Форматируйте код при отправке.
- Оборачивайте его в тройные кавычки go ...
3 - Много кода — отправляйте ссылкой.
- Лучше всего: https://go.dev/play/
- Альтернатива: gist.github.com
4 - Задавая вопрос — давайте контекст:
- Что именно вы делаете?
- Какой результат ожидаете?
- Что получается на выходе?
- Какая ошибка? Какой стек?

По домашкам -
1 - Решения домашек не выкладываются.
- Ни свои, ни чужие. Даже частично.
2 - Обсуждать домашки — можно.
- Спрашивайте, если застряли. Объясняйте, если понимаете. Но не кидайте готовое.

По рекламе и вакансиям -
1 - Реклама запрещена полностью.
2 - Вакансии — только с одобрения автора курса.
- Если хотите поделиться вакансией — сначала спросите.



************************************

2.1 Осознанное знакомство с Go

Программы на Go компилируются в один статический бинарный файл, который не требует дополнительных зависимостей для выполнения. Это упрощает развертывание и распространение приложений.

В крупных компаниях, таких как Google, поддержка и развитие больших кодовых баз может быть сложной задачей. Go предоставляет инструменты и подходы, такие как go build, go test, go fmt, go vet, которые помогают разработчикам эффективно управлять проектами, проводить тестирование, форматировать код и проверять его на наличие ошибок.

Если сформулировать кратко, то основные принципы Go: простота, производительность, параллелизм.

Релизный цикл Go характеризуется регулярными выпусками новых версий каждые шесть месяцев (в феврале и августе), с поддержкой каждой версии в течение 18 месяцев. Основные принципы включают строгую обратную совместимость, "Гарантия совместимости Go 1" для стабильности API, и активное обсуждение изменений в сообществе. Перед официальным релизом выпускаются релиз-кандидаты для тестирования. Этот цикл обеспечивает предсказуемость и стабильность, что делает Go надежным выбором для долгосрочных проектов.

Области использования Go -
Go активно используется в разработке веб-серверов, микросервисов, облачных приложений и CLI утилит. Несмотря на свои многочисленные достоинства, Go имеет некоторые ограничения и области, где его использование может быть нецелесообразным: высокоуровневые GUI-приложения, сложные математические вычисления (Machine Learning), системы с жесткими ограничениями по памяти (IoT) или малым времени отклика (системы реального времени).

Примеры известных программ и инструментов, написанных на Go: Docker, Kubernetes, Terraform, Prometheus.



Установка и настройка окружения

1 - Установка Go - Windows -

Go поддерживает Windows 7 и более новые версии. Убедитесь, что у вас установлена поддерживаемая версия ОС. 

Чтобы установить Golang на Windows, пользователю необходимо скачать установочный файл последней версии для Microsoft Windows с официального сайта Go (https://go.dev/dl/). При необходимости, вы можете выбрать вместо последней любую другую доступную версию языка.


















