
https://s1.sharewood.co/threads/stepik-python-mikroservisy-backend-na-fastapi-2024.469505/

https://cloud.mail.ru/public/1a98/mZrRh3DLY

в телеграм - my_coding - 08.02.2025 

************************************

1.1 - 1 - 

сервер (имеет свой постоянный публичный адрес - IP, через DNS)
клиент (браузер, мобильное приложение, десктопное приложение, другой сервер)
базы данных (хранит данные)

клиент и сервер общаются друг с другом по определенным стандартам (форматам запросов, соглашениям, протоколам) 

язык гипертекстовой разметки - HTML

http, https запросы 

CSS - стили и свойства 

нестатичные элементы веб-страницы - язык JavaScript 

сервер - обрабатывает http-запросы с помощью установленного на него веб-приложения 

БД - система хранения данных (СУБД - Postgresql, MySQL и т.п., реляционная (колоночная) или нереляционная)

Прочесть дополнительный материал -
https://habr.com/ru/articles/495698/
https://ru.hexlet.io/courses/internet-fundamentals/lessons/client-server/theory_unit

************************************

1.2 - 1 -

фреймворки python для web-разработки - 
- Django 
- FastAPI
- Flask 

каждый инструмент нужен для своей задачи, от задачи и условий зависит выбор фреймворка и БД

какие цели бывают - 
- интернет-магазин (для этого используют django, и в github по django много библиотек, но у django низкая скорость и производительность)

далее автор создает API на django 

автор не любит django 

************************************

1.2 - 2 -

Flask - посвежее чем django

Flask - под микросервисную инфраструктуру, под приложение где многое нужно написать самому 

FastAPI - молодой фреймворк, выпущен в 2018 году 

--
pip install fastapi 
----

--
pip install "uvicorn[standard]"
----

--
pip install uvicorn 
----

--
uvicorn main:app --reload 
----

документация FastAPI - 
127.0.0.1:8000/docs 

FastAPI быстрее Flask, примерно на уровне Golang 

Домашнее задание -
написать простой API(ручку) на 3 Django, Flask и FastAPI, которая будет принимать массив строк и отдаст предложение, собранное из этих строк.
писать код нужно строго в соответсвии с документацией.

Дополнительный материалы -
- документация Django - 
https://docs.djangoproject.com/en/5.0/intro/tutorial01/

- документация FastAPI -
https://fastapi.tiangolo.com/tutorial/first-steps/

- документация Flask -
https://flask.palletsprojects.com/en/3.0.x/quickstart/




























