
[QA.GURU] Автоматизация тестирования Java (2023) - 



17 поток
-
https://s1.sharewood.tech/threads/qa-guru-avtomatizacija-testirovanija-java-2023.403042/
-
https://cloud.mail.ru/public/rfRZ/gCVoTkEho
-
жд4тб
-
telegram - избранное - 22.08.2025



***

18 поток -
-
https://bw10.skladchik.org/threads/java-avtomatizacija-testirovanija-qa-guru.397753/
-
https://cloud.mail.ru/public/jyZU/JeGZsZjaJ
- 
telegram - избранное - 20.08.2025



******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************



***

17 поток - 


******************************************

1 - 

можно учиться и с нуля 

ручное тестирование знать не обязательно

автор столкнулся с проблемой - в интернете не было нормального гайда 

гайды от автора - 
https://github.com/qa-guru/getting-started-java/tree/login
https://github.com/qa-guru/getting-started-java/wiki
+ в файле world 

план урока -
- разработаем автотест 
- обсудим, зачем мы это сделали 
- разберем специфику 
- рассмотрим большой проект и дипломные проекты 
- подведем итоги 
- получим домашнее задание 

раньше новая версия приложения выходила раз в месяц, сейчас обновления выкатывают по 5 раз в день - ручной труд уже не поможет, нужно автоматизировать 

автотестировщикам платят как хорошим разработчикам 

основные принципы автоматизации тестирования - 
- код (скрипты)
- нотификация (уведомления в Telegram, на почту и т.п.)
- процессы (тикеты в Jira)
- инфраструктура 
- визуализация результатов 

тесты запускаются не на ноутбуке, а на сервере (инфраструктуре)

коментарий - 
--
/*
text
text
text
*/
----



--
build.gradle 
--
plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation (
        "com.codeborne:selenide:6.3.5",
        "org.junit.jupiter:junit-jupiter:5.8.2")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}
----



--
LoginTests.java 
--
import com.codeborne.selenide.Configuration;
import org.junit.jupiter.api.Test;

import static com.codeborne.selenide.Selenide.open;

public class LoginTests {
    /*
    https://qa.guru/cms/system/login
    */


    @Test 
    void successfulLoginTest() {
        Configuration.holdBrowserOpen = true;

        open("https://qa.guru/cms/system/login");
        $(".login-form").shouldHave(text("Войти"));
    }

    @Test 
    void successfulLoginTest() {
        
    }
}
----
- этот код не работает, видимо устарел 

любая программа - это папка с текстовыми файлами (инструкциями)




00-53-30























******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************
******************************************



***

18 поток - 

******************************************

1 - 

тут учат людей закрывать задачи бизнеса, за что бизнес готов платить деньги 

план урока -
- разработаем автотест 
- обсудим, зачем мы это сделали 
- разберем специфику 
- рассмотрим большой проект и дипломные проекты 
- подведем итоги 
- получим домашнее задание 

основные принципы автоматизации тестирования -
- код 
- визуализация результатов 
- инфраструктура 
- нотификация
- процессы 

руководство по запуску первого автотеста - 
- установка JDK (Java SE Developer Kit)
- установка Gradle 
- установка Git 
- установка IDEA 
- клонирование проекта в Idea из GitHub 
- запуск теста 

инструкции тут - 
https://github.com/qa-guru/getting-started-java/wiki

+

установить Java -

проверить установлена ли и версию - 
--
java --version 
----

+

если не установлена, то - 

рекомендуется поставить 17 версию Java. Для этого необходимо скачать файл -
https://www.oracle.com/ru/java/technologies/javase/jdk17-archive-downloads.html

Для скачивания потребуется логин или регистрация на сайте Oracle. Если лень регистрироваться, можно скопировать реквизиты доступа -
http://bugmenot.com/view/oracle.com

+

В последнее время, в связи с блокировкой ресурсов Oracle на территории РФ, скачивание JDK может быть затруднительным. Если вы не смогли скачать JDK с сайта Oracle, воспользуйтесь одним из следующих вариантов -

https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/downloads-list.html

https://adoptium.net/temurin/releases/?version=17

https://bell-sw.com/pages/downloads/#jdk-17-lts

+

или воспользуйтесь следующей инструкцией для установки OpenJDK -
Инструкция:

- Скачать OpenJDK по этой ссылке -
https://download.oracle.com/java/17/archive/jdk-17.0.10_windows-x64_bin.zip

- Открыть архив и скопировать папку 17.0.10 на диск (в этом конкретном примере папка скопирована на диск D:\)

+

Установить JDK и скопировать путь папки

+

прописать переменные среды - 

Мой компьютер - 
Свойства - 
Дополнительные параметры системы (вверху справа) - 
Переменные среды - 
в нижнем окне - 
Создать - 
--
Переменная - JAVA_HOME
Значение - C:\Java\jdk11 (путь к папке где находится Java)
----
Нажать «OK»;
Еще раз нажать «ОК»

+

Следующие этапы (установка Gradle, установка IntelliJ Idea и установка Git) также потребуют перезагрузки компьютера.

+

Установка Gradle - Windows -

- Перейти на сайт - 
https://gradle.org/releases/

- На странице найти раздел v7.4.x;

- Скачать Binary-only.

- На диске C:\ создать директорию «Gradle», распаковать в неё содержимое папки gradle-7.4.x архива

+

прописать переменные среды - 

Мой компьютер - 
Свойства - 
Дополнительные параметры системы (вверху справа) - 
Переменные среды - 
в нижнем окне - выделить переменную Path и нажать «Изменить» -
В окне «Изменить переменную Среды» нажать «Создать» -
В появившейся строчке, ввести путь к папке C:\Gradle\bin
Нажать «OK»
Еще раз нажать «ОК»

Проверить, что Gradle установлен, открыв терминал и введя команду -
--
gradle -v
----



Git - 

проверить установлен ли и версию - 
--
git -v
----

документация по git - 
https://git-scm.com/book/ru/v2

1 - перейти на сайт - 
https://git-scm.com/downloads

2 - нажать на Windows 

3 - В окне выбора компонентов убрать галочку с Git GUI here, нажать кнопку Next

4 - В окне Adjusting your PATH environment убедиться, что выбрана опция Git from the command line and also from 3rd-party software, нажать кнопку Nex

5 - Нажать Next без изменения параметров во всех остальных окнах

6 - Перезагрузить компьютер



Проверить установку компонентов, открыв терминал и введя команды - 
java -version
gradle -v
git --version



Установка IntelliJ IDEA - Windows - 

1 - Перейти по ссылке - 
https://www.jetbrains.com/ru-ru/idea/download

2 - В правом верхнем углу нажать синюю кнопку Скачать

3 - На открывшейся странице нажать чёрную кнопку Скачать под надписью Community Для JVM и Android-разработки

4 - После скачивания запустить установщик

5 - В ходе установки появится окно с опциями. Необходимо поставить галочку в пункте Update PATH variable



Клонирование проекта из GitHub -

1 - Открыть страницу -
https://github.com/qa-guru/getting-started

2 - Нажать зелёную кнопку "Code", в открывшемся модальном окне скопировать строчку с адресом репозитория (в HTTPS)

3 - Запустить IntelliJ IDEA

4 - В IDEA выбрать File -> New -> Project from Version Control...

5 - В появившемся окне вставить URL репозитория

6 - Нажать синюю кнопку "Clone" в правом нижнем углу окна

7 - В появившемся окне нажать синюю кнопку "Trust Project"

8 - Выбрать File -> Settings, в окне поиска ввести gradle, в открывшемся пункте настроек выставить значения как на скриншоте (Telegram - избранное - 28.08.2025)

9 - Нажать кнопку "OK", подождать пока настройки Gradle обновятся



Запуск теста - 

1 - В окне проекта в IntelliJ IDEA, открыть папку simple-google-search\src\test\java, двойным кликом открыть класс SearchTests

2 - В окне проекта, открыть папку simple-google-search\src\test\java, двойным кликом открыть класс SearchTests

3 - В открывшемся окне SearchTests.java, кликнуть на двойную зелёную стрелку

4 - В появившемся модальном окне выбрать пункт Run 'SearchTests'

5 - В случае успеха, в нижней части окна появится сообщение BUILD SUCCESSFUL в правой части и зелёные галочки результатов выполнения теста в левой






00-16-30
















Полезные ссылки:

Автотест на авторизацию: 
https://github.com/qa-guru/getting-started-java/tree/login

Инструкция по настройке рабочей среды:
https://github.com/qa-guru/getting-started-java/wiki

Большой проект: 
https://github.com/qa-guru/allure-testops-tests/

Автотесты на три платформы из одного репозитория:
https://github.com/autotests-cloud/selenide-web-ios-android-tests

Дипломные проекты выпускников курса: https://github.com/SmallSparkle/m2.ru_test_project https://github.com/4erep/WebShop_final_project/
https://github.com/daramirra/qaGuruDiploma
https://github.com/ElenaSkorobodilova
https://github.com/vonoelv/bookmate-test-project



Задание
1. Установите необходимый инструментарий по инструкции https://github.com/qa-guru/getting-started-java
2. Скопируйте код из репозитория http://github.com/qa-guru/getting-started
3. Запустите автотест
















































































