
telegram - избранное - 19.08.2025 

проходить - по 1 теме в день 



******************************************

ПОЛЕЗНЫЕ МАТЕРИАЛЫ - 

шпаргалка для тестировщиков - 
https://docs.google.com/spreadsheets/d/1YM8ey2VNZ63q-IQxQoitro7zNN_rcOfsUB-wCi_hMCY/edit?gid=38461779#gid=38461779

фундаментальная теория тестирования - 
https://habr.com/ru/articles/549054/

QA библия - 
https://vladislaveremeev.gitbook.io/qa_bible

бесплатный крутой курс по python -
https://stepik.org/course/67/promo

лучший курс по алгоритмам на python -
https://www.youtube.com/playlist?list=PLRDzFCPr95fK7tr47883DFUbm4GeOjjc0

роадмап тестировщика -
https://miro.com/app/board/uXjVOsbBpjE=/

roadmap по python -
https://habr.com/ru/articles/725930/



******************************************

неделя 1 - день 1 (18.08.2025) - 

виды компаний - 
https://www.youtube.com/watch?v=t6mQkEa4O90

виды IT компаний и специфика работы в них для тестировщика -

1 - продуктовые IT компании - сами разрабатывают  

2 - аутсорсинговые IT компании - предоставляют в аренду свой персонал 

3 - аутстаффинговые IT компании - в отличие от аутсорса, отвечает только за свой квалифицированный персонал, но не берет на себя обязательства по успешности проекта заказчика 

4 - стартапы - разрабатывают свой продукт 

Чем отличается работа тестировщика в разных IT компаниях?

- требования к тестировщику
- ценность роли тестировщика и процесса тестирования 
- наличие тестовой документации 
- экспертность команды по тестированию 
- возможность роста и уровень ЗП 



******************************************

неделя 1 - день 2 (19.08.2025) - 

команда разработки - 
https://habr.com/ru/articles/695944/

Стандартный список ролей -
- аккаунт менеджер 
- продакт менеджер 
- проджект менеджер
- менеджер по продажам (сейлз)
- архитектор ПО 
- бизнес аналитик
- системный аналитик 
- технический писатель 
- проектировщик (макеты интерфейса)
- дизайнер (внешний вид продукта)
- фронтенд разработчик (верстальщик)
- бекэнд разработчик (или фулстек)
- тестировщик 
- локализатор (переделывает приложение под другие языки, страны)
- тимлид 



******************************************

неделя 1 - день 3 (20.08.2025) - 

цикл разработки по -
https://testengineer.ru/sdlc/

SDLC (Software Development Life Cycle) - последовательность этапов разработки -
- идея 
- сбор требований и анализ 
- дизайн 
- разработка 
- тестирование 
- деплой 
- поддержка

В общем виде SDLC состоит из 6 этапов: 
- Планирование
- Анализ
- Дизайн
- Разработка и тестирование
- Имплементация (деплой)
- Поддержка (обслуживание)

модели SDLC -
- водопадная (каскадная)
- гибкие методологии 
- v-модель 
- интерактивная и инкрементальная 
- эволюционного прототипирования 
- спиральная 



******************************************

неделя 1 - день 4 (21.08.2025) - 

словарь itшника -
https://docs.google.com/document/d/192vMjZjdZX9IIXiHSN2UH8ZxKcKDCAWnBZIltK4Hdvw/edit?tab=t.0#heading=h.8i6o3gxucuuy

+++



******************************************

неделя 1 - день 5 (22.08.2025) - 

методологии разработки - 
https://habr.com/ru/companies/edison/articles/269789/

+++



******************************************

неделя 1 - день 6 (23.08.2025) - 

agile - 
https://habr.com/ru/companies/edison/articles/313410/

+++



******************************************

неделя 1 - день 7 (24.08.2025) - 

scrum -
https://www.youtube.com/watch?v=bv4L_32J-5A

scrum - это фреймворк agile для гибкого управления проектами 

итерационная модель - основополагающая в scrum 

в водопадной модели невозможно вернутся на предыдущий этап, приходится начинать всё с начала - в scrum это возможно, и можно изменять требования 

agile-манифест - 4 основопологающие ценности - 
- люди и взаимодействие важнее процессов и инструментов 
- рабочий продукт важнее исчерпывающей документации 
- сотрудничество с заказчиком важнее согласования условий контракта 
- готовность к изменениям важнее следования первоначальному плану 

scrum = фреймворк :
1 - scrum команда 
2 - события 
3 - артефакты 
4 - метрики 

scrum - не советует создавать команды численностью более 9 человек (разработчики, которые решают что будем делать на проекте)

разработчик тоже несет ответственность за баг в продукте (коллективная ответственность)

scrum master - обучение и понимание scrum членами команды 



спринт - отрезок 2-4 недели -

- планирование спринта - выбираем из бэклога продукта что мы возьмем для данного спринта 

- ежедневный дейлик (митинг) - примерно 15 минут - что делал вчера, что планируешь делать сегодня, какие есть трудности, проблемы (вчера я писал тест-кейс для такой-то юзерстори, сегодня я буду писать тест-кейс для такой-то юзерстори, мне не понятно как рабработчики будут реализовывать такую-то юзерстори, хочу сегодня связаться с разработчиком и это выяснить)

- подведение итогов спринта (ретроспектива) - 
    - что шло хорошо в спринте 
    - какие проблемы были в спринте 
    - как можно улучшить работу 
    - идеи по ходу ретроспективы 



пользовательская история - описание чего-то, что система должна делать для пользователя (как новый пользователь в системе я хочу купить телефон, чтобы порадовать себя)

стори-поинт - единица оценки юзер-стори (пользовательских историй) 



******************************************

неделя 2 - день 1 (25.08.2025) - 

rest - 
https://testengineer.ru/rest/ 

REST (Representational State Transfer) — это архитектурный стиль, используемый при разработке распределенных систем, веб-сервисов и API (Application Programming Interface). Он определяет набор принципов и ограничений для создания масштабируемых, гибких и легко поддерживаемых систем.



Основные принципы REST:

1 - Клиент-серверная архитектура: В REST-архитектуре существует четкое разделение между клиентом (который инициирует запросы) и сервером (который предоставляет ресурсы и обрабатывает запросы). Это позволяет независимо изменять и развивать обе стороны без влияния на другую

2 - Без состояния (Stateless): Каждый запрос от клиента к серверу должен содержать всю необходимую информацию для обработки этого запроса. Сервер не хранит информацию о состоянии клиента между запросами. Это позволяет легко масштабировать серверную часть, так как каждый запрос обрабатывается независимо

3 - Кэширование: REST поддерживает механизм кэширования, позволяющий клиентам сохранять локальные копии ответов сервера. Это улучшает производительность, снижает нагрузку на сервер и улучшает пользовательский опыт

4 - Единообразие интерфейса: REST определяет универсальный интерфейс, состоящий из четырех основных методов HTTP: GET (получение ресурса), POST (создание нового ресурса), PUT (обновление ресурса) и DELETE (удаление ресурса). Эти методы позволяют управлять ресурсами на сервере

5 - Слои: REST позволяет использовать промежуточные слои (например, прокси-серверы или кэши), которые могут улучшать безопасность, масштабируемость и производительность системы



RESTful API (RESTful Application Programming Interface) — это API, разработанное с использованием принципов REST. Оно предоставляет доступ к ресурсам и операциям через стандартные методы HTTP. RESTful API широко используется в веб-разработке для создания взаимодействия между клиентскими приложениями и серверами, обмена данными и выполнения операций над ресурсами



Различия между REST и SOAP - 
Во-первых SOAP — это протокол, а REST — архитектурный стиль.

Лучше сравнивать реализации:
- SOAP: XML поверх SOAP через HTTP
- RESTful: JSON через HTTP



******************************************

неделя 2 - день 2 (26.08.2025) - 

soap - 
https://testengineer.ru/soap/

SOAP (Simple Object Access Protocol) — это протокол обмена структурированными сообщениями в формате XML (eXtensible Markup Language) между клиентом и сервером. SOAP используется для создания веб-служб (web services), которые обеспечивают взаимодействие между различными приложениями и платформами.

SOAP был широко использован в прошлом для интеграции различных систем и веб-служб. Однако, в последние годы, многие разработчики перешли на использование более легковесных и простых в использовании протоколов, таких как REST.

Основные характеристики SOAP:

1 - XML-основа: SOAP использует XML для кодирования структурированных данных в сообщениях. XML обеспечивает гибкость и расширяемость для передачи различных типов данных.

2 - Протокол независимый: SOAP не привязан к конкретному протоколу передачи данных и может использовать различные протоколы для отправки сообщений, такие как HTTP, SMTP и другие.

3 - Структурированные сообщения: SOAP сообщения состоят из заголовков (headers) и тела (body). Заголовки могут содержать информацию о безопасности, маршрутизации, версии протокола и другие метаданные. Тело содержит фактические данные, передаваемые между клиентом и сервером.

4 - Операции и методы: SOAP определяет операции, которые можно вызвать на удаленном сервере, и методы, которые могут быть выполнены над ресурсами. Он использует специальный язык описания веб-службы (WSDL — Web Services Description Language) для описания доступных операций и формата сообщений.

5 - Протокол с высоким уровнем абстракции: SOAP обеспечивает высокий уровень абстракции, что позволяет разработчикам скрыть детали взаимодействия и реализации от клиентов, фокусируясь на логике бизнес-операций.



******************************************

неделя 2 - день 3 (27.08.2025) - 

монолит - 
https://www.youtube.com/watch?v=wypO96zubGc

монолиты и микросервисы - это про API, про тестирование бекенда, HTTP методов 

у каждого микросервиса, как и у монолита, свои API

микросервисы могут быть расположенны на разных серверах 



******************************************

неделя 2 - день 4 (28.08.2025) - 

микросервисы - 
https://www.youtube.com/watch?v=XtOJZ1T3qw4&t=1492s



проблема монолитов - 

- жесткое связывание
 
- ответственность за разные компоненты монолита
 
- при изменениях тратится много времени на перепроверку логики работы всех компонентов монолита 

- проблемы при деплое и развертывании монолита 



на стартапе лучше выбирать монолит 

на большом проекте лучше выбирать микросервисы 

в своем пет-проекте лучше выбрать микросервисы 



микросервисы сложнее разрабатывать, чем монолит 

по канонам - у каждого микросервиса должна быть своя база данных 



сообщество где шпаргалка по микросервисам и другие материалы -
https://www.faang.school/community

бесплатный курс по Java Core - 
https://www.faang.school/java-magics 



******************************************

неделя 2 - день 5 (29.08.2025) - 

HTTPS - 
https://selectel.ru/blog/http-request/

Данные между клиентом и сервером в рамках работы протокола передаются с помощью HTTP-сообщений. Они бывают двух видов:

- Запросы (HTTP Requests) — сообщения, которые отправляются клиентом на сервер, чтобы вызвать выполнение некоторых действий. Зачастую для получения доступа к определенному ресурсу. Основой запроса является HTTP-заголовок.

- Ответы (HTTP Responses) — сообщения, которые сервер отправляет в ответ на клиентский запрос.



Само по себе сообщение представляет собой информацию в текстовом виде, записанную в несколько строчек.

В целом, как запросы HTTP, так и ответы имеют следующую структуру:

1 - Стартовая строка (start line) — используется для описания версии используемого протокола и другой информации — вроде запрашиваемого ресурса или кода ответа. Как можно понять из названия, ее содержимое занимает ровно одну строчку.

2 - HTTP-заголовки (HTTP Headers) — несколько строчек текста в определенном формате, которые либо уточняют запрос, либо описывают содержимое тела сообщения.

3 - Пустая строка, которая сообщает, что все метаданные для конкретного запроса или ответа были отправлены.

4 - Опциональное тело сообщения, которое содержит данные, связанные с запросом, либо документ (например HTML-страницу), передаваемый в  ответе.



Рассмотрим атрибуты HTTP-запроса подробнее - 



1. Стартовая строка
Стартовая строка HTTP-запроса состоит из трех элементов:

- Метод HTTP-запроса (method, реже используется термин verb). Обычно это короткое слово на английском, которое указывает, что конкретно нужно сделать с запрашиваемым ресурсом. Например, метод GET сообщает серверу, что пользователь хочет получить некоторые данные, а POST — что некоторые данные должны быть помещены на сервер.

- Цель запроса. Представлена указателем ресурса URL, который состоит из протокола, доменного имени (или IP-адреса), пути к конкретному ресурсу на сервере. Дополнительно может содержать указание порта, несколько параметров HTTP-запроса и еще ряд опциональных элементов.

- Версия используемого протокола (либо HTTP/1.1, либо HTTP/2), которая определяет структуру следующих за стартовой строкой данных.
В примере ниже стартовая строка указывает, что в качестве метода используется GET, обращение будет произведено к ресурсу /index.html, по версии протокола HTTP/1.1:
--
GET /index.html HTTP/1.1
----



Методы -
Методы позволяют указать конкретное действие, которое мы хотим, чтобы сервер выполнил, получив наш запрос. Так, некоторые методы позволяют браузеру (который в большинстве случаев является источником запросов от клиента) отправлять дополнительную информацию в теле запроса — например, заполненную форму или документ.



Метод - описание - 

GET - Позволяет запросить некоторый конкретный ресурс. Дополнительные данные могут быть переданы через строку запроса (Query String) в составе URL (например ?param=value).О составляющих URL мы поговорим чуть позже.

POST - Позволяет отправить данные на сервер. Поддерживает отправку различных типов файлов, среди которых текст, PDF-документы и другие типы данных в двоичном виде. Обычно метод POST используется при отправке информации (например, заполненной формы логина) и загрузке данных на веб-сайт, таких как изображения и документы.

HEAD - Здесь придется забежать немного вперед и сказать, что обычно сервер в ответ на запрос возвращает заголовок и тело, в котором содержится запрашиваемый ресурс. Данный метод при использовании его в запросе позволит получить только заголовки, которые сервер бы вернул при получении GET-запроса к тому же ресурсу. Запрос с использованием данного метода обычно производится для того, чтобы узнать размер запрашиваемого ресурса перед его загрузкой.

PUT - Используется для создания (размещения) новых ресурсов на сервере. Если на сервере данный метод разрешен без надлежащего контроля, то это может привести к серьезным проблемам безопасности.

DELETE - Позволяет удалить существующие ресурсы на сервере. Если использование данного метода настроено некорректно, то это может привести к атаке типа «Отказ в обслуживании» (Denial of Service, DoS) из-за удаления критически важных файлов сервера.

OPTIONS - Позволяет запросить информацию о сервере, в том числе информацию о допускаемых к использованию на сервере HTTP-методов.

PATCH - Позволяет внести частичные изменения в указанный ресурс по указанному расположению.



URL

Получение доступа к ресурсам по HTTP-протоколу осуществляется с помощью указателя URL (Uniform Resource Locator). URL представляет собой строку, которая позволяет указать запрашиваемый ресурс и еще ряд параметров.

Использование URL неразрывно связано с другими элементами протокола, поэтому далее мы рассмотрим его основные компоненты и строение:

Поле Scheme используется для указания используемого протокола, всегда сопровождается двоеточием и двумя косыми чертами (://).

Host указывает местоположение ресурса, в нем может быть как доменное имя, так и IP-адрес.

Port, как можно догадаться, позволяет указать номер порта, по которому следует обратиться к серверу. Оно начинается с двоеточия (:), за которым следует номер порта. При отсутствии данного элемента номер порта будет выбран по умолчанию в соответствии с указанным значением Scheme (например, для http:// это будет порт 80).

Далее следует поле Path. Оно указывает на ресурс, к которому производится обращение. Если данное поле не указано, то сервер в большинстве случаев вернет указатель по умолчанию (например index.html).

Поле Query String начинается со знака вопроса (?), за которым следует пара «параметр-значение», между которыми расположен символ равно (=). В поле Query String могут быть переданы несколько параметров с помощью символа амперсанд (&) в качестве разделителя.

Не все компоненты необходимы для доступа к ресурсу. Обязательно следует указать только поля Scheme и Host.



Версии HTTP

Раз уж мы упомянули версию протокола как элемента стартовой строки, то стоит сказать об основных отличиях версий HTTP/1.X от HTTP/2.X.

Последняя стабильная, наиболее стандартизированная версия протокола первого поколения (версия HTTP/1.1) вышла в далеком 1997 году. Годы шли, веб-страницы становились сложнее, некоторые из них даже стали приложениями в том виде, в котором мы понимаем их сейчас. Кроме того, объем медиафайлов и скриптов, которые добавляли интерактивность страницам, рос. Это, в свою очередь, создавало перегрузки в работе протокола версии HTTP/1.1.

Стало очевидно, что у HTTP/1.1 есть ряд значительных недостатков:

- Заголовки, в отличие от тела сообщения, передавались в несжатом виде.

- Часто большая часть заголовков в сообщениях совпадала, но они продолжали передаваться по сети.

- Отсутствовала возможность так называемого мультиплексирования — механизма, позволяющего объединить несколько соединений в один поток данных. Приходилось открывать несколько соединений на сервере для обработки входящих запросов.

С выходом HTTP/2 было предложено следующее решение: HTTP/1.X-сообщения разбивались на так называемые фреймы, которые встраивались в поток данных.

Фреймы данных (тела сообщения) отделялись от фреймов заголовка, что позволило применять сжатие. Вместе с появлением потоков появился и ранее описанный механизм мультиплексирования — теперь можно было обойтись одним соединением для нескольких потоков.

Единственное о чем стоит сказать в завершение темы: HTTP/2 перестал быть текстовым протоколом, а стал работать с «сырой» двоичной формой данных. Это ограничивает чтение и создание HTTP-сообщений «вручную». Однако такова цена за возможность реализации более совершенной оптимизации и повышения производительности.



Заголовки

HTTP-заголовок представляет собой строку формата «Имя-Заголовок:Значение», с двоеточием(:) в качестве разделителя. Название заголовка не учитывает регистр, то есть между Host и host, с точки зрения HTTP, нет никакой разницы. Однако в названиях заголовков принято начинать каждое новое слово с заглавной буквы. Структура значения зависит от конкретного заголовка. Несмотря на то, что заголовок вместе со значениями может быть достаточно длинным, занимает он всего одну строчку.

В запросах может передаваться большое число различных заголовков, но все их можно разделить на три категории:

1 - Общего назначения, которые применяются ко всему сообщению целиком.

2 - Заголовки запроса уточняют некоторую информацию о запросе, сообщая дополнительный контекст или ограничивая его некоторыми логическими условиями.

3 - Заголовки представления, которые описывают формат данных сообщения и используемую кодировку. Добавляются к запросу только в тех случаях, когда с ним передается некоторое тело.



Самые частые заголовки запроса

Заголовок - описание -

Host - Используется для указания того, с какого конкретно хоста запрашивается ресурс. В качестве возможных значений могут использоваться как доменные имена, так и IP-адреса. На одном HTTP-сервере может быть размещено несколько различных веб-сайтов. Для обращения к какому-то конкретному требуется данный заголовок.

User-Agent - Заголовок используется для описания клиента, который запрашивает ресурс. Он содержит достаточно много информации о пользовательском окружении. Например, может указать, какой браузер используется в качестве клиента, его версию, а также операционную систему, на которой этот клиент работает.

Refer - Используется для указания того, откуда поступил текущий запрос. Например, если вы решите перейти по какой-нибудь ссылке в этой статье, то вероятнее всего к запросу будет добавлен заголовок Refer: https://selectel.ru

Accept - Позволяет указать, какой тип медиафайлов принимает клиент. В данном заголовке могут быть указаны несколько типов, перечисленные через запятую (‘ , ‘). А для указания того, что клиент принимает любые типы, используется следующая последовательность — */*.

Cookie - Данный заголовок может содержать в себе одну или несколько пар «Куки-Значение» в формате cookie=value. Куки представляют собой небольшие фрагменты данных, которые хранятся как на стороне клиента, так и на сервере, и выступают в качестве идентификатора. Куки передаются вместе с запросом для поддержания доступа клиента к ресурсу. Помимо этого, куки могут использоваться и для других целей, таких как хранение пользовательских предпочтений на сайте и отслеживание клиентской сессии. Несколько кук в одном заголовке могут быть перечислены с помощью символа точка с запятой (‘ ; ‘), который  используется как разделитель.

Authorization - Используется в качестве еще одного метода идентификации клиента на сервере. После успешной идентификации сервер возвращает токен, уникальный для каждого конкретного клиента. В отличие от куки, данный токен хранится исключительно на стороне клиента и отправляется клиентом только по запросу сервера. Существует несколько типов аутентификации, конкретный метод определяется тем веб-сервером или веб-приложением, к которому клиент обращается за ресурсом.



Тело запроса

Завершающая часть HTTP-запроса — это его тело. Не у каждого HTTP-метода предполагается наличие тела. Так, например, методам вроде GET, HEAD, DELETE, OPTIONS обычно не требуется тело. Некоторые виды запросов  могут отправлять данные на сервер в теле запроса: самый распространенный из таких методов — POST.



Ответы HTTP

HTTP-ответ является сообщением, которое сервер отправляет клиенту в ответ на его запрос. Его структура равна структуре HTTP-запроса: стартовая строка, заголовки и тело.



Строка статуса (Status line)

Стартовая строка HTTP-ответа называется строкой статуса (status line). На ней располагаются следующие элементы:

1 - Уже известная нам по стартовой строке запроса версия протокола (HTTP/2 или HTTP/1.1).

2 - Код состояния, который указывает, насколько успешно завершилась обработка запроса.

3 - Пояснение — короткое текстовое описание к коду состояния. Используется исключительно для того, чтобы упростить понимание и восприятие человека при просмотре ответа.
--
HTTP/1.1 200 OK 
----



Коды состояния и текст статуса

Коды состояния HTTP используются для того, чтобы сообщить клиенту статус их запроса. HTTP-сервер может вернуть код, принадлежащий одной из пяти категорий кодов состояния:

Категория - описание - 

1xx - Коды из данной категории носят исключительно информативный характер и никак не влияют на обработку запроса.

2xx - Коды состояния из этой категории возвращаются в случае успешной обработки клиентского запроса.

3xx - Эта категория содержит коды, которые возвращаются, если серверу нужно перенаправить клиента.

4xx - Коды данной категории означают, что на стороне клиента был отправлен некорректный запрос. Например, клиент в запросе указал не поддерживаемый метод или обратился к ресурсу, к которому у него нет доступа.

5xx - Ответ с кодами из этой категории приходит, если на стороне сервера возникла ошибка.



Полный список кодов состояния доступен в спецификации к протоколу, ниже приведены только самые распространенные коды ответов:

Категория - описание - 

200 OK - Возвращается в случае успешной обработки запроса, при этом тело ответа обычно содержит запрошенный ресурс.

302 Found - Перенаправляет клиента на другой URL. Например, данный код может прийти, если клиент успешно прошел процедуру аутентификации и теперь может перейти на страницу своей учетной записи.

400 Bad Request - Данный код можно увидеть, если запрос был сформирован с ошибками. Например, в нем отсутствовали символы завершения строки.

403 Forbidden - Означает, что клиент не обладает достаточными правами доступа к запрошенному ресурсу. Также данный код можно встретить, если сервер обнаружил вредоносные данные, отправленные клиентом в запросе.

500 Internal Error - Данный код возвращается сервером, когда он не может по определенным причинам обработать запрос.



Помимо основных кодов состояния, описанных в стандарте, существуют и коды состояния, которые объявляются крупными сетевыми провайдерами и серверными платформами.



Заголовки ответа

Response Headers, или заголовки ответа, используются для того, чтобы уточнить ответ, и никак не влияют на содержимое тела. Они существуют в том же формате, что и остальные заголовки, а именно  «Имя-Значение» с двоеточием (:) в качестве разделителя.

Ниже приведены наиболее часто встречаемые в ответах заголовки:

Категория - Пример - Описание - 

Server - Server: ngnix - Содержит информацию о сервере, который обработал запрос. 

Set-Cookie - Set-Cookie:PHPSSID=bf42938f - Содержит куки, требуемые для идентификации клиента. Браузер парсит куки и сохраняет их в своем хранилище для дальнейших запросов.

WWW-Authenticate - WWW-Authenticate: BASIC realm=»localhost» - Уведомляет клиента о типе аутентификации, который необходим для доступа к запрашиваемому ресурсу.



Тело ответа

Последней частью ответа является его тело. Несмотря на то, что у большинства ответов тело присутствует, оно не является обязательным. Например, у кодов «201 Created» или «204 No Content» тело отсутствует, так как достаточную информацию для ответа на запрос они передают в заголовке.



Безопасность HTTP-запросов, или что такое HTTPs

HTTP является расширяемым протоколом, который предоставляет огромное количество возможностей, а также поддерживает передачу всевозможных типов файлов. Однако, вне зависимости от версии, у него есть один существенный недостаток, который можно заметить если перехватить отправленный HTTP-запрос -  данные передаются в открытом виде. HTTP сам по себе не предоставляет никаких средств шифрования.

HTTPs (HyperText Transfer Protocol, secure) является расширением HTTP-протокола, который позволяет шифровать отправляемые данные, перед тем как они попадут на транспортный уровень. Данный протокол по умолчанию использует порт 443.

Если мы перехватим не HTTP , а HTTPs-запрос, то не увидим здесь ничего интересного.

Данные передаются в едином зашифрованном потоке, что делает невозможным получение учетных данных пользователей и прочей критической информации средствами обычного перехвата.

Если хотите подробнее узнать о деталях работы протокола, читайте статью в нашем блоге - 
https://selectel.ru/blog/http-https/



Как отправить HTTP-запрос и прочитать его ответ 

Теория это, конечно, отлично, но ничего так хорошо не закрепляет материал, как практика

Мы рассмотрим несколько способов, как написать HTTP-запрос в браузер, послать HTTP-запрос на сервер и получить ответ:
1 - Инструменты разработчика в браузере. 
2 - Утилита cURL.



Инструменты разработчика

Основной программой на наших устройствах, которая работает с HTTP-протоколом, в большинстве случаев является браузер. Помимо обычных пользователей, с браузерами часто работают и разработчики веб-приложений. Именно их инструментами мы воспользуемся для работы с запросами и ответами.

По нажатию комбинации клавиш [Ctrl+Shift+I] или просто [F12] в подавляющем большинстве современных браузеров у нас откроется окно инструментов разработчика, которая представляет собой панель с несколькими вкладками. Нужная нам вкладка обычно называется Network. Перейдем в нее, а в адресной строке введем URL того сайта, на который хотим попасть. В качестве примера воспользуемся сайтом блога Selectel — https://selectel.ru/blog/.

После нажатия Enter сайт начнет загружаться, а открытая вкладка Network — заполняться различными элементами, начиная все больше напоминать приборную панель самолета.

Не спешите пугаться. Это всего лишь список ресурсов, которые нужны для правильного отображения и работы сайта.

Нажав на любой из них, мы можем увидеть детали обработки отправленного запроса

В данном запросе, например:
- URL, к которому было совершено обращение — https://selectel.ru/blog,
- Метод, который был использован в запросе — GET,
- И в качестве кода возврата сервер вернул нам страницу с кодом статуса — 200 OK 



После запуска утилита выполняет: 
- подключение к серверу, 
- самостоятельно разрешает все вопросы, необходимые для отправки запроса по HTTPs, 
- отправляет запрос, содержимое которого мы можем видеть благодаря флагу -v,
- принимая ответ от сервера, отображает его в командной строке «как-есть».  

Помимо этого, у данной утилиты есть огромное количество опций, которые предоставляют возможности по детальной настройке отправляемых запросов. Все эти возможности и делают ее такой популярной у веб-разработчиков и других специалистов, которым приходится работать с протоколом HTTP.

HTTP представляет собой расширяемый протокол прикладного уровня, на котором работает весь веб-сегмент интернета.



******************************************

неделя 2 - день 6 (29.08.2025) - 

API - 
https://habr.com/ru/articles/464261/

=















