
telegram - избранное - 19.08.2025 

проходить - по 1 теме в день 



******************************************

ПОЛЕЗНЫЕ МАТЕРИАЛЫ - 

шпаргалка для тестировщиков - 
https://docs.google.com/spreadsheets/d/1YM8ey2VNZ63q-IQxQoitro7zNN_rcOfsUB-wCi_hMCY/edit?gid=38461779#gid=38461779

фундаментальная теория тестирования - 
https://habr.com/ru/articles/549054/

QA библия - 
https://vladislaveremeev.gitbook.io/qa_bible

бесплатный крутой курс по python -
https://stepik.org/course/67/promo

лучший курс по алгоритмам на python -
https://www.youtube.com/playlist?list=PLRDzFCPr95fK7tr47883DFUbm4GeOjjc0

роадмап тестировщика -
https://miro.com/app/board/uXjVOsbBpjE=/

roadmap по python -
https://habr.com/ru/articles/725930/



******************************************

неделя 1 - день 1 (18.08.2025) - 

виды компаний - 
https://www.youtube.com/watch?v=t6mQkEa4O90

виды IT компаний и специфика работы в них для тестировщика -

1 - продуктовые IT компании - сами разрабатывают  

2 - аутсорсинговые IT компании - предоставляют в аренду свой персонал 

3 - аутстаффинговые IT компании - в отличие от аутсорса, отвечает только за свой квалифицированный персонал, но не берет на себя обязательства по успешности проекта заказчика 

4 - стартапы - разрабатывают свой продукт 

Чем отличается работа тестировщика в разных IT компаниях?

- требования к тестировщику
- ценность роли тестировщика и процесса тестирования 
- наличие тестовой документации 
- экспертность команды по тестированию 
- возможность роста и уровень ЗП 



******************************************

неделя 1 - день 2 (19.08.2025) - 

команда разработки - 
https://habr.com/ru/articles/695944/

Стандартный список ролей -
- аккаунт менеджер 
- продакт менеджер 
- проджект менеджер
- менеджер по продажам (сейлз)
- архитектор ПО 
- бизнес аналитик
- системный аналитик 
- технический писатель 
- проектировщик (макеты интерфейса)
- дизайнер (внешний вид продукта)
- фронтенд разработчик (верстальщик)
- бекэнд разработчик (или фулстек)
- тестировщик 
- локализатор (переделывает приложение под другие языки, страны)
- тимлид 



******************************************

неделя 1 - день 3 (20.08.2025) - 

цикл разработки по -
https://testengineer.ru/sdlc/

SDLC (Software Development Life Cycle) - последовательность этапов разработки -
- идея 
- сбор требований и анализ 
- дизайн 
- разработка 
- тестирование 
- деплой 
- поддержка

В общем виде SDLC состоит из 6 этапов: 
- Планирование
- Анализ
- Дизайн
- Разработка и тестирование
- Имплементация (деплой)
- Поддержка (обслуживание)

модели SDLC -
- водопадная (каскадная)
- гибкие методологии 
- v-модель 
- интерактивная и инкрементальная 
- эволюционного прототипирования 
- спиральная 



******************************************

неделя 1 - день 4 (21.08.2025) - 

словарь itшника -
https://docs.google.com/document/d/192vMjZjdZX9IIXiHSN2UH8ZxKcKDCAWnBZIltK4Hdvw/edit?tab=t.0#heading=h.8i6o3gxucuuy

+++



******************************************

неделя 1 - день 5 (22.08.2025) - 

методологии разработки - 
https://habr.com/ru/companies/edison/articles/269789/

+++



******************************************

неделя 1 - день 6 (23.08.2025) - 

agile - 
https://habr.com/ru/companies/edison/articles/313410/

+++



******************************************

неделя 1 - день 7 (24.08.2025) - 

scrum -
https://www.youtube.com/watch?v=bv4L_32J-5A

scrum - это фреймворк agile для гибкого управления проектами 

итерационная модель - основополагающая в scrum 

в водопадной модели невозможно вернутся на предыдущий этап, приходится начинать всё с начала - в scrum это возможно, и можно изменять требования 

agile-манифест - 4 основопологающие ценности - 
- люди и взаимодействие важнее процессов и инструментов 
- рабочий продукт важнее исчерпывающей документации 
- сотрудничество с заказчиком важнее согласования условий контракта 
- готовность к изменениям важнее следования первоначальному плану 

scrum = фреймворк :
1 - scrum команда 
2 - события 
3 - артефакты 
4 - метрики 

scrum - не советует создавать команды численностью более 9 человек (разработчики, которые решают что будем делать на проекте)

разработчик тоже несет ответственность за баг в продукте (коллективная ответственность)

scrum master - обучение и понимание scrum членами команды 



спринт - отрезок 2-4 недели -

- планирование спринта - выбираем из бэклога продукта что мы возьмем для данного спринта 

- ежедневный дейлик (митинг) - примерно 15 минут - что делал вчера, что планируешь делать сегодня, какие есть трудности, проблемы (вчера я писал тест-кейс для такой-то юзерстори, сегодня я буду писать тест-кейс для такой-то юзерстори, мне не понятно как рабработчики будут реализовывать такую-то юзерстори, хочу сегодня связаться с разработчиком и это выяснить)

- подведение итогов спринта (ретроспектива) - 
    - что шло хорошо в спринте 
    - какие проблемы были в спринте 
    - как можно улучшить работу 
    - идеи по ходу ретроспективы 



пользовательская история - описание чего-то, что система должна делать для пользователя (как новый пользователь в системе я хочу купить телефон, чтобы порадовать себя)

стори-поинт - единица оценки юзер-стори (пользовательских историй) 



******************************************

неделя 2 - день 1 (25.08.2025) - 

rest - 
https://testengineer.ru/rest/ 

REST (Representational State Transfer) — это архитектурный стиль, используемый при разработке распределенных систем, веб-сервисов и API (Application Programming Interface). Он определяет набор принципов и ограничений для создания масштабируемых, гибких и легко поддерживаемых систем.



Основные принципы REST:

1 - Клиент-серверная архитектура: В REST-архитектуре существует четкое разделение между клиентом (который инициирует запросы) и сервером (который предоставляет ресурсы и обрабатывает запросы). Это позволяет независимо изменять и развивать обе стороны без влияния на другую

2 - Без состояния (Stateless): Каждый запрос от клиента к серверу должен содержать всю необходимую информацию для обработки этого запроса. Сервер не хранит информацию о состоянии клиента между запросами. Это позволяет легко масштабировать серверную часть, так как каждый запрос обрабатывается независимо

3 - Кэширование: REST поддерживает механизм кэширования, позволяющий клиентам сохранять локальные копии ответов сервера. Это улучшает производительность, снижает нагрузку на сервер и улучшает пользовательский опыт

4 - Единообразие интерфейса: REST определяет универсальный интерфейс, состоящий из четырех основных методов HTTP: GET (получение ресурса), POST (создание нового ресурса), PUT (обновление ресурса) и DELETE (удаление ресурса). Эти методы позволяют управлять ресурсами на сервере

5 - Слои: REST позволяет использовать промежуточные слои (например, прокси-серверы или кэши), которые могут улучшать безопасность, масштабируемость и производительность системы



RESTful API (RESTful Application Programming Interface) — это API, разработанное с использованием принципов REST. Оно предоставляет доступ к ресурсам и операциям через стандартные методы HTTP. RESTful API широко используется в веб-разработке для создания взаимодействия между клиентскими приложениями и серверами, обмена данными и выполнения операций над ресурсами



Различия между REST и SOAP - 
Во-первых SOAP — это протокол, а REST — архитектурный стиль.

Лучше сравнивать реализации:
- SOAP: XML поверх SOAP через HTTP
- RESTful: JSON через HTTP



******************************************

неделя 2 - день 2 (26.08.2025) - 

soap - 
https://testengineer.ru/soap/

SOAP (Simple Object Access Protocol) — это протокол обмена структурированными сообщениями в формате XML (eXtensible Markup Language) между клиентом и сервером. SOAP используется для создания веб-служб (web services), которые обеспечивают взаимодействие между различными приложениями и платформами.

SOAP был широко использован в прошлом для интеграции различных систем и веб-служб. Однако, в последние годы, многие разработчики перешли на использование более легковесных и простых в использовании протоколов, таких как REST.

Основные характеристики SOAP:

1 - XML-основа: SOAP использует XML для кодирования структурированных данных в сообщениях. XML обеспечивает гибкость и расширяемость для передачи различных типов данных.

2 - Протокол независимый: SOAP не привязан к конкретному протоколу передачи данных и может использовать различные протоколы для отправки сообщений, такие как HTTP, SMTP и другие.

3 - Структурированные сообщения: SOAP сообщения состоят из заголовков (headers) и тела (body). Заголовки могут содержать информацию о безопасности, маршрутизации, версии протокола и другие метаданные. Тело содержит фактические данные, передаваемые между клиентом и сервером.

4 - Операции и методы: SOAP определяет операции, которые можно вызвать на удаленном сервере, и методы, которые могут быть выполнены над ресурсами. Он использует специальный язык описания веб-службы (WSDL — Web Services Description Language) для описания доступных операций и формата сообщений.

5 - Протокол с высоким уровнем абстракции: SOAP обеспечивает высокий уровень абстракции, что позволяет разработчикам скрыть детали взаимодействия и реализации от клиентов, фокусируясь на логике бизнес-операций.



******************************************

неделя 2 - день 3 (27.08.2025) - 

монолит - 
https://www.youtube.com/watch?v=wypO96zubGc

=
















