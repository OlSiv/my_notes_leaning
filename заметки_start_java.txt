
https://stepik.org/90684

https://stepik.org/course/90684/promo 



Repl.it — это веб-сервис, где можно писать и запускать код прямо в браузере, ничего не устанавливая к себе на компьютер. Сервис умеет работать с Python, JavaScript, HTML, CSS -
-
Repl.it
pomo24
a........!24



полигон для проверки кода, типа онлайн компилятора - 
https://stepik.org/lesson/491110/step/1?unit=482404

Если степиковский эмулятор подтормаживает (бывает система загружена), то прочие площадки выполнения кода:

repl.it -
https://replit.com/languages/java10

онлайн компилятор java - 
https://www.online-java.com/

Gitpod -
https://www.gitpod.io/docs/quickstart/java#java-quickstart

Codinground -
https://www.tutorialspoint.com/compile_java_online.php

Codeanywhere -
https://codeanywhere.com/

TryItOnline -
https://tio.run/#java-jdk

myCompiler -
https://www.mycompiler.io/new/java

JDoodle -
https://www.jdoodle.com/online-java-compiler-ide/



Сложно оценивать этот курс, как для начинающих, но он мне очень помог, поэтому вот моя история: у меня уже были пройдены курсы по Python, на одном из собеседований на автотестировщика я прошел тестовое задание и меня пригласили на учебный курс и несмотря на том, что я знаю только Python, условие было - тесты пишем на Java, на мое удивление ответ был прост "У тебя 2 недели - выучишь".
Я прошел этот курс за 2 недели и мне его полностью хватило, чтобы освоить всю программу курса по QA, за что я очень благодарен создателем этого курса.



******************************************

--
import java.util.Scanner;

class MyNumber {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int x = sc.nextInt(), y = sc.nextInt();       
       int myVar = x + y;
       System.out.print(myVar);
   }
}
----

2.1 Знакомство

Java - это современный язык программирования высокого уровня, разработанный в начале 1990-х годов компанией Sun Microsystems и в настоящее время принадлежащий Oracle.

Java не зависит от платформы, а это значит, что вам нужно написать программу только один раз, чтобы иметь возможность запускать ее на нескольких различных платформах!
Java портативна, надежна и динамична, с возможностью соответствовать потребностям практически любого типа приложений.

Java стабильно входит в топ-3 самых популярных языков программирования в мире, поэтому имеет огромное сообщество разработчиков по всему миру.

--
class MyClass {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
----

Программа на Java - это совокупность объектов, которые взаимодействуют через вызов друг друга. Таким образом, на практике программа состоит из большого количества файлов с расширением .java, расположенных в каталоге программы.

Каждый файл представляет собой отдельный класс. Наименование класса должно начинаться с заглавной буквы и строго совпадать с названием файла.

Если посмотреть на пример выше, то, чтобы запустить его на компьютере, а не в песочнице Степик, нужно поместить код в файл с именем MyClass.java. Так как наша программа простая, она будет состоять всего из одного класса (файла). В больших проектах классов сотни и тысячи.

Давайте немного систематизируем. Чтобы терминология была более понятна, рассмотрим простой пример - автомобиль.

1. Класс.

В Java каждая исполняемая строка кода должна находиться внутри определённой группы команд, которая называется классом. Можно сказать, что класс - это шаблон, описывающий поведение объекта. В нашем примере мы назвали класс MyClass. Содержимое класса помещается внутри фигурных скобок {}.

В нашем примере с автомобилем класс - это чертёж, то есть, абстрактный образец, по которому можно собрать конкретный автомобиль.  

2. Метод.

Внутри класса у каждой программы есть точка входа, которой является метод, называющийся main. Содержимое метода также находится внутри фигурных скобок. В целом, фигурные скобки используются во многих языках программирования для выделения групп команд, функций или методов. Такое выделение может показаться неудобным (особенно тем, кто программирует на Python или подобных языках), однако в реальной разработке может быть гораздо функциональнее, чем другие способы выделения. 

Методы описывают поведение объекта внутри класса. Класс может содержать несколько методов, но главный метод main - обязательно..

В нашем примере с автомобилем методы - это действия, которые может выполнять автомобиль, например "ехать вперёд", "открыть дверь", "включить габариты".

3. Объект.

Объект - это экземпляр класса. В нашем примере это готовый конкретный автомобиль. Подобно тому, как по одним и тем же чертежам может быть создано множество автомобилей, внутри класса может быть создано множество объектов класса.

4. Переменные экземпляра.

Переменные экземпляра - это уникальный набор характеристик объекта. Состояние объекта передаётся значениями переменных. Грубо говоря, конкретный автомобиль имеет цвет, размеры, грузоподъёмность, в данный момент времени может ехать, а может стоять и т.д.



Очень сильно помогает понять принципы ООП - Вайсфельд "Объектно-ориентированное мышление". Мне помогло - начал как раз читать недавно. Есть в интернетах



Метод main -

Чтобы наша программа заработала, метод main должен выглядеть в точности так:
--
public static void main(String[] args)
----

Вот значение ключевых слов, используемых в этом выражении. Для тех, кто только приступает к изучению программирования, нижеизложенное может показаться непонятным, в этом случае можно пока пропустить этот шаг.

public - это модификатор доступа, означающий, что ограничений на доступ к данному методу нет. В каждом исходном файле может быть только один метод с модификатором public.

static - означает, что метод может работать без образования экземпляра класса. Например, если мы хотим посчитать высоту конкретного здания, то нам понадобится это здание (это и есть экземпляр класса), иначе будет нечего измерять. Если же требуется  вывести на печать фразу "Hello, World!", то ничего такого нам не потребуется.

void - означает, что метод ничего не возвращает в результате работы. Обратите внимание, что "не возвращает" не значит, что "не выводит" или "ничего не делает"! 

main - это имя нашего метода.

Например, следующий код объявляет метод test, который ничего не возвращает и не имеет параметров:
--
void test()
----

Параметры метода объявляются в круглых скобках, следующих за именем метода. Для main это массив строк, называемых args.



Вывод на консоль -

Вывод на консоль в Java осуществляется командами 
--
System.out.println()
System.out.print()
----

Первая команда после вывода переносит курсор на следующую строку, а вторая нет. Обратите внимание, что команда начинается с большой буквы.

Теперь напишем содержание основного метода main нашей программы, которая должна печатать приветствие:
--
{
   System.out.println("Hello World!");
}
----

Разберём подробно.

println - метод, печатающий строку на экране. То, что нужно напечатать, заключается в круглые скобки, следующие после наименования метода.

System - это класс

out - поток, используемые для доступа к методу println.

Каждая строка кода должна заканчиваться точкой с запятой, а весь код, заключённый в методе (или классе, или других структурах управления) всегда помещается внутрь фигурных скобок.

Синтаксис Java довольно строг и поначалу непонятен, однако именно эта строгость и последовательность даёт много преимуществ.



Точка с запятой

Можно передать методу println любой другой текст в качестве параметра и вывести его на печать. Текст помещается в двойные кавычки -
--
class MyClass {
    public static void main(String[] args) {
        System.out.println("Я изучаю Java!");
    }
}
----
Я изучаю Java!
------

Можно выводить результат выражения, заключённого в скобки метода println. Выведем последовательно несколько слов:
--
System.out.println("Я" + "изучаю" + "Java"); //ЯизучаюJava
System.out.println("Я" + " " + "изучаю" + " " + "Java"); //Я изучаю Java
----

Чтобы текст не сливался, между словами необходимо вставлять пробелы, которые являются такими же символами, что и прочие.

Как уже было отмечено ранее, все операторы кода в обязательном порядке заканчиваются точкой с запятой. Если забыть хоть одну, программа выдаст ошибку.

Однако важно помнить, что точка с запятой НЕ ставится после структур, помещённых в фигурные скобки. 



******************************************

2.2 Комментарии

Цель включения комментариев в код состоит в том, чтобы объяснить, что делает код.
Java поддерживает как однострочные, так и многострочные комментарии. Все символы, которые появляются в комментарии, игнорируются компилятором Java.

Однострочный комментарий начинается с двух косых черт и продолжается до конца строки.
--
// Это однострочный комментарий
x = 5; // Это тоже однострочный комментарий, расположенный после кода
----

Добавление комментариев при написании кода является хорошей практикой, поскольку они дают разъяснения и понимание, когда вам нужно вернуться к нему, а также для других, кому, возможно, потребуется его прочитать.



Многострочный комментарий

Java также поддерживает комментарии, охватывающие несколько строк.
Вы начинаете этот тип комментария со знака "слэш" (/), за которой следует звездочка, и заканчиваете его звездочкой, за которой следует слэш.
--
/* Это
многострочный
комментарий */
----

Обратите внимание, что Java не поддерживает вложенные многострочные комментарии.
Однако вложить однострочные комментарии в многострочный можно -
--
/* Это многострочный комментарий.

    // Это однострочный комментарий внутри многострочного.

Не знаю, зачем это нужно, но вдруг пригодится? */
----

В приведённом примере отступы и пустые строки приведены для удобства, а комментарии могут иметь любое форматирование.



Документационные комментарии (Javadoc)

Комментарии к документации - это специальные комментарии, которые имеют вид многострочных комментариев, с той разницей, что они генерируют внешнюю документацию исходного кода. Они начинаются с прямой косой черты, за которой следуют две звездочки, и заканчиваются звездочкой, за которой следует прямая косая черта. 
--
/** Это документационный комментарий */

/** Это тоже
документационный комментарий */
----

Javadoc - это инструмент, который поставляется вместе с JDK и используется для создания документации Java-кода в формате HTML из исходного кода Java, который имеет необходимую документацию в предопределенном формате.

Когда комментарий документации начинается с более чем двух звездочек, Javadoc предполагает, что вы хотите создать "коробку" вокруг комментария в исходном коде. Он просто игнорирует лишние звездочки.
--
/*******************

Здесь начало метода 

*********************/
----
                 
При таком оформлениии во внешнюю документацию попадёт только текст "Здесь начало метода".



******************************************

2.3 Переменные

Переменные хранят данные для обработки.
Переменной присваивается имя (или идентификатор), например площадь, возраст, рост и т. п. Имя однозначно идентифицирует каждую переменную, присваивая ей значение или извлекая сохраненное значение, когда это нужно.



Переменные имеют типы. Некоторые примеры:

- int: для целых чисел, таких как 123 и -456. На самом деле, типов для целых чисел в Java несколько, но об этом поговорим позже.

- float  и double: для чисел с плавающей запятой или вещественных чисел, таких как 3.1416, -55.66. Эти типы данных имеют определённые различия, но в целом очень похожи. Мы будем использовать double. Во всех языках программирования целая часть отделяется от дробной точкой, а не запятой.

- String: для таких текстов, как "Привет" или "Доброе утро!". Текстовые строки заключаются в двойные кавычки. Мы уже имели дело с этим типом данных, когда выводили на печать приветствие "Hello, World!".



Перед тем, как использовать переменную, её необходимо объявить. Затем можно присвоить какое-нибудь значение.
--
String name;
name = "Ivan";
----
                  
Можно объявить переменную определенного типа и сразу присвоить ей значение.
--
String name = "Ivan";
----
- Здесь мы создали переменную, дали ей имя name, задали её тип - String и присвоили ей значение "Ivan". Если попытаться использовать переменную до того, как она объявлена, программа не скомпилируется (выдаст ошибку).

Важно отметить, что в Java переменная связана с типом и способна хранить только значения этого конкретного типа. Например, переменная int может хранить целочисленные значения, такие как 123; но она не может хранить действительные числа, такие как 12.34, или тексты, такие как "Привет".

//Целочисленные

byte b = 3; //от -128 до 127. Хранит 8 бит, т.е. 2^8=256 значений.

short sh = 257; //от -32768 до 32767. Хранит 16 бит. Мне лень считать, но это 1024 * 64 значений

char ch = 14; //Хранит беззнаковое число - символ UTF-16 (буквы, цифры)

int i = 35791; //от -2147483648 до 2147483647. Хранит 32 бита. Или 1024 * 1024 * 1024 * 4. Многовато

long l = 24680246802; //от  -9223372036854775808L до 9223372036854775807L. Хранит 64 бит. Т.е. много



//С плавающей точкой

float f = 3.14f; //От 1.4e-45f до 3.4e+38f. Хранит 32 бит. Требует суффикс f в конце (для float)

double d = 9.8; //От 4.9e-324 до 1.7e+308. Хранит 64 бит. Двойная точность. Суффикс не требуется



//Логический тип
boolean boo = true; //Значения: true и false. 



//Остальное - ссылки. 



Примеры объявления переменных
--
class MyClass {
    public static void main(String[] args) {
        String name = "Ivan";
        int age = 25;
        double score = 15.9;
        char group = 'Z';
    }
}
----



Тип переменной char используется для хранения одного символа. В отличие от строк, значение переменной типа char помещается в одинарные кавычки.

Кроме того, есть ещё один очень важный тип данных - логический (булевый), или boolean. Переменные этого типа могут принимать только два значения: true или false. 
--
boolean atHome = true;
----



Рассмотрим пример. Пусть у нас есть две переменные:
--
int x1 = 100;
int x2 = 90;
----
                  
Мы видим, что одна переменная больше другой, таким образом, выражение x1 > x2 является истинным, а x1 < x2 - ложным.

Результат сравнения можно записать в переменную.
--
int x1 = 100;
int x2 = 90;
boolean f1 = x1 > x2;
boolean f2 = x1 < x2;
----
- В приведённом примере значение переменной f1 будет равно true, а значение переменной f2 - false.

 

Также иногда удобно объявлять несколько переменных одного и того же типа в одной строке через запятую:
--
int a = 42, b = 11;
----
- Обе объявленные переменные будут иметь целочисленный тип.



Чтобы вывести значение переменной на печать, нужно передать её в метод println:
--
int x = 42;
String y = "Значение переменной x равно ";
int z = 58;
System.out.println(x);              // 42
System.out.println(x + z);          // 100
System.out.println("x = " + 42);    // x = 42
System.out.println(y + x);          // Значение переменной x равно 42
System.out.println(y + x + z);      // Значение переменной x равно 4258
System.out.println(y + (x + z));    // Значение переменной x равно 100
----
- Внимательно рассмотрите пример. Если мы передаём два числа - метод println их складывает. Если же мы передаём строку и число, выражение автоматически приводится к строчному типу. В то же время, соблюдается обычная очерёдность операций - вначале производятся операции, заключённые в скобки.



Часто бывает нужно вывести значение нескольких переменных в одну строку. Для этого воспользуемся тем же способом и приведём все данные в строковый формат.
--
int x = 42;
int y = 84;
System.out.println(x + " " + y);    // 42 84
----



******************************************

2.4 Ввод данных 

В то время как Java предоставляет множество различных методов для пользовательского ввода, объект Scanner является наиболее распространенным и, возможно, самым простым в реализации. Импортируйте класс Scanner для использования объекта Scanner, как показано здесь:
--
import java.util.Scanner; 
----

Чтобы использовать класс Scanner, создайте экземпляр класса, используя следующий синтаксис:
--
Scanner sc = new Scanner(System.in);
----

Теперь вы можете читать различные виды входных данных, которые вводите. При этом имя объекта можно задать произвольно (не обязательно sc).
Вот некоторые методы, доступные через класс Scanner:
--
Ввести объект int: nextInt()
Ввести объект float: nextFloat()
Ввести объект double: nextDouble()
Ввести объект boolean: nextBoolean()
Ввести строку целиком: nextLine()
Ввести слово (считывается до первого пробела): next()
----

Пример программы, используемой для получения пользовательского ввода:
--
import java.util.Scanner;

class MyClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println(sc.nextLine());
    }
}
----
- Эта программа  будет ждать, пока пользователь введет что-то, а затем выведет на печать полученную строку. Работает она следующим образом: сначала мы инициируем новый экземпляр класса Scanner и присваиваем ему имя sc. Затем даём задание этому экземпляру считать строку командой sc.nextLine(), после чего полученная строка поступает на поток вывода. 

Чтобы получить несколько объектов данных с входящего потока, достаточно одного объекта сканера. Единственный сканер может обрабатывать входные данные различных типов:
--
import java.util.Scanner;

class MyClass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int x = sc.nextInt();
        double y = sc.nextDouble();
        String s = sc.nextLine();
    }
}
----

После использования сканер желательно закрыть командой sc.close(). На потоке System.in незакрытый сканер чаще всего ни на что не влияет, однако, в реальной практике, при работе с другими потоками (файл, драйвер, сетевой ресурс и т.д.) незакрытый сканер может привести к утечке памяти. 



Если кому-то непонятно, здесь более менее хорошо рассказали про scanner -
https://java-master.com/%D0%BA%D0%BB%D0%B0%D1%81%D1%81-scanner-%D0%B2-java



******************************************

2.5 Операторы

https://stepik.org/lesson/468802/step/1?unit=459622

Java предоставляет широкий набор операторов для работы с переменными. Значение, используемое по обе стороны от оператора, называется операндом.
Например, в приведенном ниже выражении числа 6 и 3 являются операндами оператора сложения - 
--
int x = 6 + 3;
----

Основные арифметические операторы:
+	Сложение
-	Вычитание
*	Умножение
/	Деление
%	Остаток от деления

Использование арифметических операторов в Java  идентично их использованию в алгебраических выражениях.



Сложение -
Оператор сложения + складывает вместе два значения, например, две константы, константу и переменную или переменную и переменную. Вот несколько примеров сложения:
--
int sum1 = 50 + 10; 
int sum2 = sum1 + 66; 
int sum3 = sum2 + sum2;
----
    

              
Вычитание -
Аналогичным образом, оператор вычитания - вычитает один операнд из другого:
--
int sum1 = 1000 - 10;
int sum2 = sum1 - 5;
int sum3 = sum1 - sum2;
----



Умножение -
--
int num1 = 1000 * 2;
int num2 = num1 * 10;
int num3 = num1 * num2;
----
   

               
Деление -
--
int num1 = 1000 / 5;
int num2 = num1 / 2;
int num3 = num1 / num2;
----


Если умножение и деление производятся с данными целочисленного типа. то и результат будет целочисленным, а в случае работы с числами с плавающей точкой (float или double) - результат также будет числом с плавающей точкой. 

В том случае, если одно из чисел будет целочисленного типа, а второе - числом с плавающей точкой, то результат также будет числом с плавающей точкой. Это особенно важно в случае деления:

- если мы делим одно число типа int на другое, также типа int, то это будет целочисленное деление. К примеру, если разделить 15 на 4, результатом будет 3.

- если одно или оба числа имеют тип float или double, то результатом будет число с плавающей точкой:
--
15 / 4 = 3;
15.0 / 4 = 3.75;
15 / 4.0 = 3.75;
15.0 / 4.0 = 3.75;

15 / 3 = 5;
15.0 / 3 = 5.0;
15 / 3.0 = 5.0;
----



Остаток от деления -
Математическая операция modulo выполняет целочисленное деление одного значения на другое и возвращает остаток от этого деления.
Оператор этой операции - символ процента ( % ).
--
int myVar = 37;
int res = myVar % 5; // res = 2
----
- В примере мы делим 37 на 5. Остаток от этого деления составляет 2, это значение присваивается переменной res.



Сокращённая запись арифметических операторов -
Для экономии времени предусмотрена сокращённая запись арифметических операторов.
--
x += y;    // То же самое, что и x = x + y;
x -= y;    // То же самое, что и x = x - y;
x *= y;    // То же самое, что и x = x * y;
x /= y;    // То же самое, что и x = x / y;
x %= y;    // То же самое, что и x = x % y;
----



--
import java.util.Scanner;

class MyNumber {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int s = x % 3600 % 60;
        int m = (x % 3600) / 60;
        int h = (x % 86400) /3600;
        System.out.printf("%02d:%02d:%02d", h, m, s);
   }
}
----



рекомендую статью для понимания format:
https://javarush.ru/groups/posts/1412-formatiruem-vihvod-chisel-v-java



******************************************

2.5 Операторы

Инкремент

Оператор, называемый инкрементом, представляет собой удобный и компактный способ увеличения значения переменной на единицу. Соответственно, оператор декремента уменьшает значение переменной на единицу. Инкремент записывается с помощью двух последовательных плюсов (++), а декремент - с помощью двух последовательных минусов (--) 
--
int test = 5;
++test; // test == 6

int test = 5;
--test; // test == 4
----



Префикс и постфикс

Существуют две формы использования инкремента (декремента) - префиксная и постфиксная.
В префиксной форме оператор появляется перед операндом, в то время как в постфиксной форме оператор появляется после операнда. Давайте разберёмся, как работают эти две формы.
Префикс: инкремент увеличивает значение переменной и использует новое значение в выражении.
--
int x = 50;
int y = ++x; // x == 51, y == 51
----
- В этом примере значение переменной х сначала увеличивается на единицу с помощью инкремента, а затем это (уже увеличенное) значение присваивается переменной y.

Постфикс: значение переменной сначала используется в выражении, а уже потом увеличивается на единицу. 
--
int x = 50;
int y = x++; // x == 51, y == 50
----
                  
Точно так же работает и декремент.



































