
https://stepik.org/90684

https://stepik.org/course/90684/promo 

полигон для проверки кода, типа нолайн компилятора - 
https://stepik.org/lesson/491110/step/1?unit=482404

онлайн компилятор java - 
https://www.online-java.com/

Если степиков'ский эмулятор подтормаживает (бывает система загружена), то прочие площадки выполнения кода:

repl.it -
https://replit.com/languages/java10

Gitpod -
https://www.gitpod.io/docs/quickstart/java#java-quickstart

Codinground -
https://www.tutorialspoint.com/compile_java_online.php

Codeanywhere -
https://codeanywhere.com/

TryItOnline -
https://tio.run/#java-jdk

myCompiler -
https://www.mycompiler.io/new/java

JDoodle -
https://www.jdoodle.com/online-java-compiler-ide/



Сложно оценивать этот курс, как для начинающих, но он мне очень помог, поэтому вот моя история: у меня уже были пройдены курсы по Python, на одном из собеседований на автотестировщика я прошел тестовое задание и меня пригласили на учебный курс и несмотря на том, что я знаю только Python, условие было - тесты пишем на Java, на мое удивление ответ был прост "У тебя 2 недели - выучишь".
Я прошел этот курс за 2 недели и мне его полностью хватило, чтобы освоить всю программу курса по QA, за что я очень благодарен создателем этого курса.



******************************************

--
import java.util.Scanner;

class MyNumber {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int x = sc.nextInt(), y = sc.nextInt();       
       int myVar = x + y;
       System.out.print(myVar);
   }
}
----

2.1 Знакомство

Java - это современный язык программирования высокого уровня, разработанный в начале 1990-х годов компанией Sun Microsystems и в настоящее время принадлежащий Oracle.

Java не зависит от платформы, а это значит, что вам нужно написать программу только один раз, чтобы иметь возможность запускать ее на нескольких различных платформах!
Java портативна, надежна и динамична, с возможностью соответствовать потребностям практически любого типа приложений.

Java стабильно входит в топ-3 самых популярных языков программирования в мире, поэтому имеет огромное сообщество разработчиков по всему миру.

--
class MyClass {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
----

Программа на Java - это совокупность объектов, которые взаимодействуют через вызов друг друга. Таким образом, на практике программа состоит из большого количества файлов с расширением .java, расположенных в каталоге программы.

Каждый файл представляет собой отдельный класс. Наименование класса должно начинаться с заглавной буквы и строго совпадать с названием файла.

Если посмотреть на пример выше, то, чтобы запустить его на компьютере, а не в песочнице Степик, нужно поместить код в файл с именем MyClass.java. Так как наша программа простая, она будет состоять всего из одного класса (файла). В больших проектах классов сотни и тысячи.

Давайте немного систематизируем. Чтобы терминология была более понятна, рассмотрим простой пример - автомобиль.

1. Класс.

В Java каждая исполняемая строка кода должна находиться внутри определённой группы команд, которая называется классом. Можно сказать, что класс - это шаблон, описывающий поведение объекта. В нашем примере мы назвали класс MyClass. Содержимое класса помещается внутри фигурных скобок {}.

В нашем примере с автомобилем класс - это чертёж, то есть, абстрактный образец, по которому можно собрать конкретный автомобиль.  

2. Метод.

Внутри класса у каждой программы есть точка входа, которой является метод, называющийся main. Содержимое метода также находится внутри фигурных скобок. В целом, фигурные скобки используются во многих языках программирования для выделения групп команд, функций или методов. Такое выделение может показаться неудобным (особенно тем, кто программирует на Python или подобных языках), однако в реальной разработке может быть гораздо функциональнее, чем другие способы выделения. 

Методы описывают поведение объекта внутри класса. Класс может содержать несколько методов, но главный метод main - обязательно..

В нашем примере с автомобилем методы - это действия, которые может выполнять автомобиль, например "ехать вперёд", "открыть дверь", "включить габариты".

3. Объект.

Объект - это экземпляр класса. В нашем примере это готовый конкретный автомобиль. Подобно тому, как по одним и тем же чертежам может быть создано множество автомобилей, внутри класса может быть создано множество объектов класса.

4. Переменные экземпляра.

Переменные экземпляра - это уникальный набор характеристик объекта. Состояние объекта передаётся значениями переменных. Грубо говоря, конкретный автомобиль имеет цвет, размеры, грузоподъёмность, в данный момент времени может ехать, а может стоять и т.д.



Очень сильно помогает понять принципы ООП - Вайсфельд "Объектно-ориентированное мышление". Мне помогло - начал как раз читать недавно. Есть в интернетах



Метод main -

Чтобы наша программа заработала, метод main должен выглядеть в точности так:
--
public static void main(String[] args)
----

Вот значение ключевых слов, используемых в этом выражении. Для тех, кто только приступает к изучению программирования, нижеизложенное может показаться непонятным, в этом случае можно пока пропустить этот шаг.

public - это модификатор доступа, означающий, что ограничений на доступ к данному методу нет. В каждом исходном файле может быть только один метод с модификатором public.

static - означает, что метод может работать без образования экземпляра класса. Например, если мы хотим посчитать высоту конкретного здания, то нам понадобится это здание (это и есть экземпляр класса), иначе будет нечего измерять. Если же требуется  вывести на печать фразу "Hello, World!", то ничего такого нам не потребуется.

void - означает, что метод ничего не возвращает в результате работы. Обратите внимание, что "не возвращает" не значит, что "не выводит" или "ничего не делает"! 

main - это имя нашего метода.

Например, следующий код объявляет метод test, который ничего не возвращает и не имеет параметров:
--
void test()
----

Параметры метода объявляются в круглых скобках, следующих за именем метода. Для main это массив строк, называемых args.



Вывод на консоль -

Вывод на консоль в Java осуществляется командами 
--
System.out.println()
System.out.print()
----

Первая команда после вывода переносит курсор на следующую строку, а вторая нет. Обратите внимание, что команда начинается с большой буквы.

Теперь напишем содержание основного метода main нашей программы, которая должна печатать приветствие:
--
{
   System.out.println("Hello World!");
}
----

Разберём подробно.

println - метод, печатающий строку на экране. То, что нужно напечатать, заключается в круглые скобки, следующие после наименования метода.

System - это класс

out - поток, используемые для доступа к методу println.

Каждая строка кода должна заканчиваться точкой с запятой, а весь код, заключённый в методе (или классе, или других структурах управления) всегда помещается внутрь фигурных скобок.

Синтаксис Java довольно строг и поначалу непонятен, однако именно эта строгость и последовательность даёт много преимуществ.



Точка с запятой

Можно передать методу println любой другой текст в качестве параметра и вывести его на печать. Текст помещается в двойные кавычки -
--
class MyClass {
    public static void main(String[] args) {
        System.out.println("Я изучаю Java!");
    }
}
----
Я изучаю Java!
------

Можно выводить результат выражения, заключённого в скобки метода println. Выведем последовательно несколько слов:
--
System.out.println("Я" + "изучаю" + "Java"); //ЯизучаюJava
System.out.println("Я" + " " + "изучаю" + " " + "Java"); //Я изучаю Java
----

Чтобы текст не сливался, между словами необходимо вставлять пробелы, которые являются такими же символами, что и прочие.

Как уже было отмечено ранее, все операторы кода в обязательном порядке заканчиваются точкой с запятой. Если забыть хоть одну, программа выдаст ошибку.

Однако важно помнить, что точка с запятой НЕ ставится после структур, помещённых в фигурные скобки. 



******************************************

2.2 Комментарии

Цель включения комментариев в код состоит в том, чтобы объяснить, что делает код.
Java поддерживает как однострочные, так и многострочные комментарии. Все символы, которые появляются в комментарии, игнорируются компилятором Java.

Однострочный комментарий начинается с двух косых черт и продолжается до конца строки.
--
// Это однострочный комментарий
x = 5; // Это тоже однострочный комментарий, расположенный после кода
----

Добавление комментариев при написании кода является хорошей практикой, поскольку они дают разъяснения и понимание, когда вам нужно вернуться к нему, а также для других, кому, возможно, потребуется его прочитать.



Многострочный комментарий

Java также поддерживает комментарии, охватывающие несколько строк.
Вы начинаете этот тип комментария со знака "слэш" (/), за которой следует звездочка, и заканчиваете его звездочкой, за которой следует слэш.
--
/* Это
многострочный
комментарий */
----

Обратите внимание, что Java не поддерживает вложенные многострочные комментарии.
Однако вложить однострочные комментарии в многострочный можно -
--
/* Это многострочный комментарий.

    // Это однострочный комментарий внутри многострочного.

Не знаю, зачем это нужно, но вдруг пригодится? */
----

В приведённом примере отступы и пустые строки приведены для удобства, а комментарии могут иметь любое форматирование.



Документационные комментарии (Javadoc)

Комментарии к документации - это специальные комментарии, которые имеют вид многострочных комментариев, с той разницей, что они генерируют внешнюю документацию исходного кода. Они начинаются с прямой косой черты, за которой следуют две звездочки, и заканчиваются звездочкой, за которой следует прямая косая черта. 
--
/** Это документационный комментарий */

/** Это тоже
документационный комментарий */
----

Javadoc - это инструмент, который поставляется вместе с JDK и используется для создания документации Java-кода в формате HTML из исходного кода Java, который имеет необходимую документацию в предопределенном формате.

Когда комментарий документации начинается с более чем двух звездочек, Javadoc предполагает, что вы хотите создать "коробку" вокруг комментария в исходном коде. Он просто игнорирует лишние звездочки.
--
/*******************

Здесь начало метода 

*********************/
----
                 
При таком оформлениии во внешнюю документацию попадёт только текст "Здесь начало метода".



******************************************

2.3 Переменные






















