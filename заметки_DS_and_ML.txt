
https://s1.sharewood.co/threads/stepik-pogruzhenie-v-data-science-i-mashinnoe-obuchenie-2024.453551/

https://cloud.mail.ru/public/y6Cb/g7KcxQq2o

telegram - my_coding - 19.04.2025 

==============================================

1 - 1.1 -

Команды для установки библиотек в Python:
1. pip install numpy
2. pip install pandas
3. pip install colorama
4. pip install requests
5. pip install mysql
6. pip install matplotlib
7. pip install jupyterlab
8. pip install notebook

Библиотеки в PyPI:
1. https://pypi.org/project/Pillow/
2. https://pypi.org/project/matplotlib/
3. https://pypi.org/project/notebook/
4. https://pypi.org/project/pandas/
5. https://pypi.org/project/matplotlib/
6. https://pypi.org/project/jupyterlab/

==============================================

1 - 1.2 -

Инструменты для анализа данных в Data Science включают:

1. Python: Язык программирования, широко используемый в Data Science
благодаря его гибкости, богатому экосистеме библиотек и фреймворков,
таких как NumPy, Pandas, Scikit-learn, TensorFlow, Keras и других.

2. R: Язык программирования и среда для статистического анализа данных. Он
предлагает широкий спектр библиотек для статистического моделирования,
визуализации данных и машинного обучения, таких как ggplot2, dplyr, caret и
других.

3. SQL: Язык структурированных запросов, используемый для работы с 
реляционными базами данных. SQL позволяет извлекать, преобразовывать и
анализировать данные из баз данных.

4. Tableau: Инструмент визуализации данных, который позволяет создавать
интерактивные дашборды и отчеты для визуализации данных и их анализа.

5. Apache Spark: Распределенная платформа для обработки больших данных,
которая предлагает библиотеки для машинного обучения (MLlib), графового
анализа (GraphX) и потоковой обработки данных (Spark Streaming).

6. Jupyter Notebook: Интерактивная среда разработки, которая позволяет
комбинировать код, текст и визуализации в одном документе. Она широко
используется в Data Science для разработки и документирования
аналитических процессов

==============================================

1 - 1.3 -

# это комментарий
или
CTRL + /
или 
'''
........
'''
или 
"""
........
"""
- и в теле функции это докстринг 

В Python docstring игнорируются. Они не могут быть выполнены. Однако, когда вы добавляете docstring к модулю, функции и так далее, то данная строка становится специальным атрибутом, к которому можно получить доступ через __doc__ -
--
class Dog:
    """
    Это класс собаки.
    """

    def bark(self):
        """
        Собака лает из метода!
        """
        return True

animal = Dog()
print(animal.__doc__)
print(animal.bark.__doc__)
----
    Это класс собаки.
    

        Собака лает из метода!
------

PEP8 

Существует множество инструментов, которые можно использовать
для написания отличного кода -

pycodestyle — Проверяет, если ваш код соответствует
стандарту PEP8
https://pypi.org/project/pycodestyle/

Pylint — Инструмент для углубленного статического
тестирования кода, который находит общие проблемы в коде
https://www.pylint.org/

PyFlakes — Еще один инструмент для статического
тестирования кода
https://pypi.org/project/pyflakes/

flake8 — Обертка для PyFlakes, pycodestyle и McCabe
https://pypi.org/project/flake8/

Black — Форматировщик кода, который в основном следует
стандарту PEP8
https://black.readthedocs.io/en/stable/

Pylint, PyFlakes и flake8 кажутся мне наиболее полезными.
Black пригодится, если вы работаете в команде и хотите, чтобы
код каждого сотрудника был написан в одном формате.

Можете добавить Black в свой список инструментов форматирования
кода.

Более продвинутые IDE для Python делают определенные проверки в
режиме реального времени.

Например, PyCharm автоматически проверяет многие проблемы,
которые фиксируют эти инструменты.

WingIDE и VS Code также обеспечивают некоторую проверку кода.
Можете просто попробовать различные IDE и посмотреть, что
подойдет вам лучше всего.

==============================================

1 - 1.4 -

официальная документация python - 
1. Windows: 
https://www.python.org/downloads/windows/
2. MacOS: 
https://www.python.org/downloads/macos/
3. Other Platforms: 
https://www.python.org/download/other/

==============================================

2 - 2.1 - Установка и настройки интерпретатора Python 

https://www.python.org/downloads/

версия - от 3.10 

IDE - VSCode или PyCharm 

далее показывает как установить VSCode и PyCharm

PyCharm - 
у Вас появится следующее окно, в котором можно создать новый проект или открыть существующий

Когда установите IDE и запустите его у вас появится окошко где нужно нажать кнопку New Project

Тут нужно будет выбрать кнопку создания нового окружения. Оно изолирует ваш интерпретатор проекта от главного интерпретатора. Это полезно для тех случаев, когда вы не хотите засорять память компьютера лишними библиотеками – всё будет храниться в папке проекта

После создания проекта нажмите правой кнопкой мыши на серую папку и создайте файл Python и назовите его main.py

В нём вы будете писать свою первую программу. Запустить её можно либо по зеленой кнопке, либо через терминал, если ввести в нём python main.py

--
import hashlib

hash_object = hashlib.sha256(b'hello world')
hex_dig = hash_object.hexdigest()
print(hex_dig)
----

далее показывает код для кеширования с примерами 

==============================================

2 - 2.2 - Знакомство с консолью. Условные конструкции 

===




























































































