https://github.com/halltape/HalltapeRoadmapDE

************************************
************************************
************************************

1 - SQL с нуля до оконок - 
https://karpov.courses/simulator-sql

karpov.courses
>>>
Логин -
smnhkthre@emltmp.com
Пароль -
a........kar!
>>>

Redash - 
https://redash.public.karpov.courses/?_gl=1*1us9fps*_ga*MzcxOTI0MDY1LjE3MzY3NjMyMDg.*_ga_DZP7KEXCQQ*MTczNjkzMTE4NC42LjAuMTczNjkzMTE4NC42MC4wLjA.

Все необходимые для прохождения курса инструменты мы развернули на нашем сервере. Они находятся во вкладке Инструменты в левом верхнем углу.

Основной инструмент для работы на курсе — Redash. Подробнее о том, как с ним работать, вы узнаете в уроке Базовые запросы SQL.  

Подключение к Redash
Переходите во вкладку Инструменты и выбирайте Redash. 
Выбираем LDAP/SSO login

Заполняем поля:  
Логин: ваш email
Пароль: пароль от личного кабинета в LMS



Схема базы данных
В этом шаге хранится документация, которая поможет вам разобраться в данных. На схеме ниже показаны связи между таблицами, а ещё ниже представлено подробное описание данных.
Рекомендуем сохранить ссылку на этот шаг. Он ещё не раз вам пригодится — особенно, когда мы начнём объединять таблицы друг с другом -
https://lab.karpov.courses/learning/152/module/1762/lesson/17923/51794/244290/

Типы данных
В таблицах могут храниться разные типы данных: целые и дробные числа, текст, даты, массивы из чисел. В наших данных вы встретитесь со следующими типами:

Тип данных	
Описание	
Пример

INT	
Целое число	
id пользователя: 132

NUMERIC / DECIMAL	
Вещественное число	
Стоимость товара: 120.55

VARCHAR	
Текст	
Действие с заказом: «create_order»

DATE	
Дата с точностью до дня	
Дата рождения пользователя: 25/03/91

TIMESTAMP	
Дата с точностью до секунды	
Время регистрации в приложении: 24/08/22 01:52:24

[]	
Массив	
Список id товаров в заказе: [1, 13, 22]



Работа в Redash
В этом уроке мы начнем работать с инструментом Redash для написания SQL запросов. 

Чтобы попасть в Redash, зайдите в раздел Инструменты, или сохранить у себя ссылку -
https://redash.public.karpov.courses/?_gl=1*1us9fps*_ga*MzcxOTI0MDY1LjE3MzY3NjMyMDg.*_ga_DZP7KEXCQQ*MTczNjkzMTE4NC42LjAuMTczNjkzMTE4NC42MC4wLjA.

В предыдущем уроке мы подготовили инструкцию, как залогиниться в Redash - 
https://lab.karpov.courses/learning/152/module/1762/lesson/17931/51793/251405/

После успешного логина, чтобы начать писать запросы, нажмите на -
Create - New Query

Затем в списке доступных баз данных выберите -
Simulator SQL

запустить запрос - CTR + ENTER 

--
SELECT * FROM couriers LIMIT 20;
----

--
SELECT action, order_id, time FROM courier_actions LIMIT 20;
----

всегда ставить LIMIT (чтобы не зависла большая база)

чем более явный запрос - тем лучше (имена колонок, а не *)

ORDER BY name_colons DESK - сортировка -
--
SELECT action, order_id, time 
FROM courier_actions 
ORDER BY order_id DESC
LIMIT 20;

DESC - вверху большие внизу маленькие 
ASC (или ничего не писать) - вверху маленькие внизу большие 

запросы к БД можно писать и напрямую из командной строки терминала -
--
simulator-sql-karpov-editor=> select * from users limit 1;
----

ключевые слова - писать заглавными буквами 

redash - это целая инфраструктура, позволяет делать дашборды, настраивать алерты и т.п. 

под окном для ввода кода запросов кнопки - 

- третья слева (с молнией) - включает подсказки для запросов 

- вторая слева - автоформатирование - расставляет отступы 

- внизу кнопка с тремя точками - выгрузить результаты 

- кнопка Save справа под окном для запросов - созранить запрос - ввести название и будет сформирована интернет-ссылка на запрос - потом созраненные запросы можно объединять в дашборды 

Redash в выводе не выводит полностью секунды, хотя в БД записи храняться с секундами 

Redash в выводе округляет числа до двух знаков после запятой, но в фактическом результате нет - использовать -
--
SELECT round(10.0 / 7, 2) as res;
----
- ручное округление

--
SELECT (10.0 / 7, 2)::text;
----
- выводит как текст

--так делают комментарий в коде SQL 

ответ на задание Карпова - 
--
SELECT *
FROM courier_actions 
ORDER BY courier_id DESC
LIMIT 100;
----

нужно и важно уметь самому переводить требования на язык SQL 

Общепринятый стиль написания SQL-запросов -
https://www.sqlstyle.guide/ru/

Отформатировать свой код можно с помощью этого сервиса - 
https://codebeautify.org/sqlformatter

Правильный порядок операторов в запросе выглядит так -
SELECT -- перечисление полей результирующей таблицы
FROM -- указание источника данных
WHERE -- фильтрация данных
GROUP BY -- группировка данных
HAVING -- фильтрация данных после группировки
ORDER BY -- сортировка результирующей таблицы
LIMIT -- ограничение количества выводимых записей

для начала напишем самый простой запрос и посмотрим, как выглядит таблица products.

Чтобы вывести все записи со значениями во всех колонках, необходимо либо перечислить все колонки в операторе SELECT, либо указать после оператора специальный символ «*»:
--
SELECT column_1, column_2, ...
FROM table


SELECT *
FROM table
----
Оператор FROM всегда указывается после оператора SELECT. В обратном порядке их записывать нельзя — база данных вернёт ошибку.

Для сортировки значений по какой-либо колонке в SQL используется оператор ORDER BY с ключевыми словами ASC (по возрастанию) или DESC (по убыванию).

При этом по умолчанию сортировка происходит по возрастанию, т.е. ASC указывать не обязательно. Для сортировки по убыванию после ORDER BY необходимо явно указать DESC:
--
SELECT column_1, column_2
FROM table
ORDER BY column_1        -- сортировка по возрастанию


SELECT column_1, column_2
FROM table
ORDER BY column_1 ASC    -- сортировка по возрастанию


SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC   -- сортировка по убыванию
----
Оператор ORDER BY всегда указывается после операторов SELECT и FROM

Сортировать результат SQL-запроса можно сразу по нескольким колонкам, указывая их после ORDER BY через запятую вместе с направлением сортировки (ASC или DESC):
--
SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC, column_2    
-- сначала сортировка по первой колонке (по убыванию), 
-- затем по второй (по возрастанию)
----

Для ограничения числа извлекаемых из таблицы записей применяется оператор LIMIT -
--
SELECT column
FROM table
LIMIT n 
----
На месте n может быть любое целое число — ровно столько записей, сколько вам необходимо. Например, 100:
--
SELECT column
FROM table
LIMIT 100
----
Если n превысит количество записей в таблице, то в результат попадут все записи.

Важно помнить, что при работе с большими таблицами нужно по возможности ограничивать число извлекаемых записей, чтобы не создавать лишнюю нагрузку на базу данных.

Разумеется, операторы ORDER BY и LIMIT можно совмещать в одном запросе, при этом оператор LIMIT записывается и выполняется после оператора ORDER BY, ограничивая число записей в уже отсортированном результате:
--
SELECT column_1, column_2
FROM table
ORDER BY column_1 DESC, column_2
LIMIT 100
----

Важно запомнить порядок записи всех известных нам ключевых слов:
SELECT
FROM
ORDER BY
LIMIT

Также важно понять, что порядок их выполнения несколько отличается от того, в какой последовательности они указываются в SQL-запросе:
1 - Сначала выполняется оператор FROM — происходит выбор нужной таблицы.
2 - Затем SELECT — отбираются указанные столбцы.
3 - Потом ORDER BY — производится сортировка результирующей таблицы.
4 - И в самом конце LIMIT — ограничивается количество выводимых записей.











