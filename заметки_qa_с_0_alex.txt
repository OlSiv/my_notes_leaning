
купил на stepik за 2000 с промокодом (был 2200) - 
https://stepik.org/116411
-
видео-лекции с дублированием теории в виде конспекта



в telegram этот курс в версии 2022 года скачанный - 29.08.2022 



и курс в youtube от другого автора - 
https://youtube.com/playlist?list=PLKbJd47Kcbju2Vhi-FL7AI14vItVmGYk-



ОБЯЗАТЕЛЬНО - конспектировать самому каждое видео, а уже потом читать текстовую версию 



- купил у вас полное собрание курсов по тестированию(6 курсов),в каком порядке их желательно проходить?
>>>
Тестирование ПО с нуля до Специалиста +
+
Автоматизация Selenium +
+
Автоматизация API +
+
Python+SQL -
+
Нагрузочное тестирование -
+
Симулятор Собеседования - перед началом поиска работы -



на мой взгляд это оптимальный вариант, там как работа с базами данных предполагает написание кода, следовательно будет удобнее продолжить его писать уже на языке программирования, параллельно с ручным тестированием, но пропорционально, как я указал. С момента написания этого видео курсы очень увеличивались и по количеству материала и особенно по практике,  но рекомендации те же
+
Если Вы уже имеете навык написания кода, то лучше взять вот этот : Программа курса – Тестирование ПО:Автоматизация и Программирование.Python.Selenium – Stepik - Selenium это самый востребованный инструмент на рынке, просто он сложнее чем тестирование серверной части
+
Если навыков нет, то можете взять Программа курса – Тестирование ПО: Автоматизация и Программирование на Python. API – Stepik, он проще, но Selenium все равно придется учить
+
Либо можете взять вот этот пакет курсов, который объединяет в себя сразу два эти курса, это 1)дешевле 2)пройдя курс по базовому программированию и ООП, Вы поймете свои силы, если далось нормально, то Selenium, если нет, то сперва API



основные пути развития тестировщика:
+
1.Ручной тестировщик - закончили курс и сразу начинаете искать работу
+
2.Перспектива автоматизатора - закончили ручное тестирование, начинаете изучать автоматизацию тестирования на python или java
+
3.Нагрузочное тестирование - закончили ручное тестирование, начинаете изучать необходимые инструменты, технологии и языки для него
+
4.Тестирование безопасности - база ручного тоже нужна ,а дальше там своя специфика
+
5.Мобильное тестирование - закончили ручное тестирование и начинаете изучать эмуляторы, симуляторы, учите автоматизацию для мобильных устройств
+
Как видите везде нужна база ручного тестирования, а далее уже на Ваш вкус или куда судьба занесет. Шансов найти работу только после курса по ручному тестированию разумеется меньше, чем если будете обладать к примеру навыками автоматизации, так как работодатель если и рассматривает людей без опыта, то хочет гения за копейки. Увы, сейчас рынок такой. 



************************************

1.1 - Как стать тестировщиком. План эффективного обучения -

настоятельно рекомендуется конспектировать видео, для дальнейшего повторения и подготовки к собеседованиям



По всем вопросам обращайтесь - aleksandr_stepik@mail.ru



Рекомендуемое время обучения, на данном курсе, от 2 часов в день в будни, и от 4 часов в выходные дни



Яндекс.дзен, там есть стать и они по факту являлись сценариями к моим видео, там всё в тексте https://zen.yandex.ru/id/622a3070d5872b0d6e34ea6c



Курс "Тестирование ПО с Нуля до Специалиста" - https://stepik.org/course/116411/
+
Курс "Тестирование: Автоматизация и Программирование на Python. Selenium" - https://stepik.org/course/120491/
+
Курс "Тестирование: Автоматизация и Программирование на Python. API" - https://stepik.org/course/127716/
+
Курс "Программирование на Python с Нуля + Работа с SQL" - https://stepik.org/course/134773/
+
Курс "Симулятор собеседования для Тестировщика" - https://stepik.org/course/118983/
+
Курс "Нагрузочное тестирование ПО с помощью Jmeter" - https://stepik.org/course/122902/

 

Так же, жду Вас на своем Youtube канале - https://www.youtube.com/channel/UCq-PbXBWej-lxniUkyEmUxw

Телеграмм-канал с новостями и тематическими видео о Тестировании и Мире IT - https://t.me/QaTestingChannel



путь автора - 
+
учиться можно где угодно и при любых условиях 
+
изучал python 
+
изучал selenium - автоматизация тестирования интерфейсов 
+
реальная мотивация - (мой дедлайн - март 2025)
+
учеба стоит на первом месте 
+
выделять время - ежедневно по 2 часа 
+
нужен структурированный курс без воды и технические уроки
+
sql - как составлять таблицу, изменять в ней данные, простые запросы - особо на SQL время не тратить
+
изучение python 
+
рассказ о себе + довести до автоматизма 2 интервью 
+
API легче чем Selenium 
+
резюме - после 2.5 месяцев обучения 
+
не затягивать и не становиться вечным студентом 
+
максимально откликаться на вакансии - 200 откликов в день на hh.ru
+
в ютуб - каналы - 
АйТиБорода
Мы обречены
В офисе - https://www.youtube.com/@itdeploy/videos (видео с HR - https://www.youtube.com/watch?v=W93wk-Fy2lk)
Миша Ларченко 



книги по тестированию - кто-то Куликова или Савина советуют, я их не читал, там уж слшком много страниц, быстрее пройти курс. Дома пылится книга "Как тестируют в Гугл", все не могу добраться
+
читала Куликова Тестирование ПО, базовый курс. Подробно рассказывает, особенно хорошо дает определения терминов. А у Савина описание и рассказы о тестировании, и в целом о разработке, больше похожи на розовые мечты, чем на суровую реальность айти в России



как я бы делал сейчас:
+
1. после прохождения каждого урока перечитывал бы конспект по данному уроку
+
2.после прохождения блока перечитал бы конспект по данному блоку
+
3.после прохождения всего курса каждый день читал бы хотя бы 1 раз весь конспект
+
я не вижу смысла разбивать зубреж конспекта на модули, нужно видеть картину в целом. Я когда зубрил свой, то некоторые разделы со временем пропускал, так как они уже знались наизусть, а проблемные наоборот повторял.



вот понять и применить это другое,  тут как я люблю говорить "практика - это неотъемлемая часть обучения", именно поэтому я даю своим студентам на курсе по автоматизации задачи, которые максимально приближенны к тем с которыми им придется столкнуться и развивающие мышление и скиллы. Думаю мне тут не дадут соврать) Проходите заново курс, уже вдумчиво, с конспектом, с практикой, подключайте мышление. Я вчера общался со студентом, который хотел больше практики, но она на поверхности - прошли урок к примеру по позитивному и негативному тестированию, техникам тест дизайна, на которых мы учимся тестировать, после открыли любой сайт и тестируете, ищите баги, проверяете сценарии. Прошли задания по написанию тестовых сценариев, там нужно всех документов по 10 штук, сдали, получили оценку, а потом для себя 100 сделали, закрепили...Прошли SQL, начали учить программирование, пока в уме еще есть понимание логики...ну и конечно же "стиснуть зубы и пахать"



************************************

1.2 - Обязательно к прочтению - Инструкция по обучению и выполнению ДЗ
+



************************************

1.3 - Инструкция по выполнению тестовых заданий -
+



************************************

2.1 - Что такое тестирование? Как стать тестировщиком? -

тестирование - это процесс, направленный на исследование, испытание програмного продукта на соответствие ожидаемого результата поведения программного продукта фактическому поведению программного продукта 

процесс разработки програмного продукта начинается с составления требований 

требования - документ содержащий описание того, что должно быть реализовано в програмном продукте (визуальный шаблон, описание бизнес-логики продукта, на какой платформе будет работать, и т.д.)

баг (дефект) - отклонение фактического поведения ПО от ожидаемого результата поведения ПО 

тестировщик - это специалист, обеспечивающий качество продукта, проверяет фактическую работу продукта на соответствие требованиям заказчика и отсутствие отклонений от требуемой бизнес-логики 

что тестирует тестировщик - 
- веб-продукт (веб-приложение)
- мобильные приложения 
- игры 
- железо 
- десктопные приложения 

способы которыми тестировщик пользуется в своей работе - 
- ручное тестирование 
- использование вспомогательного ПО 
- автоматизированное тестирование 

4 типа тестировщиков - 
- ручной тестировщик 
- ручное тестирование + использование вспомогательного ПО 
- ручное тестирование + использование чужого проекта по автоматизации 
- чистый автоматизатор (авто-тестер) - пишут только код 

чтобы сейчас устроиться тестировщиком, нужно - 
- изучить ручное тестирование 
- изучить вспомогательное ПО 
- изучить автотестирование 
- хорошо составленное резюме 
- хорошие софт-скилы 

можно обучиться за 3 месяца 
порог входа ниже чем у разработчиков 
меньше вакансий на рынке чем у разработчиков 



************************************

2.2 - Этапы разработки и тестирования ПО. Основные роли в IT -

жизненный цикл разработки программного продукта (SDLC) - это процесс, направленный на создание, поддержание работоспособности, качества и надежности програмного продукта 

этапы жизненного цикла программного продукта (важно запомнить эти 6 этапов) - 
- требования 
- проектирование 
- разработка 
- тестирование 
- релиз (загрузка на продакшн-сервер)
- поддержка (чаты, электронная почта, телефон)

этапы жизненного цикла тестирования програмного продукта (STLC – Software testing lifecycle) - 
- анализ требований 
- тестовое планирование 
- написание тестовых сценариев 
- подготовка тестовой среды 
- выполнение тестов 
- заверщающая фаза 

более детально рассмотрим каждый из них -

Анализ требований -
На данном этапе, мы анализируем наши требования на логичность и отсутствие противоречия в требованиях друг другу. Более подробнее мы рассмотрим этот вопрос, когда будем разбирать работу с требованиями

Тестовое планирование -
Оно включает в себя составление плана тестирования, в котором будут указаны сроки, способы и методы тестирования.

Написание тестовых сценариев -
Очень важный этап, в котором мы производим написание тестовых сценариев тестирования программного продукта, то есть сценариев и вариантов комбинаций исходных данных и действий. Подготовка тестовых данных - то есть создание пользователей от чьих лиц мы будем тестировать. Ведь мы всегда имитируем деятельность, конечного пользователя.

Подготовка тестовой среды -
Это подготовка стендов (серверов) для тестирования, то есть стенда, которым будут пользоваться наши тестировщики, с актуальной версией продукта, в этом нам помогают DevOps. Это может происходить локально, удаленно или же на специализированных сервисах. Подготовка вспомогательного ПО, настройка различных доступов.

Выполнение тестов -
На данном этапе происходит сам процесс тестирования программного продукта, используя тестовые сценарии, написанные нами ранее.

Завершающая фаза -
Если в результате выполнения нашего тестирования, тесты выполнены успешно, то происходит передача протестированного функционала в Релиз



************************************

2.3 - Что такое QA и QС. Уровни должностей в IT. Пути развития в QA -

QA - обеспечение качества (работает на всех уровнях - от написания текстовой документации до релиза) Это включает в себя обучение персонала, подбор инструментов, формат написания документации, как будет проходить тестирования на различных стендах, приемочное тестирование и т.д.

QC - контроль качества - Это специалисты, которые, уже реализуют данную стратегию: пишут тестовую документацию, производят тестирование. Они проверяют соответствует программный продукт требованиям или нет.

Такое разделение есть только в крупных компаниях и в основном в иностранных компаниях, в большинстве случаев в России, странах СНГ говорят просто тестировщик или QA тестировщик.

Теперь рассмотрим уровни должностей или старшинства в IT, внутри одной специальности:

1)Junior – это младший специалист, с опытом до года, основная задача которого писать и проходить тест-кейсы. Junior в основном занимается ручным тестированием, с небольшим навыком работы с базами данных и вспомогательным софтом. В реалиях нынешнего рынка, данный специалист уже имеет знания по базовому программированию и автоматизации, но не обязательно будет их применять.

2)Middle – это специалист среднего уровня. Уверенный специалист с опытом 1-3 года, он, как и junior занимается ручным тестированием и хорошо работает с базами данных и вспомогательным ПО. Так же уже должен иметь начальные навыки программирования, писать автоматизированные тесты на проектах автоматизации, которые были написаны до них;

3)Senior – почетное звание, специалист с опытом более 3 лет. Уверенно знает языки программирования, и не один, инструменты, которые используют при построение проекта по автоматизации и самостоятельно способен написать его;

4)Team Lead – лидер команды, человек, который вырос из senior, он занимается менеджерской функцией, отвечает за качество продукта на проекте, контролирует и направляет свою команду тестировщиков.

Важная ремарка по автоматизации, дело в том, что такие жесткие требования начались примерно с начала 2022 года, так что вы легком можете встретить тестировщика с опытом в 5 лет, который не будет иметь данных навыков, в связи с тем, что когда он устраивался, они не требовались, а сам он к примеру не хочет развиваться в этом направлении.

есть еще один путь - это путь перехода тестировщика автоматизатора, в независимости от его должности: junior, middle, senior в разработчики. Но для этого требуется высокий навык программирования и не всегда это выгодно по зарплат


ДЗ - 

Опишите  процесс разработки программного продукта, перечислив все основные этапы (раскрыть их), прокомментировав роли всех ее участников, на каждом этапе -

1. Выработка требований по ПО - заказчик с руководителем проекта устанавливают, какой продукт нужен заказчику, что и как он должен делать, фиксируют требования в письменном виде 

2. Проектирование - на основе требований системный аналитик, дизайнер, фронт и бек разработчики проектируют продукт в зонах своей ответственности 

3. Разработка - дизайнер делает дизайн, фронт реализует дизайн на HTML, CSS, JS, бекэндер проектирует базы данных и пишет бизнес-логику

4. Тестирование - тестировщик на основании жизненного цикла тестирования програмного продукта подготавливает и проводит тестирование, в случае необходимости указывает на ошибки (баги) разработчикам, после исправления ошибок тестирует снова, пока фактическое поведение продукта не станет полностью совпадать с ожидаемым поведением

5. Релиз (загрузка продукта на продакшн-сервер) - бекэндеры и девопс загружают получившуюся версию продукта на сервер, где ПО становиться доступно пользователям 

6. Поддержка - осуществляется поддержка и консультирование клиентов по ньюансам работы продукта специалистами поддержки, при необходимости привлекаются девопс, администратор баз данных, разработчики - для настройки продукта под конкретные нужды пользователей 


ответ автора - 
от Вас на собеседовании будут ждать подобный ответ: 
"В процесс разработки программного продукта входят следующие этапы: 
1. требования. Руководитель проекта составляет требования для команды разработчика, координирует их работу. Бизнес аналитик разрабатывает логику продукта. 
2. проектирование. Руководитель проекта совместно с дизайнерами проектирует графически проект. Дизайнер визуально воплощает его в макеты. 
3. разработка. Разработчики разворачивают серверы, базы данных. Разрабатывают фронтенд часть и бэкенд. 
4. тестирование. тестировщики согласно требованиям проводят тестирование программного продукта, и если находят отклонения, то отправляют на разработку. если все исправно, то в релиз. 
5. релиз. 
6. поддержка. специалисты тех. поддержки делятся на три линии: 1-справочная служба по несложным вопросам. 2- специалисты могут просмотреть по базам данных, и другим система и дать более техническую консультацию, по возможности устранить неполадки. 3- специалисты уровня разработки могут решить проблему, Конда она связана с базами данных или сервером." 



************************************

2.5 - Виды окружений - 

виды стендов (серверов) для развертывания программного продукта - 

- local - локально - это компьютер разработчика 

- dev - development - стенд для нескольких рабработчиков проекта 

- test - стенд для тестирования, обычно тестировщик заводит на нем несколько пользователей для тестирования (у некоторых компаний dev и test - это один и тот же стенд, но в идеале это должно быть два разных стенда)

- pre-prod - стенд для проверки перед релизом - по характеристикам должен быть очень приближен к проду, так как на нем проводится тестирование производительности

- prod - стенд для готовой версии продукта к которому имеют доступ пользователи 



************************************

3.1 - Основные принципы тестирования - 

7 принципов тестирования - 

- тестирование демонстрирует наличие дефектов (если при тестировании не найдены баги, это не означает что их нет, так как тестирование снижает вероятность дефектов (багов), но не означает что их нет)

- исчерпывающее тестирование (проверить вообще все варианты невозможно, нужно проверять самые ожидаемые комбинации и воспользоваться попарным тестированием - про попарное тестирование - https://habr.com/ru/company/otus/blog/592575/)

- ранее тестирование (чтобы найти дефекты как можно раньше, следует начинать тестирование на ранних стадиях цикла разработки ПО, проверять требования на логичность и непротеворечивость, проверять код разработчиков)

- скопление дефектов (80% дефектов находятся в 20% продукта, и наоборот, 20% дефектов находятся в 80% продукта. Необходимо предусмотреть, каким функционалом будет пользоваться наш конечный пользователь продукта и уделить ему больше внимания, а также предусмотреть проблематичные участки, например которые требуют ввода данных в поля и где есть логика зависимости заполнения полей. Особенно это важно в финансовых продуктах, к примеру в банковском софте.)

- парадокс пестицида - Если в тестировании продукта использовать один и тот же сценарий снова и снова, то со временем этот набор тестов перестанет выявлять новые баги. Ведь после каждого нахождения багов, разработчики будут их исправлять, и при следующем тестировании скорее всего этот баг уже не обнаружится. Поэтому постоянно нужно придумывать новые сценарии тестирования и проверять с помощью них, чтоб проверить наибольшее количество сценариев.

- тестирование зависит от контекста - Тестирование проводится по-разному, в зависимости от контекста. Например, банковский софт, в котором критически важна безопасность, тестируется иначе, чем новостной портал или портал прогноза погоды. А программный продукт с высоким количеством пользователей должен тестироваться на производительность более серьезнее, чем сайт, на котором минимальное посещение в сутки.

- заблуждение об отсутствии ошибок - Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Продукт должен быть удобен и приятен в использовании, важно сохранить клиента, сделать так чтобы продукт удовлетворял ожиданиям и потребностям пользователя.

Очень важно чтобы вы поняли эти принципы и могли их применять в своей практике, ведь основная задача тестирования, это проверить продукт на соответствие заявленным требованиям, чтобы подтвердить его качество. Ведь чем больше дефектов мы сможем устранить до попадания в релиз, тем большим спросом будет пользоваться наш продукт, сохранится результат и минимизируются затраты на их устранения.

- рецензия автора курса на мой ответ - 
1)не раскрыт этап Проектирование, не указано чтотимннно происходит на фронтенде и бэкенде 
2)на этапе Поддержка необходимо указать все 3 линии поддержки и прописать что на них происходит

то же самое, но кратко - 

1. Тестирование демонстрирует наличие дефектов. Если не нашли баги, не значит, что их нет.

2. Исчерпывающее тестирование. Не получится протестировать абсолютно всё, либо не хватит денег, либо времени, либо то и то. В англоязычных есть in scope/out of scope, т.е. что в области исследования(тестирования) и вне его.

3. Раннее тестирование. Начать тестирование стоит как можно на более ранних стадиях. Чем раньше найдём, тем лучше и будет способствовать уменьшению последующих расходов.

4. Скопление дефектов. Принцип парето 80/20, действует практически везде (лучше погуглить) в жизни.

5. Парадокс пестицида. Нужно придумывать разные варианты/сценарии тестирования, так сказать, от одного средства "глаза" замыливаются.

6. Тестирование зависит от контекста. Например, банковский софт тестируется иначе, чем те же новостные порталы.

7. Заблуждение об отсутствии ошибок. Отсутствие дефектов не всегда значит готовность к релизу. Важно учитывать также удобство, приятно использовать продукт и степень удовлетворённость/ожидание клиента.



************************************

3.2 - Функциональное и нефункциональное тестирование -

классификация тестирования - 
- по уровню функционального тестирования 
- по уровню детализации приложения 
- по запуску кода на исполнение 
- в зависимости от исполнителей 
- по позитивности сценариями
- по цели тестирования 

классификация тестирования по уровню функционального тестирования -
- функциональное тестирование – тестирование которое направлено на проверку соответствия функциональных требований ПО к его реальным характеристикам. Подтверждение того, что наш продукт обладает всем функционалом, который требует заказчик. Функциональное тестирование отвечает на вопрос – что должен делать наш продукт?
- нефункциональное тестирование – направленно на проверку соответствия свойств ПО с его нефункциональными требованиями. Тестирование свойств, которые не относятся к функциональности системы – надежность, производительность и т.д. Нефункциональное тестирование отвечает на вопрос – как это должен делать наш продукт?

Виды функционального тестирования - 

- Дымовое тестирование (smoke test) — тестирование, которое проводится после появления нового билда. Направлено на проверку готовности разработанного продукта к проведению расширенного тестирования и определения общего качества продукта. Дает ответ готово ли приложение к выполнению своих основных функций. Давайте это рассмотрим на примере интернет магазина: Авторизуемся - производим выбор продукта – оплату - получаем подтверждение оплаты. Так же для примера рассмотрим сайт для размещения и скачивания фото. Ожидание совпадает с фактическим результатом. Должно быть быстрым.
К примеру: Авторизуемся -  производим выбор продукта – оплату - получаем подтверждение оплаты. 
Сразу уточню, в продукте может быть различный функционал. Например, возьмем сайт ВКонтакте. Это социальная сеть, основная его цель – это общение людей. Но она не заключается только в том, чтоб один человек зарегистрировался и мог написать другому зарегистрированному пользователю. По мимо писем, здесь так же есть возможность создавать сообщества, прослушивать музыку, смотреть видео, производить оплату и т.д, и для тестирования данных направлений так же проводится дымовое тестирование, например создание нового сообщества, прослушивание и подгрузка новой песни и т.д. Это очень важно понимать. Любую крупную бизнес-логику можно разбить на шаги, каждый этот шаг нужно тестировать, в том числе применяя дымовое тестирование.

- Тестирование критического пути (critical path) — направлено для проверки функциональности, используемой обычными пользователями во время их повседневной деятельности.
Основной тип тестовых испытаний, во время которого значимые элементы и функции приложения проверяются на предмет правильности работы при их стандартном использовании. Проверка типичных повседневных заданий пользователя. Выбор шрифта, возможность вставки текста, картинок, фильтры по цене и/или производителю товара и т.д
Давайте рассмотрим пример интернет-магазина – мы авторизовались, перешли в каталог продукции и начали производить фильтрацию результатов поиска
Другой пример – отправка сообщения в почтовом сервисе – изменение вида шрифта, цвета, размера и т.д

- Расширенное тестирование (extended) — направлено на исследование всей заявленной в требованиях функциональности.
Проверка нестандартного использования продукта (например, вводить не корректные логин и пароль в окне авторизации, работать на многих вкладках одновременно, подгрузка файлов недопустимых размеров или форматов. Максимально загружать нашу систему, проводить множество негативных тестов.



Виды нефункционального тестирования - 

1)Тестирование производительности (performance testing) – комплекс видов тестирования целью которых является проверка работоспособности, стабильности, потребления ресурсов и других атрибутов в условиях других сценариев использования и нагрузок
Это очень важный вид тестирование, ведь стабильность работоспособности нашего продукта – это очень важный показатель, ведь если наше приложение будет виснуть, не возвращать вовремя информацию, то пользователь перестанет им пользоваться.
Более подробно мы поговорим о данном виде тестирования в блоке по Нагрузочному тестированию, а сейчас давайте рассмотрим подвиды данного вида тестирования:
Давайте для пример установим дефолтное значение, то есть значение по умолчанию – что норма посещения нашего сайта одновременно – 1000 человек

-Нагрузочное (load testing) — определение или сбор показателей производительности и времени отклика программно-технической системы или устройства в ответ на внешний запрос с целью установления соответствия требованиям, предъявляемым к данной системе (устройству). 
– производительность в пределах нормы, например одновременное присутствие до 1000 пользователей на сайте (то есть наша норма), в идеале конечно установить это значение именно при 1000 пользователях

-Стресс (stress testing)- экстремальная нагрузка, в разы превышающая норму

Приведу пример, все мы знаем, что такое черная пятница, день в году, когда товары продаются с большой скидкой. Предположим, что у нас есть интернет-магазин, норма его посещения одновременно 1000 пользователей, наступает черная пятница и к нам на сайт заходит 5000 пользователей, что происходит – начинаются сбои, руководству магазина это не нужно. Именно поэтому важно производить данное тестирование, чтоб подготовиться к стресс нагрузкам

-Стабильность – проверка приложения при длительной работе

То есть происходит нагрузка нашей системы в пределах нормы, к примеру на день, неделю, месяц и смотрим как она будет себя вести

-Объемное (volume testing)– тестирование при увеличенных объемах обрабатываемых данных (например, 1000 пользователей отправляют одновременно сообщения или же загружают файлы)

2)Инсталляционное тестирование (installation testing) — тестирование, направленное на проверку успешной установки и настройки, обновления или удаления приложения. К примеру, проверка устанавливается ли наше мобильное приложение через плей-маркет, когда мы скачиваем с браузера нашего смартфона, установка с флешки, с компьютера и т.д
Проверяем обновление нашего приложение, возможность откатиться к предыдущей версии. Удаление нашего приложения, повторная установка и т.д

3)Проверка удобства (Usability) – проверка на удобство, соотношение дизайна ПП к функциональности, цветового оформления, текста, обучаемость и т.д то на сколько наш продукт удобен конечному пользователю. Это очень важно, так как наш продукт должен быть удобен и интуитивно понятен нашему пользователю, для того, чтоб он хотел пользоваться им снова и снова

4)Тестирование безопасности (security testing) — это стратегия тестирования, используемая для проверки безопасности системы, а также для анализа рисков, связанных с обеспечением целостного подхода к защите приложения, атак хакеров, вирусов, несанкционированного доступа к конфиденциальным данным.

5)Тестирование локализации(L10N) и интернационализации(I18N) –

-процесс адаптации нашего ПО к языку и культуре клиента (перевод, дата и время, символика, единицы измерения, цветов, валюта). К примеру, в некоторых странах используют как единицу расчета сантиметры, метры, километры, а в других дюймы, футы, мили. На сайтах должна быть возможность автоматического перевода единицы измерения или предусмотрен такой функционал.

-на сколько наш продукт может в дальнейшем адаптироваться к той или иной локации – особенности языка, удобность перестройки под него. Например, в азиатских странах.

6)Тестирование доступности(accessibility) – доступность людям с ограниченными возможностями, необязательно инвалиды

Тут можно привести пример с возможностью просматривать субтитры, например в том же ютубе, если у вас нет наушников, а вы не хотите пользоваться звуком, то можете включить субтитры. Или же возможность увеличить шрифт и размер кнопок на мобильном приложении. Аудио воспроизведение текста и т.д.



нагрузочное тестирование - до 1000 человек  включительно, выполняют различную деятельность на короткий промежуток времени

стресс-тестирование - более 2000 человек на короткий промежуток времени

стабильность - до 1000 человек  включительно, выполняют различную деятельность на неделю

объемное - до 1000 человек  включительно, выполняют одинаковую деятельность, например грузят файлы в письмо, в почтовом сервисе



ДЗ -

В данном ответе как пример продукта буду использовать мобильное приложение (игру).

I. Функциональное тестирование - это проверка того, что продукт (ПО) выполняет те функции (ту работу) которую должен выполнять.

1 - дымовое тестирование - мобильное приложение (игра) открывается, запускается, персонаж двигается, очки за игровые действия начисляются. 

2 - тестирование критического пути - выбор персонажей игры, возможность менять их характеристики, приобретать и менять предметы для улучшения силы персонажа и т.п.

3 - расширенное тестирование - попытка войти в игровой аккаунт используя неправильные логин и/или пароль
  
  
  
II. Нефункциональное тестирование - это тестирование свойств (качеств) продукта (надежность, удобство, нагрузоустойчивость).

1 - тестирование производительности (далее под буквами идут виды тестирования производительности):

- а - нагрузочное тестирование - проверяется как ведет себя мобильное приложение когда в нем недолго находится планируемое для одновременной работы в приложении количество пользователей (допустим если мы планируем что в приложении в среднем одномоментно будет 10_000 пользователей, то 10_000 или немного меньше)

- б - стресс-тестирование - проверяется как ведет себя мобильное приложение когда в нем находится количество пользователей, в несколько раз превышающее планируемое количество пользователей (есть ли сбои? подвисает или нет?)

- в - тестирование на сталильность - проверяется как ведет себя мобильное приложение когда в нем длительный период времени находится планируемое для одновременной работы в приложении количество пользователей

- г - объемное тестирование - проверяется как ведет себя мобильное приложение когда в нем планируемое для одновременной работы количество пользователей одновременно совершают какие-либо ресурсозатратные действия 


2 - инсталяционное тестирование - тестирование с целью проверки успешности установки, обновления, удаления приложения 

3 - проверка удобства - проводится с целью проверки максимального удобства приложения для пользователя - удобно ли расположены элементы управления, оптимальны ли шрифты текста, цветовая гамма для восприятия и т.п.

4 - тестирование безопасности - насколько безопасно приложение от утечки данных, атак хакеров, воздействию вирусов. 

5 - тестирование локализации и интернацинализации - меняются ли в приложении меры веса, длинны и т.п. в зависимости от региона использования приложения, качественно ли выполнен языковой перевод на язык региона, где используется приложение. 

6 - тестирование доступности - проверяется насколько приложение удобно для пользователей с ограниченными возможностями - управление приложением одной рукой, возможность увеличение шрифта/экрана, ввод информации голосом а не через клавиатуру, возможность вместо звука запустить субтитры, возможность озвучки текста голосом (звуком).



************************************

3.4 - Модульное (unit), интеграционное, системное и приемочное тестирование -

классификация тестирования -
- по уровню функционального тестирования 
- по уровню детализации приложения 
- по запуску кода на исполнение 
- в зависимости от исполнителей 
- по позитивности сценария 
- по цели тестирования 

разберем очень важную классификацию тестирования, а именно по уровню детализации приложения -

1)Модульное тестирование  или юнит-тестирование (англ. unit testing) — проводится для тестирования какого-либо одного логически выделенного и изолированного элемента (модуля) системы в коде. Проводится самими разработчиками, так как предполагает полный доступ к коду.

Модульное тестирование производят сами разработчики, не тестировщики. Для чего это нужно

Рассмотрим с вами идеальную ситуацию этапов разработки и тестирования программного продукта: разработчику поступает задача, для реализации некого функционала. Он пишет программный код, далее он сам должен руками это все проверить, а также написать юнит тест, который будет запускаться каждый раз, при сборке нового билда, то есть версии нашего продукта. Далее он передает его уже тестировщику, который проверяет уже различные сценарии тестирования данного функционала. То есть понятно, что разработчики не на столько углублены в процесс тестирования и его подходы, но они в любом случае должны проверить хотя бы позитивный сценарий руками. 

Идея юнит тестов состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких ошибок.

2)Интеграционное тестирование (Integration testing) — тестирование, направленное на проверку корректности взаимодействия нескольких модулей, объединенных в единое целое.

Взаимодействие компонентов, модулей и иных систем между собой. Тестирование части системы, состоящей из 2-х и более модулей.

Приведу пример, у нас с вами есть возможность оплаты товара на сайте, разработчики разместили там платежную систему, которая связывает наш сайт с внешней системой банка, то есть это взаимодействие нескольких систем между собой. Мы проверяем прошла ли оплата в полной мере.

Другой пример – предположим, что мы разрабатываем сайт по доставке еды, пользователь выбрал любимые блюда, ввел нужный адрес в поле с адресными данными или решил выбрать «указать на карте». Как вы понимаете, разработчики сайта не будут разрабатывать свою карту города, не будут строить маршруты, они воспользуются уже разработанным данным функционалом, например яндекс или google картами и просто подключат данный функционал для нашего сайта. И мы проверяем что данный адрес действительно отображается корректно на нашем сайте, что пользователь не ввел несуществующий адрес.

Еще один пример, интернет-магазин, мы авторизовались, выбрали товар и перенесли в корзину. После чего мы проверяем, что у нас в корзине именно выбранный нами товар, по названию, характеристикам, цене.

Все три примера являются интеграционным тестированием, то есть проверкой взаимодействия нескольких модулей или систем между собой

3)Системное тестирование (System testing) — тестирование взаимодействия между всеми компонентами системы или разных систем между собой или тестирование интерфейсов, между которыми взаимодействует система. Полная проверка приложения, всех модулей, можно ли пройти весь бизнес путь.

Друзья, тут можно привести пример из нашего урока по дымовому тестированию, когда мы проводим тестирование основного бизнес-процесса нашего продукта. Так же можно его усложнить, добавив сюда подходы из теста критического пути, когда мы работаем с фильтрами.

Авторизация – переход в каталог – выбор товара используя фильтры – перенос в корзину – подтверждение товара - оплата товара, проверка списания денежных средств – получение данных когда товар будет выслан или готов к выдачи – подтверждение получения товара

4)Приёмочное тестирование (acceptance test) —

тестирование на сдаче приемки всего программного продукта или его части Заказчику

А) Пользовательское приемное тестирование (User Acceptance Testing) – перед релизом собирается группа конечных пользователей, тестируется основной функционал, при наличии дефектов-устраняются.

Приведу простой пример – мы разрабатываем компьютерную игру, сделали некую ее версию и выкладываем либо в открытой доступ, то есть в сеть или же для ограниченного количества пользователей и просим в нее поиграть, сказать свои впечатления.

Б) Эксплуатационное (Operational acceptance testing) – производится пользователем или администратором в среде, которая имитирует реальные условия эксплуатации ПО, производится тестирование резервного копирования, аварийное восстановление системы, безопасность ПО

В) На соответствие контракту – на соответствие гостов, нормативных актов и т.д



************************************

3.5 - Классификация по запуску кода на исполнение и по исполнителю

классификация по запуску кода на исполнение - 
- статистическое тестирование 
- динамическое тестирование 

Статическое тестирование — тестирование без запуска кода на исполнение.
Это процесс обнаружения и устранения ошибок и дефектов в различных сопроводительных документах (например, требованиях к программному обеспечению).
В рамках этого подхода тестированию могут подвергаться и проверка их на актуальность:
- Документы (требования, тест-кейсы, описания архитектуры приложения, схемы баз данных и т.д.). К примеру, у нас появился новый функционал и часть тест-кейсов стала не актуальной, необходимо вносить в них корректировки
- Графические прототипы (например, эскизы пользовательского интерфейса). Интерфейс нашего продукта может регулярно меняться, добавляться новые поля, кнопки и т.д., необходимо так же корректировать и эскизы нашего интерфейса
- Код приложения (что часто выполняется самими программистами в рамках аудита кода (code review), являющегося специфической вариацией взаимного просмотра в применении к исходному коду). Код приложения также можно проверять с использованием техник тестирования на основе структур кода.
- Параметры (настройки) среды исполнения приложения.
- Подготовленные тестовые данные.

Динамическое тестирование — тестирование проводится на работающей системе, не может быть осуществлено без запуска программного кода приложения.
Запускаться на исполнение может как код всего приложения целиком (системное тестирование), так и код нескольких взаимосвязанных частей (интеграционное тестирование), отдельных частей и даже отдельные участки кода.
Основная идея этого вида тестирования состоит в том, что проверяется реальное поведение (части) приложения.
Проще говоря, динамическое тестирование выполняется путем фактического использования приложения и определения того, работает ли функциональность так, как ожидается
То есть любое тестирование, в котором мы начинаем взаимодействовать с приложением, является динамическим. Например, проверка авторизации на сайте, запуск приложения, совершение какого либо действия в компьютерной игре и многое другое. Наша задача — посмотреть, как продукт реагирует на наши действия. Для этого мы вводим все необходимые условия и смотрим результат.

Классификация в зависимости от исполнителей:
- Альфа-тестирование — объектом данного тестирования является ранняя версия программного продукта. Может выполняться внутри организации-разработчика с возможным частичным привлечением конечных пользователей.
То есть тестирование членами команды разработки или, к примеру привлечение сотрудников со стороны Заказчика
- Бета-тестирование — тестирование программного обеспечения, выпускаемое для ограниченного количества пользователей. Главная цель — получить отзывы клиентов о продукте и внести соответствующие изменения. Например, в производстве видео игр, часто выпускают бета-версию игры на рынок, чтоб пользователи испытали и оценили ее.



************************************

3.6 - Позитивное и негативное тестирование

Тестирование классифицируют по следующим видам:
- позитивное 
- негативное

Позитивное тестирование – тестирование с применением сценариев, в которых ожидается нормальное, правильное поведение системы.
С его помощью мы можем определить, что система делает то, для чего и была создана. То есть тестирование с корректным использованием данных и выполнение шагов, соответствующих бизнес-логике продукта.

Негативное тестирование - тестирование с применением сценариев, в которых ожидается внештатное поведение системы, неверное. Когда минимум одно используемое данное не корректно.

Какой результат мы ждем от позитивных и негативных тестов?
- Позитивное тестирование должно нам всегда давать результат в виде отсутствия багов.
- Негативные проверки могут дать 2 результата:
1. На данный ввод у продукта есть ответ в виде сообщения/контроля. К примеру, сообщение о том, что введен некорректный логин или пароль, либо формат файла не поддерживается системой и т.д.
2. Система не знает, как реагировать на введенные данные, то есть она либо не дает нам пройти дальше, либо же выполняет те действия, которые не должна. К примеру, мы вводим верный логин, но не правильный пароль и система все равно дает нам авторизоваться в системе.

Сперва мы производим позитивное тестирование, а далее негативное. Ведь сперва мы должны убедиться, что система работает согласно своей бизнес логике.

Сначала мы проверяем работу системы, когда наш условный пользователь работает с системой «правильно», то есть вводит корректные данные и делает действия которые соответствуют логике продукта. А уже потом приступаем к проверке отклика системы на пользователя, который допускает различные ошибки (ввод неверных данных). И наша система должна быть готова ответить на неверный запрос. Это и есть цель негативного тестирования.

Давайте рассмотрим эти виды тестирования на примере.
Мы работаем с почтовым сервисов:
1)ввели наш логин
2)ввели корректный (правильный) пароль, к примеру "qwer1234"
3)нажали кнопку "Войти"
4)попали в наш личный кабинет
Это был пример позитивного тестирования авторизации.

Теперь давайте рассмотрим пример негативного тестирования:
1)ввели наш логин
2)ввели некорректный (не правильный) пароль, к примеру "qwer12345"
3)нажали кнопку "Войти"
4)получили оповещение о том, что наш пароль неверен

Оба наших теста прошли успешно, ведь мы первоначально уже знали, что получим такой результат. В данных тестах, мы проверили два сценария:
1)возможность авторизации на сайте, используя корректные данные
2)невозможность авторизации на сайте, используя некорректные данные и получение оповещения от системы.

Два данных подхода к тестированию - являются краеугольными во всем процессе тестирования, на них вы должны строить все ваши тестовые сценарии и не забывать, что мы, как тестировщики, имитируем деятельность конечного пользователя и должны предугадать все его действия.

Если Вы вводите корректные данные - это позитивное тестирование
Если Вы вводите некорректные данные - это негативное тестирование
Если система отработала верно, например для позитивного тестирования позволила пройти дальше или при негативном тестировании выдала предупреждение - значит оно успешное
Если она не дала продолжить работать при введении корректных данных или же наоборот, позволила работать при введении некорректных данных - значит тестирование не успешно и мы получили ошибку.



************************************

3.7 - Классификация по цели тестирования

1) смоук тестирование - это тестирование нового функционала, для того чтоб убедиться что продукт работает.

2)регрессионное - это повторное тестирование сатрого функционала, после того как у нас появился новый,чтоб убедиться что мы не навредили тому что было разработано ранее

3)автоматизация облегчает жизнь тестировщикам, потому что позволяет быстрее проводить тестирование, да, это AQA

4)"зачем мы говорим о ре-тесте сразу после тест нового функционала" . В данном видео мы говорим о причинах, по которой мы проводим тестирование:

а)тестирование нового функционала когда он вышел

б)регрессионное - тестирование всего старого функционала и смотрим, чтоб все работало

в)ретест, то есть повторное, когда нашли баг, его исправил разработчик и мы проверили что реально исправил.

Это не значит что мы сразу все 3 проводим, это значит что мы обсудили когда вообще возвможно тестирование, причины чтоб его начать.

Классификация по цели тестирования:

1)Тестирование новой функциональности (new feature test) – производится, как только была разработана новая функциональность.
То есть, как только разработчик выполнил свою часть работы, по созданию новой функциональности, он передает ее на тестирование. Данный функционал проходит все этапы тестирования начиная с дымового тестирования, теста критического пути и заканчивается расширенным тестом.

2)Re-test – проверка правильности исправления дефекта. Повторное тестирование функционала, в котором был найден дефект, то есть баг.
Разработчик разработал новый функционал, тестировщик его проверил, нашел там баг, занес его в бактрекинговую систему, типа Jira, я уже не много рассказывал о ней, в последующих уроках мы чуть больше затронем эту тему. Далее, когда разработчик исправил наш баг, или как говорят в IT «зафиксил», он говорит нашему тестировщику что баг исправлен, так вот повторная проверка нашего функционала, на отсутствие устраненного бага, называется re-test. Если баг не обнаружен, то новый функционал отправляется в релиз, если он повторно обнаружился, то снова возвращается разработчику и т.д.

3)Регрессионное тестирование – что такое регрессионное тестирование и когда оно проводится, один из самых популярных вопросов на собеседованиях.
Это повторная проверка ранее разработанного функционала, после появления нового билда, то есть новой версии нашего программного продукта, для того, чтоб убедиться, что новый функционал билда никак ему не навредил
Оно проводится:
- после появления нового билда (новой версии нашего продукта)
- тестирование того функционала в котором часто обнаруживаются дефекты – то есть данный функционал может даже и не касаться нового, но в нем постоянно обнаруживаются различные сбои, некорректная работа и т.д
- плановое тестирование – оно может быть как ежедневным (к примеру, прохождение основных бизнес-процессов для того, чтоб убедиться, что наш продукт работает корректно, то есть обычные смоук тесты), либо же к примеру раз в месяц тестируется весь продукт, для этого составляют специальные тест-планы для регрессионного тестирования, куда включают самые важные и частые сценарии.
-того функционала который часто меняется в ходе разработки

регрессионное тестирование – это тестирование ранее разработанного функционала, с целью удостовериться, что новая функциональность (фича), не повлияла на прежнюю функциональность. Другими словами, работает ли наш старый функционал как должен, после появления нового функционала

Для того чтоб облегчить работу тестировщикам, чтоб им не приходилось ежедневно проходить множество тестов, данный процесс необходимо автоматизировать. Для этого и существует автоматизация тестирования, то есть выбирается язык программирования, например Python или Java, используются различные фреймворки для того, чтоб сымитировать деятельность конечного пользователя.

Например, у нас есть сценарий, который будет включать в себя авторизацию в интернет-магазине, выбор товара, перенос его в корзину и оплату товара. Используя те технологии что я перечислил, мы имитируем деятельность пользователя, прописываем все шаги нашего теста в коде, и у нас после его запуска открывается браузер, открывается нужная нам ссылка, заполняются все поля, нажимаются кнопки. При этом это все происходит гораздо быстрее, ведь нам не нужно вручную заполнять все поля, система делает это моментально. Тем самым мы экономим время, силы, ресурсы, людей. Так же есть различные средства CI/CD, благодаря которым мы можем запускать наши тесты удаленно, по событию или по расписанию. К примеру, можно настроить что после каждого появления нового билда, то есть, когда разработчик внес изменения в код и выложил это на стенд, будет происходить автоматический запуск наших тестов, для того, чтоб убедиться, что код нашего разработчика не навредил нашему старому функционалу. Так же это можно настроить по расписанию, например каждое утро, в 6 часов будет запускаться набор наших тестов, и придя на работу мы будем видеть результат. Разумеется, запускаются не все тесты, только их часть, основных, потому что прогон всех тестов может занять несколько часов.

По опыту скажу так, в жизни я ни разу не слышал чтоб кто-то говорил этот термин (санитарное), все говорят Дымовое. В целом в работе мало кто разделяет на виды тестирования, в основном все говорят - тестирование нового функционала, позитивное, негативное, повторное, интеграционное, автоматизированное и регрессионное, иногда нагрузочное. Других терминов вы не услышите) В курсе это дается, потому что на собеседованиях спрашивают



************************************

3.8 - Тестирование с помощью техник тест-дизайна

=












